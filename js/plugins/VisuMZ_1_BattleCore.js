//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.57;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.57] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x3237d7=_0x26e3;(function(_0x561a92,_0x175acb){const _0x2fb0b3=_0x26e3,_0x13d03a=_0x561a92();while(!![]){try{const _0x1d8262=-parseInt(_0x2fb0b3(0x68e))/0x1+parseInt(_0x2fb0b3(0x197))/0x2*(-parseInt(_0x2fb0b3(0x8eb))/0x3)+-parseInt(_0x2fb0b3(0x63b))/0x4*(-parseInt(_0x2fb0b3(0x1b5))/0x5)+parseInt(_0x2fb0b3(0x858))/0x6+-parseInt(_0x2fb0b3(0x86d))/0x7+-parseInt(_0x2fb0b3(0xa87))/0x8*(parseInt(_0x2fb0b3(0x6d6))/0x9)+parseInt(_0x2fb0b3(0x316))/0xa;if(_0x1d8262===_0x175acb)break;else _0x13d03a['push'](_0x13d03a['shift']());}catch(_0x3aed37){_0x13d03a['push'](_0x13d03a['shift']());}}}(_0x1574,0x3b502));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x3237d7(0x921)](function(_0xf5c9bb){const _0x5759fe=_0x3237d7;return _0xf5c9bb['status']&&_0xf5c9bb[_0x5759fe(0x5fd)]['includes']('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label][_0x3237d7(0x98d)]||{},VisuMZ['ConvertParams']=function(_0x41e96a,_0x3ae12f){const _0x255071=_0x3237d7;for(const _0x2be8a6 in _0x3ae12f){if(_0x255071(0x18e)!==_0x255071(0x734)){if(_0x2be8a6[_0x255071(0x453)](/(.*):(.*)/i)){if(_0x255071(0x1ab)!==_0x255071(0x1ab))return this[_0x255071(0x93b)](_0x18be08);else{const _0x4fcf13=String(RegExp['$1']),_0x3d2e4f=String(RegExp['$2'])['toUpperCase']()['trim']();let _0x3996c1,_0x2ecc76,_0x47d456;switch(_0x3d2e4f){case'NUM':_0x3996c1=_0x3ae12f[_0x2be8a6]!==''?Number(_0x3ae12f[_0x2be8a6]):0x0;break;case _0x255071(0xa32):_0x2ecc76=_0x3ae12f[_0x2be8a6]!==''?JSON[_0x255071(0x176)](_0x3ae12f[_0x2be8a6]):[],_0x3996c1=_0x2ecc76[_0x255071(0x1e0)](_0x511d59=>Number(_0x511d59));break;case _0x255071(0x4b7):_0x3996c1=_0x3ae12f[_0x2be8a6]!==''?eval(_0x3ae12f[_0x2be8a6]):null;break;case _0x255071(0xb04):_0x2ecc76=_0x3ae12f[_0x2be8a6]!==''?JSON['parse'](_0x3ae12f[_0x2be8a6]):[],_0x3996c1=_0x2ecc76['map'](_0xe4e4f2=>eval(_0xe4e4f2));break;case _0x255071(0x3f5):_0x3996c1=_0x3ae12f[_0x2be8a6]!==''?JSON[_0x255071(0x176)](_0x3ae12f[_0x2be8a6]):'';break;case _0x255071(0xb9):_0x2ecc76=_0x3ae12f[_0x2be8a6]!==''?JSON[_0x255071(0x176)](_0x3ae12f[_0x2be8a6]):[],_0x3996c1=_0x2ecc76[_0x255071(0x1e0)](_0x3663db=>JSON[_0x255071(0x176)](_0x3663db));break;case _0x255071(0x78a):_0x3996c1=_0x3ae12f[_0x2be8a6]!==''?new Function(JSON[_0x255071(0x176)](_0x3ae12f[_0x2be8a6])):new Function('return\x200');break;case _0x255071(0x4e8):_0x2ecc76=_0x3ae12f[_0x2be8a6]!==''?JSON['parse'](_0x3ae12f[_0x2be8a6]):[],_0x3996c1=_0x2ecc76['map'](_0x37142a=>new Function(JSON[_0x255071(0x176)](_0x37142a)));break;case'STR':_0x3996c1=_0x3ae12f[_0x2be8a6]!==''?String(_0x3ae12f[_0x2be8a6]):'';break;case'ARRAYSTR':_0x2ecc76=_0x3ae12f[_0x2be8a6]!==''?JSON[_0x255071(0x176)](_0x3ae12f[_0x2be8a6]):[],_0x3996c1=_0x2ecc76[_0x255071(0x1e0)](_0x120316=>String(_0x120316));break;case _0x255071(0x9fe):_0x47d456=_0x3ae12f[_0x2be8a6]!==''?JSON[_0x255071(0x176)](_0x3ae12f[_0x2be8a6]):{},_0x41e96a[_0x4fcf13]={},VisuMZ[_0x255071(0x3d3)](_0x41e96a[_0x4fcf13],_0x47d456);continue;case _0x255071(0x45c):_0x2ecc76=_0x3ae12f[_0x2be8a6]!==''?JSON[_0x255071(0x176)](_0x3ae12f[_0x2be8a6]):[],_0x3996c1=_0x2ecc76[_0x255071(0x1e0)](_0x55e40a=>VisuMZ[_0x255071(0x3d3)]({},JSON['parse'](_0x55e40a)));break;default:continue;}_0x41e96a[_0x4fcf13]=_0x3996c1;}}}else this[_0x255071(0x56c)](_0x266381[_0x255071(0x5fc)],0x0);}return _0x41e96a;},(_0x34a519=>{const _0x1ada9a=_0x3237d7,_0x2da291=_0x34a519[_0x1ada9a(0x444)];for(const _0x49ac39 of dependencies){if(!Imported[_0x49ac39]){if(_0x1ada9a(0x591)!==_0x1ada9a(0x591)){const _0x3016db=_0x4061f5['BattleCore']['Settings'][_0x1ada9a(0x10b)],_0x47a5a9=_0x24cc5b[_0x1ada9a(0x634)]();if(_0x3016db[_0x1ada9a(0x2ce)])this[_0x1ada9a(0xb35)](_0x3c52a2,_0x47a5a9[_0x1ada9a(0x8da)],_0x5819d7['buffAdd']);if(_0x3016db[_0x1ada9a(0x98b)])this[_0x1ada9a(0xb35)](_0x4496dd,_0x47a5a9['addedDebuffs'],_0x40181b[_0x1ada9a(0x8b1)]);if(_0x3016db['ShowRemovedBuff'])this[_0x1ada9a(0xb35)](_0x2a0532,_0x47a5a9['removedBuffs'],_0x1b1f75[_0x1ada9a(0x58f)]);}else{alert(_0x1ada9a(0x990)[_0x1ada9a(0x117)](_0x2da291,_0x49ac39)),SceneManager['exit']();break;}}}const _0x23d5fe=_0x34a519[_0x1ada9a(0x5fd)];if(_0x23d5fe['match'](/\[Version[ ](.*?)\]/i)){const _0x1164ac=Number(RegExp['$1']);_0x1164ac!==VisuMZ[label][_0x1ada9a(0x4d8)]&&(alert(_0x1ada9a(0x84d)['format'](_0x2da291,_0x1164ac)),SceneManager[_0x1ada9a(0x110)]());}if(_0x23d5fe[_0x1ada9a(0x453)](/\[Tier[ ](\d+)\]/i)){const _0x9306a0=Number(RegExp['$1']);if(_0x9306a0<tier)alert(_0x1ada9a(0x32a)[_0x1ada9a(0x117)](_0x2da291,_0x9306a0,tier)),SceneManager[_0x1ada9a(0x110)]();else{if(_0x1ada9a(0x825)!==_0x1ada9a(0x9d4))tier=Math[_0x1ada9a(0x2e0)](_0x9306a0,tier);else{if(!_0x4da3d5[_0x1ada9a(0x59e)]())return;_0x5a7fc8[_0x1ada9a(0xa4)][_0x1ada9a(0x287)][_0x1ada9a(0x4db)](this,_0x418a1b);}}}VisuMZ[_0x1ada9a(0x3d3)](VisuMZ[label][_0x1ada9a(0x98d)],_0x34a519[_0x1ada9a(0x149)]);})(pluginData),VisuMZ[_0x3237d7(0x5e8)]=function(_0x5b5ed7){const _0x17b3ab=_0x3237d7;let _0x190d00=[];for(const _0x20b486 of _0x5b5ed7){_0x17b3ab(0x5f4)===_0x17b3ab(0x1cb)?this[_0x17b3ab(0x4dd)]=(this[_0x17b3ab(0x4dd)]+0x1)%0x4:_0x190d00=_0x190d00['concat'](VisuMZ[_0x17b3ab(0x37e)](_0x20b486));}return _0x190d00[_0x17b3ab(0x921)](_0x1c1bb4=>_0x1c1bb4);},VisuMZ[_0x3237d7(0x37e)]=function(_0x528c1f){const _0x221ccd=_0x3237d7,_0x4b27f0=BattleManager[_0x221ccd(0x64f)]()['filter'](_0x44d0ff=>_0x44d0ff&&_0x44d0ff['isAppeared']()),_0x48982a=BattleManager[_0x221ccd(0xb5c)],_0x3a7a7e=BattleManager[_0x221ccd(0x93f)],_0xdf36a7=BattleManager[_0x221ccd(0xabe)]?BattleManager[_0x221ccd(0xabe)]['slice'](0x0):_0x4b27f0;_0x528c1f=_0x528c1f[_0x221ccd(0x165)]()[_0x221ccd(0x194)]();if(_0x528c1f===_0x221ccd(0x6b7))return[_0x48982a];else{if(_0x528c1f===_0x221ccd(0x9c8))return[_0x3a7a7e];else{if(_0x528c1f===_0x221ccd(0x6b1)){if(_0x221ccd(0x2b7)===_0x221ccd(0x4a4))return _0x33cf0d(_0x54ab64['$2']);else{if(_0x3a7a7e){const _0x29bac4=_0xdf36a7['indexOf'](_0x3a7a7e);return _0x29bac4>=0x0?[_0xdf36a7[_0x29bac4-0x1]||_0x3a7a7e]:[_0x3a7a7e];}}}else{if(_0x528c1f===_0x221ccd(0xa94)){if('DcmwM'!=='DcmwM'){_0x1ce298-=_0x27abe1;const _0xc7bcea=_0x425339[_0x221ccd(0xa4)][_0x221ccd(0x98d)]['Damage'][_0x221ccd(0x963)],_0xe6f4ba=_0x1b0ebe['max'](0x1-_0xe69f5/((_0x32c798-_0x49bd12)*_0xc7bcea+_0x3f6681),0.01);_0x84b937*=_0xe6f4ba,_0x5ed18d+=_0x45097c;}else{if(_0x3a7a7e){const _0x1c8e62=_0xdf36a7[_0x221ccd(0x4fa)](_0x3a7a7e);return _0x1c8e62>=0x0?[_0xdf36a7[_0x1c8e62+0x1]||_0x3a7a7e]:[_0x3a7a7e];}}}else{if(_0x528c1f===_0x221ccd(0x200)){if(_0x221ccd(0x3aa)==='bBkzD')return _0xdf36a7;else this['_currentAngle']=this['_targetAngle'],this[_0x221ccd(0x163)]&&(this['_targetAngle']=0x0,this[_0x221ccd(0x28f)]=0x0);}else{if(_0x528c1f===_0x221ccd(0x9f))return[_0x48982a][_0x221ccd(0x169)](_0xdf36a7);else{if(_0x528c1f===_0x221ccd(0xacf)){if('QaBRH'===_0x221ccd(0xb51))_0x5da100['name']=_0xdb25f7(_0x48c221['$1']);else return _0x4b27f0[_0x221ccd(0x921)](_0x525123=>_0x525123!==_0x48982a&&!_0xdf36a7[_0x221ccd(0x231)](_0x525123)&&_0x525123['notFocusValid']());}}}}}}}if(_0x48982a){if(_0x528c1f===_0x221ccd(0x281)){if('Chkmf'===_0x221ccd(0x930))this['opacity']=this[_0x221ccd(0xf4)](this[_0x221ccd(0x61e)],this['_targetOpacity'],_0x32aaa7,_0x1158ab,_0x55bae8);else return _0x48982a['friendsUnit']()['aliveMembers']();}else{if(_0x528c1f===_0x221ccd(0xa96)){if(_0x221ccd(0x8fa)===_0x221ccd(0x8a8))this[_0x221ccd(0x2af)]=!![];else return _0x48982a[_0x221ccd(0x889)]()[_0x221ccd(0x7ff)]()[_0x221ccd(0x921)](_0x43c1b1=>_0x43c1b1!==_0x48982a);}else{if(_0x528c1f===_0x221ccd(0x1d3))return _0x48982a[_0x221ccd(0x889)]()['aliveMembers']()[_0x221ccd(0x921)](_0x31322d=>_0x31322d!==_0x3a7a7e);else{if(_0x528c1f===_0x221ccd(0x7ea))return _0x48982a[_0x221ccd(0x889)]()[_0x221ccd(0x6e1)]();else{if(_0x528c1f[_0x221ccd(0x453)](/FRIEND INDEX (\d+)/i)){if(_0x221ccd(0x4ed)!==_0x221ccd(0x4ed))this[_0x221ccd(0x147)]=_0x221ccd(0x826);else{const _0x68f3e5=Number(RegExp['$1']);return[_0x48982a[_0x221ccd(0x889)]()['members']()[_0x68f3e5]];}}}}}}if(_0x528c1f==='alive\x20opponents')return _0x48982a[_0x221ccd(0x26c)]()[_0x221ccd(0x7ff)]();else{if(_0x528c1f===_0x221ccd(0x2dd)){if(_0x221ccd(0x96a)!==_0x221ccd(0x96a))this[_0x221ccd(0x35b)]();else return _0x48982a[_0x221ccd(0x26c)]()[_0x221ccd(0x7ff)]()[_0x221ccd(0x921)](_0xc05303=>_0xc05303!==_0x3a7a7e);}else{if(_0x528c1f===_0x221ccd(0x356))return _0x48982a[_0x221ccd(0x26c)]()[_0x221ccd(0x6e1)]();else{if(_0x528c1f[_0x221ccd(0x453)](/OPPONENT INDEX (\d+)/i)){const _0x42910a=Number(RegExp['$1']);return[_0x48982a[_0x221ccd(0x26c)]()[_0x221ccd(0x199)]()[_0x42910a]];}}}}}if(_0x528c1f===_0x221ccd(0x6ae))return $gameParty['aliveMembers']();else{if(_0x528c1f===_0x221ccd(0x292))return $gameParty['aliveMembers']()[_0x221ccd(0x921)](_0x220fc3=>_0x220fc3!==_0x48982a);else{if(_0x528c1f==='alive\x20actors\x20not\x20target')return $gameParty[_0x221ccd(0x7ff)]()[_0x221ccd(0x921)](_0x3c9182=>_0x3c9182!==_0x3a7a7e);else{if(_0x528c1f===_0x221ccd(0x6dd))return $gameParty[_0x221ccd(0x6e1)]();else{if(_0x528c1f[_0x221ccd(0x453)](/ACTOR INDEX (\d+)/i)){const _0x5e01ba=Number(RegExp['$1']);return[$gameParty[_0x221ccd(0x199)]()[_0x5e01ba]];}else{if(_0x528c1f[_0x221ccd(0x453)](/ACTOR ID (\d+)/i)){if(_0x221ccd(0x2fd)===_0x221ccd(0x2fd)){const _0x5c623e=Number(RegExp['$1']);return[$gameActors[_0x221ccd(0x5f9)](_0x5c623e)];}else this[_0x221ccd(0x7b6)]=_0x221ccd(0x51d);}}}}}}if(_0x528c1f===_0x221ccd(0x2a1))return $gameTroop[_0x221ccd(0x7ff)]();else{if(_0x528c1f===_0x221ccd(0x874))return $gameTroop[_0x221ccd(0x7ff)]()[_0x221ccd(0x921)](_0x2229c6=>_0x2229c6!==_0x48982a);else{if(_0x528c1f===_0x221ccd(0xaba))return $gameTroop['aliveMembers']()[_0x221ccd(0x921)](_0x1622d4=>_0x1622d4!==_0x3a7a7e);else{if(_0x528c1f==='dead\x20enemies'){if('BeWNQ'===_0x221ccd(0x44a)){this[_0x221ccd(0xa2c)]()[_0x221ccd(0x70d)](_0x77f84a);if(_0x294152[_0x221ccd(0x33b)]())_0x590c60[_0x221ccd(0x845)]['x']=-0x1;}else return $gameTroop[_0x221ccd(0x6e1)]();}else{if(_0x528c1f[_0x221ccd(0x453)](/ENEMY INDEX (\d+)/i)){if(_0x221ccd(0x65e)==='PlnZe'){const _0x25c201=Number(RegExp['$1']);return[$gameTroop[_0x221ccd(0x199)]()[_0x25c201]];}else _0x2aa819=_0x592d36[_0x221ccd(0xa51)];}else{if(_0x528c1f[_0x221ccd(0x453)](/ENEMY ID (\d+)/i)){if(_0x221ccd(0x4ec)!==_0x221ccd(0x4ec)){let _0x3f63a0=0x0;if(this[_0x221ccd(0x342)]&&this['constructor']!==_0x61f023){const _0x53eeb8=this[_0x221ccd(0x342)]['scale']['y'];_0x3f63a0-=(_0x53eeb8-0x1)*this[_0x221ccd(0x766)];}return _0x3f63a0;}else{const _0x20433c=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x221ccd(0x921)](_0x501b30=>_0x501b30['enemyId']()===_0x20433c);}}}}}}}if(_0x528c1f===_0x221ccd(0xa33)){if(_0x221ccd(0x644)===_0x221ccd(0x401))_0x390d83['BattleCore']['Game_Action_applyGlobal'][_0x221ccd(0x4db)](this),this[_0x221ccd(0x1c7)](),this[_0x221ccd(0x298)]();else return _0x4b27f0[_0x221ccd(0x921)](_0x3a1bc3=>_0x3a1bc3[_0x221ccd(0x101)]());}else{if(_0x528c1f==='alive\x20battlers\x20not\x20user')return _0x4b27f0[_0x221ccd(0x921)](_0xa75641=>_0xa75641[_0x221ccd(0x101)]()&&_0xa75641!==_0x48982a);else{if(_0x528c1f===_0x221ccd(0x43c))return _0x4b27f0[_0x221ccd(0x921)](_0x3a9703=>_0x3a9703[_0x221ccd(0x101)]()&&_0x3a9703!==_0x3a7a7e);else{if(_0x528c1f===_0x221ccd(0xdd))return _0x4b27f0[_0x221ccd(0x921)](_0x506827=>_0x506827[_0x221ccd(0x4a3)]());}}}return[];},PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x833),_0x540e04=>{const _0x7d51ad=_0x3237d7;if(!SceneManager[_0x7d51ad(0x5cb)]())return;VisuMZ[_0x7d51ad(0x3d3)](_0x540e04,_0x540e04);const _0x4f586f=$gameTemp[_0x7d51ad(0x968)](),_0xad7bd7=BattleManager[_0x7d51ad(0x343)],_0x1f2e74=BattleManager[_0x7d51ad(0xb5c)],_0x2df528=BattleManager['_allTargets']?BattleManager[_0x7d51ad(0xabe)]['slice'](0x0):[],_0x3d2ed4=BattleManager['_logWindow'];if(!_0x4f586f||!_0xad7bd7||!_0x1f2e74)return;if(!_0xad7bd7[_0x7d51ad(0x7be)]())return;if(_0x540e04[_0x7d51ad(0x545)])_0x3d2ed4[_0x7d51ad(0x5ad)](_0x1f2e74,_0xad7bd7[_0x7d51ad(0x7be)]());if(_0x540e04[_0x7d51ad(0x3f1)]){if(_0x7d51ad(0x426)==='XXySy')return this[_0x7d51ad(0xb23)];else _0x3d2ed4['push'](_0x7d51ad(0x8b4),_0x1f2e74,_0x2df528,!![]);}if(_0x540e04[_0x7d51ad(0x13c)])_0x3d2ed4[_0x7d51ad(0x857)](_0x7d51ad(0x8be),_0x1f2e74,_0xad7bd7);if(_0x540e04[_0x7d51ad(0xb08)])_0x3d2ed4['push']('waitForMovement');if(_0x540e04['CastAnimation'])_0x3d2ed4[_0x7d51ad(0x857)]('performCastAnimation',_0x1f2e74,_0xad7bd7);if(_0x540e04[_0x7d51ad(0x393)])_0x3d2ed4[_0x7d51ad(0x857)](_0x7d51ad(0x9c5));_0x4f586f[_0x7d51ad(0x20e)]('battlelog');}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x3eb),_0x292ab4=>{const _0x5e6f85=_0x3237d7;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5e6f85(0x3d3)](_0x292ab4,_0x292ab4);const _0x468ca6=$gameTemp[_0x5e6f85(0x968)](),_0x16e713=BattleManager[_0x5e6f85(0x343)],_0x45fdfd=BattleManager[_0x5e6f85(0xb5c)],_0x24071e=BattleManager[_0x5e6f85(0xabe)]?BattleManager[_0x5e6f85(0xabe)]['slice'](0x0):[],_0x432632=BattleManager['_logWindow'],_0x2529dc=_0x292ab4[_0x5e6f85(0x350)]??![];if(!_0x468ca6||!_0x16e713||!_0x45fdfd)return;if(!_0x16e713[_0x5e6f85(0x7be)]())return;let _0x27cd0c=_0x2529dc?_0x432632['getDualWieldTimes'](_0x45fdfd):0x1;for(let _0x305bd9=0x0;_0x305bd9<_0x27cd0c;_0x305bd9++){if(_0x2529dc&&_0x45fdfd[_0x5e6f85(0x5ef)]()){if(_0x5e6f85(0x376)!==_0x5e6f85(0x376))return _0x2f0b9d[_0x5e6f85(0xa4)][_0x5e6f85(0x98d)][_0x5e6f85(0x10b)][_0x5e6f85(0x5df)]['call'](this);else _0x432632[_0x5e6f85(0x857)](_0x5e6f85(0x22d),_0x45fdfd,_0x305bd9);}if(_0x292ab4[_0x5e6f85(0x886)])_0x432632['push']('performAction',_0x45fdfd,_0x16e713);if(_0x292ab4[_0x5e6f85(0x479)]>0x0)_0x432632[_0x5e6f85(0x857)](_0x5e6f85(0x369),_0x292ab4[_0x5e6f85(0x479)]);if(_0x292ab4['ActionAnimation'])_0x432632[_0x5e6f85(0x857)](_0x5e6f85(0x45d),_0x45fdfd,_0x24071e,_0x16e713[_0x5e6f85(0x7be)]()[_0x5e6f85(0x6bf)]);if(_0x292ab4[_0x5e6f85(0x393)])_0x432632[_0x5e6f85(0x857)]('waitForAnimation');for(const _0x422688 of _0x24071e){if('QcpoT'!=='XErGq'){if(!_0x422688)continue;if(_0x292ab4['ActionEffect'])_0x432632[_0x5e6f85(0x857)](_0x5e6f85(0x884),_0x45fdfd,_0x422688);}else{const _0x3a3467=this[_0x5e6f85(0x7be)]()[_0x5e6f85(0x4fe)];if(_0x3a3467[_0x5e6f85(0x453)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x3a3467[_0x5e6f85(0x453)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x311755(_0x26ad41['$1'])/0x64;else{let _0x26be5a=_0x567449[_0x5e6f85(0xa4)][_0x5e6f85(0x74f)][_0x5e6f85(0x4db)](this,_0x10c596);return _0x26be5a=this[_0x5e6f85(0x6b8)][_0x5e6f85(0x51a)]*_0x26be5a+this[_0x5e6f85(0x6b8)][_0x5e6f85(0x23e)],_0x26be5a;}}}}}_0x2529dc&&_0x45fdfd[_0x5e6f85(0x5ef)]()&&_0x432632[_0x5e6f85(0x857)](_0x5e6f85(0x786),_0x45fdfd);if(_0x292ab4[_0x5e6f85(0x3f1)])_0x432632[_0x5e6f85(0x857)](_0x5e6f85(0x8b4),_0x45fdfd,_0x24071e,![]);_0x468ca6['setWaitMode'](_0x5e6f85(0x7d6));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Set_TargetActionSet',_0x4b9002=>{const _0x1561bd=_0x3237d7;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1561bd(0x3d3)](_0x4b9002,_0x4b9002);const _0xf46312=$gameTemp[_0x1561bd(0x968)](),_0x1b998e=BattleManager[_0x1561bd(0x343)],_0x63ade1=BattleManager[_0x1561bd(0xb5c)],_0x179b29=BattleManager[_0x1561bd(0xabe)]?BattleManager[_0x1561bd(0xabe)][_0x1561bd(0xa76)](0x0):[],_0x4efbc1=BattleManager[_0x1561bd(0x1cd)],_0x985149=_0x4b9002[_0x1561bd(0x350)]??![];if(!_0xf46312||!_0x1b998e||!_0x63ade1)return;if(!_0x1b998e[_0x1561bd(0x7be)]())return;let _0x2fa8fb=_0x985149?_0x4efbc1[_0x1561bd(0x61f)](_0x63ade1):0x1;for(let _0x37c971=0x0;_0x37c971<_0x2fa8fb;_0x37c971++){if(_0x1561bd(0x801)!=='rPkNE')for(const _0x87da81 of _0x179b29){if('qRAYL'===_0x1561bd(0x7b3)){if(!_0x87da81)continue;_0x985149&&_0x63ade1[_0x1561bd(0x5ef)]()&&_0x4efbc1[_0x1561bd(0x857)](_0x1561bd(0x22d),_0x63ade1,_0x37c971);if(_0x4b9002[_0x1561bd(0x886)])_0x4efbc1['push'](_0x1561bd(0x5d8),_0x63ade1,_0x1b998e);if(_0x4b9002[_0x1561bd(0x944)]>0x0)_0x4efbc1['push'](_0x1561bd(0x369),_0x4b9002[_0x1561bd(0x944)]);if(_0x4b9002[_0x1561bd(0x26a)])_0x4efbc1[_0x1561bd(0x857)](_0x1561bd(0x45d),_0x63ade1,[_0x87da81],_0x1b998e[_0x1561bd(0x7be)]()[_0x1561bd(0x6bf)]);if(_0x4b9002['WaitCount2']>0x0)_0x4efbc1['push'](_0x1561bd(0x369),_0x4b9002['WaitCount2']);if(_0x4b9002[_0x1561bd(0x6a5)])_0x4efbc1[_0x1561bd(0x857)](_0x1561bd(0x884),_0x63ade1,_0x87da81);}else this['_targetHomeX']=_0x1d1244,this['_targetHomeY']=_0x1ce43c,this[_0x1561bd(0x9fd)]=_0xf26ee6,this['_homeWholeDuration']=_0x5f0c33,this['_homeEasing']=_0x2c4ab6,_0x35d780<=0x0&&this[_0x1561bd(0x689)]();}else{if(!_0x1e5126[_0x1561bd(0x5cb)]())return;const _0x20f5a3=_0x102a1d[_0x1561bd(0x968)]();if(!_0x20f5a3)return;_0x20f5a3['setWaitMode'](_0x1561bd(0x424));}}_0x985149&&_0x63ade1[_0x1561bd(0x5ef)]()&&_0x4efbc1[_0x1561bd(0x857)](_0x1561bd(0x786),_0x63ade1);if(_0x4b9002[_0x1561bd(0x3f1)])_0x4efbc1['push'](_0x1561bd(0x8b4),_0x63ade1,_0x179b29,![]);_0xf46312[_0x1561bd(0x20e)](_0x1561bd(0x7d6));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x131),_0x33adac=>{const _0x230a63=_0x3237d7;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x230a63(0x3d3)](_0x33adac,_0x33adac);const _0x2bd04e=$gameTemp[_0x230a63(0x968)](),_0x34ddf6=BattleManager[_0x230a63(0x343)],_0x577ff3=BattleManager['_subject'],_0x28fa66=BattleManager[_0x230a63(0xabe)]?BattleManager[_0x230a63(0xabe)][_0x230a63(0xa76)](0x0):[],_0x47acb2=BattleManager[_0x230a63(0x1cd)];if(!_0x2bd04e||!_0x34ddf6||!_0x577ff3)return;if(!_0x34ddf6[_0x230a63(0x7be)]())return;if(_0x33adac[_0x230a63(0x3f1)])_0x47acb2[_0x230a63(0x857)](_0x230a63(0x8b4),_0x577ff3,_0x28fa66,![]);if(_0x33adac[_0x230a63(0x4b1)])_0x47acb2[_0x230a63(0x857)]('waitForNewLine');if(_0x33adac[_0x230a63(0x2e3)])_0x47acb2['push'](_0x230a63(0x2a6));if(_0x33adac[_0x230a63(0x55e)])_0x47acb2[_0x230a63(0x857)](_0x230a63(0x2d9));if(_0x33adac[_0x230a63(0xa09)])_0x47acb2[_0x230a63(0x857)](_0x230a63(0x938),_0x577ff3);if(_0x33adac[_0x230a63(0xb08)])_0x47acb2[_0x230a63(0x857)](_0x230a63(0x962));_0x2bd04e[_0x230a63(0x20e)]('battlelog');}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x6e6),_0x48f274=>{const _0x3555e5=_0x3237d7;if(!SceneManager[_0x3555e5(0x5cb)]())return;if(!Imported[_0x3555e5(0x255)])return;VisuMZ['ConvertParams'](_0x48f274,_0x48f274);const _0x3d31ee=$gameTemp['getLastPluginCommandInterpreter'](),_0x56e04b=_0x48f274[_0x3555e5(0x105)];if(!_0x3d31ee)return;$gameScreen[_0x3555e5(0x589)](_0x48f274['Angle'],_0x48f274[_0x3555e5(0x1e5)],_0x48f274[_0x3555e5(0x758)]);if(_0x56e04b)_0x3d31ee[_0x3555e5(0x20e)]('battleAngle');}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x291),_0x2beba0=>{const _0x47bc10=_0x3237d7;if(!SceneManager[_0x47bc10(0x5cb)]())return;if(!Imported[_0x47bc10(0x255)])return;VisuMZ[_0x47bc10(0x3d3)](_0x2beba0,_0x2beba0);const _0x2391c1=$gameTemp[_0x47bc10(0x968)](),_0x288cf9=_0x2beba0[_0x47bc10(0x105)];if(!_0x2391c1)return;$gameScreen[_0x47bc10(0x589)](0x0,_0x2beba0[_0x47bc10(0x1e5)],_0x2beba0[_0x47bc10(0x758)]);if(_0x288cf9)_0x2391c1[_0x47bc10(0x20e)](_0x47bc10(0x908));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Angle_WaitForAngle',_0x5433be=>{const _0x1e1ea7=_0x3237d7;if(!SceneManager[_0x1e1ea7(0x5cb)]())return;if(!Imported[_0x1e1ea7(0x255)])return;const _0x2498e7=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2498e7)return;_0x2498e7[_0x1e1ea7(0x20e)](_0x1e1ea7(0x908));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x16a),_0x58bc3e=>{const _0x1893d4=_0x3237d7;if(!SceneManager[_0x1893d4(0x5cb)]())return;VisuMZ[_0x1893d4(0x3d3)](_0x58bc3e,_0x58bc3e);const _0x446a96=$gameTemp[_0x1893d4(0x968)](),_0x12228a=BattleManager[_0x1893d4(0x343)],_0x52fc93=BattleManager[_0x1893d4(0xb5c)],_0x27829b=VisuMZ[_0x1893d4(0x5e8)](_0x58bc3e['Targets']),_0x5c4f04=_0x58bc3e[_0x1893d4(0x87a)],_0x3a5322=BattleManager[_0x1893d4(0x1cd)];if(!_0x446a96||!_0x12228a||!_0x52fc93)return;if(!_0x12228a[_0x1893d4(0x7be)]())return;let _0x5d157d=_0x12228a[_0x1893d4(0x7be)]()[_0x1893d4(0x6bf)];if(_0x5d157d<0x0)_0x5d157d=_0x52fc93[_0x1893d4(0xa5a)]();$gameTemp[_0x1893d4(0xb60)](_0x27829b,_0x5d157d,_0x5c4f04),_0x58bc3e[_0x1893d4(0x393)]&&('TaYHC'!==_0x1893d4(0x91b)?_0x446a96[_0x1893d4(0x20e)](_0x1893d4(0x785)):(_0x486b91[_0x1893d4(0xa4)][_0x1893d4(0xaec)][_0x1893d4(0x4db)](this),this['performFlinch']()));}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0xca),_0x50e7a6=>{const _0x3993be=_0x3237d7;if(!SceneManager[_0x3993be(0x5cb)]())return;VisuMZ[_0x3993be(0x3d3)](_0x50e7a6,_0x50e7a6);const _0x1aa8e0=$gameTemp['getLastPluginCommandInterpreter'](),_0x42f383=BattleManager[_0x3993be(0xb5c)],_0x5814de=VisuMZ['CreateActionSequenceTargets'](_0x50e7a6[_0x3993be(0x30e)]),_0x9aff94=_0x50e7a6[_0x3993be(0x87a)],_0x242467=BattleManager[_0x3993be(0x1cd)];if(!_0x1aa8e0||!_0x42f383)return;const _0x2b8fc8=_0x42f383[_0x3993be(0xa5a)]();$gameTemp[_0x3993be(0xb60)](_0x5814de,_0x2b8fc8,_0x9aff94);if(_0x50e7a6[_0x3993be(0x393)]){if(_0x3993be(0x45e)===_0x3993be(0x45e))_0x1aa8e0['setWaitMode'](_0x3993be(0x785));else{const _0x2710be=_0x37314b[_0x3a6f45];if(!_0x2710be)return;const _0x4da7a4=new _0x4d00cb();this['addOnceParallelInterpreter'](_0x4da7a4),_0x4da7a4['setCommonEvent'](_0x594d59);}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x71a),_0x1a1e5a=>{const _0x2ae926=_0x3237d7;if(!SceneManager[_0x2ae926(0x5cb)]())return;VisuMZ[_0x2ae926(0x3d3)](_0x1a1e5a,_0x1a1e5a);const _0x3a2743=_0x29d4c5['attackAnimationIdSlot'](_0x1a1e5a[_0x2ae926(0x67a)]);if(_0x3a2743<=0x0)return;const _0x49d8cd=$gameTemp[_0x2ae926(0x968)](),_0x29d4c5=BattleManager[_0x2ae926(0xb5c)],_0x421224=VisuMZ[_0x2ae926(0x5e8)](_0x1a1e5a['Targets']),_0x4a2375=_0x1a1e5a['Mirror'],_0x39f09d=BattleManager[_0x2ae926(0x1cd)];if(!_0x49d8cd||!_0x29d4c5)return;$gameTemp[_0x2ae926(0xb60)](_0x421224,_0x3a2743,_0x4a2375),_0x1a1e5a[_0x2ae926(0x393)]&&(_0x2ae926(0x210)===_0x2ae926(0x210)?_0x49d8cd[_0x2ae926(0x20e)]('battleAnimation'):(_0x3c5993=_0x35fc1f[_0x2ae926(0x1d5)]()[_0x2ae926(0x7e8)],_0x174d43=_0x4cff93[_0x2ae926(0x1d5)]()[_0x2ae926(0x3f3)]));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xa3a),_0x5044a2=>{const _0x23a863=_0x3237d7;if(!SceneManager[_0x23a863(0x5cb)]())return;VisuMZ['ConvertParams'](_0x5044a2,_0x5044a2);const _0x5700a0=$gameTemp[_0x23a863(0x968)](),_0xa257ad=BattleManager[_0x23a863(0x343)],_0x509ea9=_0x5044a2[_0x23a863(0x87a)],_0x353bac=VisuMZ['CreateActionSequenceTargets'](_0x5044a2[_0x23a863(0x30e)]);if(!_0x5700a0||!_0xa257ad)return;if(!_0xa257ad[_0x23a863(0x7be)]())return;for(const _0x235d96 of _0x353bac){if(!_0x235d96)continue;_0x235d96[_0x23a863(0x6fb)](_0xa257ad,_0x509ea9);}if(_0x5044a2[_0x23a863(0x393)])_0x5700a0['setWaitMode'](_0x23a863(0x785));}),PluginManager['registerCommand'](pluginData['name'],_0x3237d7(0x8d8),_0xe69922=>{const _0xd03d7=_0x3237d7;VisuMZ[_0xd03d7(0x3d3)](_0xe69922,_0xe69922);const _0x210d8b=$gameTemp[_0xd03d7(0x968)](),_0x209486=VisuMZ[_0xd03d7(0x5e8)](_0xe69922[_0xd03d7(0x30e)]),_0x14a2f2=_0xe69922[_0xd03d7(0x241)];if(!_0x14a2f2)return;for(const _0x3077ca of _0x209486){if(!_0x3077ca)continue;if(!_0x3077ca[_0xd03d7(0x5ef)]())continue;_0x3077ca[_0xd03d7(0x24e)](_0x14a2f2);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xac1),_0x1532d9=>{const _0x17ecc6=_0x3237d7;if(!SceneManager[_0x17ecc6(0x2a7)])return;if(!SceneManager['_scene'][_0x17ecc6(0x314)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x17ecc6(0x3d3)](_0x1532d9,_0x1532d9);const _0xfe14e0=$gameTemp[_0x17ecc6(0x968)](),_0xabecf6=Math[_0x17ecc6(0x222)](_0x1532d9[_0x17ecc6(0x7f0)]),_0x33eeed=Math[_0x17ecc6(0x222)](_0x1532d9[_0x17ecc6(0x138)]);$gameTemp[_0x17ecc6(0x247)](_0xabecf6,_0x33eeed,_0x1532d9[_0x17ecc6(0xaf1)],_0x1532d9['Mirror'],_0x1532d9[_0x17ecc6(0x531)]),_0x1532d9[_0x17ecc6(0x5bb)]&&_0xfe14e0&&(SceneManager[_0x17ecc6(0x2a7)][_0x17ecc6(0x314)][_0x17ecc6(0xb52)](),_0xfe14e0[_0x17ecc6(0x20e)](_0x17ecc6(0x785)));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x795),_0x497335=>{const _0x4d6383=_0x3237d7;if(!SceneManager[_0x4d6383(0x5cb)]())return;VisuMZ[_0x4d6383(0x3d3)](_0x497335,_0x497335);const _0x2bb023=$gameTemp[_0x4d6383(0x968)](),_0x109dca=VisuMZ['CreateActionSequenceTargets'](_0x497335[_0x4d6383(0x30e)]),_0x3756cb=_0x497335[_0x4d6383(0xaf1)],_0x3e9690=_0x497335[_0x4d6383(0x87a)];if(!_0x2bb023)return;$gameTemp[_0x4d6383(0xb60)](_0x109dca,_0x3756cb,_0x3e9690);if(_0x497335[_0x4d6383(0x393)])_0x2bb023[_0x4d6383(0x20e)](_0x4d6383(0x785));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Animation_WaitForAnimation',_0x27c532=>{const _0xf0ba48=_0x3237d7;if(!SceneManager[_0xf0ba48(0x5cb)]())return;const _0x37f46d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x37f46d)return;_0x37f46d['setWaitMode']('battleAnimation');}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_BattleLog_AddText',_0xb0f95f=>{const _0x8c7c9c=_0x3237d7;if(!SceneManager[_0x8c7c9c(0x5cb)]())return;VisuMZ[_0x8c7c9c(0x3d3)](_0xb0f95f,_0xb0f95f);const _0x21b744=BattleManager[_0x8c7c9c(0x1cd)],_0x49a022=_0xb0f95f[_0x8c7c9c(0x2b4)]&&Imported[_0x8c7c9c(0xb4b)];_0x21b744[_0x8c7c9c(0x43b)](_0xb0f95f[_0x8c7c9c(0x86a)]),_0x49a022&&Imported['VisuMZ_4_CombatLog']&&$gameSystem['addTextToCombatLog'](_0xb0f95f[_0x8c7c9c(0x86a)]||'',_0xb0f95f[_0x8c7c9c(0x654)]||0x0);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x75d),_0x597c16=>{const _0x13c02d=_0x3237d7;if(!SceneManager[_0x13c02d(0x5cb)]())return;const _0x586030=BattleManager['_logWindow'];_0x586030[_0x13c02d(0x2d9)]();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_BattleLog_DisplayAction',_0x240f5d=>{const _0x4f2697=_0x3237d7;if(!SceneManager[_0x4f2697(0x5cb)]())return;const _0x1850ce=$gameTemp['getLastPluginCommandInterpreter'](),_0x4f9654=BattleManager[_0x4f2697(0x343)],_0x3358e6=BattleManager[_0x4f2697(0xb5c)],_0x1ae5df=BattleManager[_0x4f2697(0x1cd)];if(!_0x1850ce||!_0x4f9654||!_0x3358e6)return;if(!_0x4f9654[_0x4f2697(0x7be)]())return;_0x1ae5df[_0x4f2697(0x5ad)](_0x3358e6,_0x4f9654[_0x4f2697(0x7be)]()),_0x1850ce[_0x4f2697(0x20e)](_0x4f2697(0x7d6));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x478),_0x218ecf=>{const _0x2c747d=_0x3237d7;if(!SceneManager[_0x2c747d(0x5cb)]())return;const _0x402555=BattleManager[_0x2c747d(0x1cd)];_0x402555['popBaseLine']();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xb68),_0x1d112d=>{const _0x35f38a=_0x3237d7;if(!SceneManager['isSceneBattle']())return;const _0x34f44a=BattleManager['_logWindow'];_0x34f44a[_0x35f38a(0x828)]();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x95d),_0x47495=>{const _0x5d6572=_0x3237d7;if(!SceneManager['isSceneBattle']())return;const _0x7a7f14=BattleManager[_0x5d6572(0x1cd)];_0x7a7f14[_0x5d6572(0xaa6)]();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x155),_0x54e8eb=>{const _0x5a64ec=_0x3237d7;if(!SceneManager[_0x5a64ec(0x5cb)]())return;VisuMZ[_0x5a64ec(0x3d3)](_0x54e8eb,_0x54e8eb),SceneManager[_0x5a64ec(0x2a7)][_0x5a64ec(0x91d)](_0x54e8eb[_0x5a64ec(0x522)]);}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x8a0),_0x5d22b4=>{const _0x467e99=_0x3237d7;if(!SceneManager['isSceneBattle']())return;const _0x501d3c=$gameTemp['getLastPluginCommandInterpreter']();_0x501d3c[_0x467e99(0x20e)]('battlelog');}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x73b),_0x55fe5b=>{const _0xf13701=_0x3237d7;if(!SceneManager[_0xf13701(0x5cb)]())return;const _0xab06b4=$gameTemp[_0xf13701(0x968)](),_0xfea7a6=BattleManager['_logWindow'];_0xfea7a6[_0xf13701(0x9a3)](),_0xab06b4[_0xf13701(0x20e)](_0xf13701(0x7d6));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Camera_Clamp',_0x55aea7=>{const _0x1d9839=_0x3237d7;if(!SceneManager[_0x1d9839(0x5cb)]())return;if(!Imported[_0x1d9839(0x255)])return;VisuMZ[_0x1d9839(0x3d3)](_0x55aea7,_0x55aea7);const _0x313bde=$gameScreen[_0x1d9839(0x417)]();_0x313bde[_0x1d9839(0x38c)]=_0x55aea7[_0x1d9839(0x80b)];}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x62c),_0x17cf15=>{const _0x354a70=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x354a70(0x255)])return;VisuMZ[_0x354a70(0x3d3)](_0x17cf15,_0x17cf15);const _0x5c292f=$gameTemp[_0x354a70(0x968)](),_0x5dfcd3=_0x17cf15[_0x354a70(0x226)];$gameScreen[_0x354a70(0x964)](_0x17cf15[_0x354a70(0x729)],_0x17cf15[_0x354a70(0x87f)],_0x17cf15['Duration'],_0x17cf15[_0x354a70(0x758)]);if(_0x5dfcd3)_0x5c292f[_0x354a70(0x20e)](_0x354a70(0x636));}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x490),_0x35bbdc=>{const _0x3a898f=_0x3237d7;if(!SceneManager[_0x3a898f(0x5cb)]())return;if(!Imported[_0x3a898f(0x255)])return;VisuMZ[_0x3a898f(0x3d3)](_0x35bbdc,_0x35bbdc);const _0x238665=$gameTemp['getLastPluginCommandInterpreter'](),_0x242132=VisuMZ['CreateActionSequenceTargets'](_0x35bbdc[_0x3a898f(0x30e)]),_0x1b6ebe=_0x35bbdc[_0x3a898f(0x226)];$gameScreen[_0x3a898f(0x4d5)](_0x242132,_0x35bbdc[_0x3a898f(0x1e5)],_0x35bbdc[_0x3a898f(0x758)]);if(_0x1b6ebe)_0x238665['setWaitMode']('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x501),_0x311f0a=>{const _0x30b167=_0x3237d7;if(!SceneManager[_0x30b167(0x5cb)]())return;if(!Imported[_0x30b167(0x255)])return;VisuMZ[_0x30b167(0x3d3)](_0x311f0a,_0x311f0a);const _0x3247d0=$gameTemp[_0x30b167(0x968)](),_0x203ebc=_0x311f0a['WaitForCamera'];$gameScreen['setBattleCameraOffset'](_0x311f0a['OffsetX'],_0x311f0a['OffsetY'],_0x311f0a['Duration'],_0x311f0a[_0x30b167(0x758)]);if(_0x203ebc)_0x3247d0[_0x30b167(0x20e)]('battleCamera');}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x84f),_0x23559b=>{const _0x6b32dd=_0x3237d7;if(!SceneManager[_0x6b32dd(0x5cb)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x6b32dd(0x3d3)](_0x23559b,_0x23559b);const _0x570c80=$gameTemp[_0x6b32dd(0x968)](),_0x489faf=_0x23559b[_0x6b32dd(0x6be)],_0x4dddae=_0x23559b[_0x6b32dd(0xc0)],_0x2fbaf0=_0x23559b[_0x6b32dd(0x226)];if(_0x489faf){if(_0x6b32dd(0x315)!==_0x6b32dd(0x315))this['_battler'][_0x6b32dd(0xa06)]()&&this[_0x6b32dd(0xaef)]();else{const _0x10de43=Math[_0x6b32dd(0x222)](Graphics[_0x6b32dd(0xa28)]/0x2),_0x149069=Math[_0x6b32dd(0x222)](Graphics[_0x6b32dd(0x766)]/0x2);$gameScreen[_0x6b32dd(0x964)](_0x10de43,_0x149069,_0x23559b['Duration'],_0x23559b['EasingType']);}}if(_0x4dddae){if(_0x6b32dd(0x449)===_0x6b32dd(0x7c6)){if(!_0x5697aa['isSceneBattle']())return;const _0x30bd3b=_0x6c371[_0x6b32dd(0x968)]();_0x30bd3b[_0x6b32dd(0x20e)](_0x6b32dd(0x7d6));}else $gameScreen[_0x6b32dd(0x2f6)](0x0,0x0,_0x23559b[_0x6b32dd(0x1e5)],_0x23559b[_0x6b32dd(0x758)]);}if(_0x2fbaf0)_0x570c80[_0x6b32dd(0x20e)]('battleCamera');}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x80e),_0x5ac858=>{const _0x626ba9=_0x3237d7;if(!SceneManager[_0x626ba9(0x5cb)]())return;if(!Imported[_0x626ba9(0x255)])return;const _0x51d843=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x51d843)return;_0x51d843['setWaitMode']('battleCamera');}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x5ca),_0x4711a9=>{const _0x9b6967=_0x3237d7;if(!SceneManager[_0x9b6967(0x5cb)]())return;if(!Imported[_0x9b6967(0x7ac)])return;VisuMZ['ConvertParams'](_0x4711a9,_0x4711a9);const _0x1c7f7d=VisuMZ[_0x9b6967(0x5e8)](_0x4711a9[_0x9b6967(0x30e)]),_0x178d46=_0x4711a9['MotionAni'][_0x9b6967(0x165)]()[_0x9b6967(0x194)]();for(const _0x34d859 of _0x1c7f7d){if(_0x9b6967(0x840)===_0x9b6967(0x125))this['_tpbSceneChangeCacheActor']=null;else{if(!_0x34d859)continue;_0x34d859[_0x9b6967(0x5cd)](_0x178d46);}}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x32e),_0x2d0942=>{const _0x21d13f=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x21d13f(0x7ac)])return;VisuMZ[_0x21d13f(0x3d3)](_0x2d0942,_0x2d0942);const _0x55c024=VisuMZ[_0x21d13f(0x5e8)](_0x2d0942[_0x21d13f(0x30e)]),_0x328244=_0x2d0942[_0x21d13f(0xb30)];for(const _0x53fe54 of _0x55c024){if('YKRmn'!=='YKRmn'){if(!_0x468101[_0x21d13f(0x5cb)]())return;const _0x19214d=_0x18f9cd[_0x21d13f(0x1cd)];_0x19214d[_0x21d13f(0x2d9)]();}else{if(!_0x53fe54)continue;_0x53fe54['dragonbonesData']()[_0x21d13f(0x974)]=_0x328244;}}}),PluginManager['registerCommand'](pluginData['name'],_0x3237d7(0x647),_0x2ca1c7=>{const _0x5d6ad3=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5d6ad3(0xa47)])return;VisuMZ['ConvertParams'](_0x2ca1c7,_0x2ca1c7);const _0x3b146b=BattleManager[_0x5d6ad3(0x343)],_0x1ee862=_0x2ca1c7[_0x5d6ad3(0xa58)];if(!_0x3b146b)return;_0x3b146b[_0x5d6ad3(0xaac)]=_0x1ee862;}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x593),_0x57c98b=>{const _0x1d5737=_0x3237d7;if(!SceneManager[_0x1d5737(0x5cb)]())return;if(!Imported[_0x1d5737(0xa47)])return;const _0x3d011d=BattleManager[_0x1d5737(0x343)];if(!_0x3d011d)return;_0x3d011d[_0x1d5737(0x63f)]();}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x178),_0x35ed05=>{const _0x479516=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x479516(0xa47)])return;VisuMZ[_0x479516(0x3d3)](_0x35ed05,_0x35ed05);const _0x3cf6ae=BattleManager['_action'],_0xfa4d64=_0x35ed05[_0x479516(0xa58)];if(!_0x3cf6ae)return;_0x3cf6ae[_0x479516(0x682)]=_0xfa4d64;}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x61b),_0x471be9=>{const _0xb57d68=_0x3237d7;if(!SceneManager[_0xb57d68(0x5cb)]())return;if(!Imported[_0xb57d68(0xa47)])return;const _0x3dbc7f=BattleManager[_0xb57d68(0x343)];if(!_0x3dbc7f)return;_0x3dbc7f[_0xb57d68(0x994)]=!![];}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xb43),_0x4ae0bf=>{const _0x1118e9=_0x3237d7;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x1118e9(0x5cb)]())return;VisuMZ[_0x1118e9(0x3d3)](_0x4ae0bf,_0x4ae0bf);const _0x38d8be=VisuMZ[_0x1118e9(0x5e8)](_0x4ae0bf[_0x1118e9(0x30e)]);for(const _0x1baaea of _0x38d8be){if(!_0x1baaea)continue;_0x1baaea['removeHorrorEffect'](_0x1118e9(0x2fc)),_0x1baaea[_0x1118e9(0x421)](_0x1118e9(0xd5)),_0x1baaea[_0x1118e9(0x421)]('tv'),_0x1baaea[_0x1118e9(0x8d5)]();}$gamePlayer[_0x1118e9(0xaa6)]();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x1e6),_0x473cf3=>{const _0x2a2728=_0x3237d7;if(!Imported[_0x2a2728(0x405)])return;if(!SceneManager[_0x2a2728(0x5cb)]())return;VisuMZ[_0x2a2728(0x3d3)](_0x473cf3,_0x473cf3);const _0x174ecf=VisuMZ[_0x2a2728(0x5e8)](_0x473cf3[_0x2a2728(0x30e)]),_0x104dca=_0x2a2728(0xd5);_0x473cf3[_0x2a2728(0xa23)]=Math[_0x2a2728(0x404)](_0x473cf3[_0x2a2728(0xb0a)]/0x2),_0x473cf3[_0x2a2728(0x54f)]=_0x473cf3[_0x2a2728(0xb0a)],_0x473cf3['refreshRequest']=!![];for(const _0x59f120 of _0x174ecf){if(!_0x59f120)continue;_0x59f120[_0x2a2728(0x48b)](_0x104dca,_0x473cf3);}$gamePlayer[_0x2a2728(0xaa6)]();}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x2e6),_0x304223=>{const _0x1d898b=_0x3237d7;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1d898b(0x3d3)](_0x304223,_0x304223);const _0x2c8e86=VisuMZ[_0x1d898b(0x5e8)](_0x304223['Targets']);for(const _0x2ea58d of _0x2c8e86){if(_0x1d898b(0x5d9)===_0x1d898b(0x5d9)){if(!_0x2ea58d)continue;_0x2ea58d['removeHorrorEffect'](_0x1d898b(0xd5));}else!_0x5c7dd5[_0x1d898b(0xa4)][_0x1d898b(0x98d)][_0x1d898b(0x10b)]['ShowMissEvasion']?this[_0x1d898b(0x857)]('performMiss',_0x4d7a14):_0x45bb53[_0x1d898b(0xa4)][_0x1d898b(0xaa1)]['call'](this,_0x429249);}$gamePlayer[_0x1d898b(0xaa6)]();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x1be),_0x39c238=>{const _0x3aeab5=_0x3237d7;if(!Imported[_0x3aeab5(0x405)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3aeab5(0x3d3)](_0x39c238,_0x39c238);const _0x93e846=VisuMZ[_0x3aeab5(0x5e8)](_0x39c238['Targets']),_0x3be69b=_0x3aeab5(0x2fc);for(const _0x56d5bd of _0x93e846){if(!_0x56d5bd)continue;_0x56d5bd[_0x3aeab5(0x48b)](_0x3be69b,_0x39c238);}$gamePlayer['refresh']();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Horror_NoiseRemove',_0x5863c8=>{const _0x213f7b=_0x3237d7;if(!Imported[_0x213f7b(0x405)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x213f7b(0x3d3)](_0x5863c8,_0x5863c8);const _0x544b4d=VisuMZ[_0x213f7b(0x5e8)](_0x5863c8[_0x213f7b(0x30e)]);for(const _0xc8bc1d of _0x544b4d){if(!_0xc8bc1d)continue;_0xc8bc1d[_0x213f7b(0x421)]('noise');}$gamePlayer[_0x213f7b(0xaa6)]();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x54e),_0x2abe9d=>{const _0x55bb4f=_0x3237d7;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x55bb4f(0x5cb)]())return;VisuMZ[_0x55bb4f(0x3d3)](_0x2abe9d,_0x2abe9d);const _0x5afb70=VisuMZ['CreateActionSequenceTargets'](_0x2abe9d[_0x55bb4f(0x30e)]),_0x4b99a4='tv';for(const _0x536ad0 of _0x5afb70){if(_0x55bb4f(0x56f)!==_0x55bb4f(0x21d)){if(!_0x536ad0)continue;_0x536ad0[_0x55bb4f(0x48b)](_0x4b99a4,_0x2abe9d);}else this[_0x55bb4f(0x9ea)](_0x55bb4f(0xe1)),_0x6c398d[_0x55bb4f(0xa4)][_0x55bb4f(0x8e5)][_0x55bb4f(0x4db)](this),this[_0x55bb4f(0x6d2)]('Defeat');}$gamePlayer['refresh']();}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Horror_TVRemove',_0x32893a=>{const _0x23f2c1=_0x3237d7;if(!Imported[_0x23f2c1(0x405)])return;if(!SceneManager[_0x23f2c1(0x5cb)]())return;VisuMZ['ConvertParams'](_0x32893a,_0x32893a);const _0x337a02=VisuMZ['CreateActionSequenceTargets'](_0x32893a[_0x23f2c1(0x30e)]);for(const _0x397303 of _0x337a02){if(!_0x397303)continue;_0x397303[_0x23f2c1(0x421)]('tv');}$gamePlayer[_0x23f2c1(0xaa6)]();}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0xa38),_0x59f922=>{const _0x130800=_0x3237d7;if(!SceneManager[_0x130800(0x5cb)]())return;if(!Imported[_0x130800(0x8fb)])return;const _0x321b58=SceneManager[_0x130800(0x2a7)][_0x130800(0x314)];if(!_0x321b58)return;VisuMZ[_0x130800(0x3d3)](_0x59f922,_0x59f922);const _0x37dd7f=_0x59f922[_0x130800(0x141)]||0x1,_0x3ba476=_0x59f922[_0x130800(0x1e5)]||0x1,_0x11eff9=_0x59f922[_0x130800(0x758)]||'Linear';_0x321b58[_0x130800(0x2a0)](_0x37dd7f,_0x3ba476,_0x11eff9);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x47d),_0x2a4395=>{const _0x41f2c0=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x41f2c0(0x8fb)])return;const _0x2c2e55=SceneManager['_scene'][_0x41f2c0(0x314)];if(!_0x2c2e55)return;VisuMZ[_0x41f2c0(0x3d3)](_0x2a4395,_0x2a4395);const _0x18388f=Number(_0x2a4395[_0x41f2c0(0x5e4)])||0x0,_0x47d633=Number(_0x2a4395[_0x41f2c0(0x4bd)]),_0x711c86=_0x2a4395[_0x41f2c0(0x1e5)]||0x1,_0x52220b=_0x2a4395[_0x41f2c0(0x758)]||_0x41f2c0(0xc6);_0x2c2e55[_0x41f2c0(0x24a)](_0x18388f,_0x47d633,_0x711c86,_0x52220b);}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x70a),_0x39271d=>{const _0x52004d=_0x3237d7;if(!SceneManager[_0x52004d(0x5cb)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x21b127=SceneManager[_0x52004d(0x2a7)][_0x52004d(0x314)];if(!_0x21b127)return;VisuMZ[_0x52004d(0x3d3)](_0x39271d,_0x39271d);const _0x55b677=Number(_0x39271d[_0x52004d(0x5e4)])||0x0,_0x256e92=Number(_0x39271d[_0x52004d(0x4bd)]),_0x11467b=_0x39271d[_0x52004d(0x1e5)]||0x1,_0x2a6258=_0x39271d[_0x52004d(0x758)]||_0x52004d(0xc6),_0x367bf6=VisuMZ[_0x52004d(0x5e8)](_0x39271d['Targets']);for(const _0x4e9800 of _0x367bf6){if(!_0x4e9800)continue;if(!_0x4e9800[_0x52004d(0x1d5)]())continue;_0x4e9800['battler']()['setupMotionBlurImpactFilter'](_0x55b677,_0x256e92,_0x11467b,_0x2a6258);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Impact_MotionTrailCreate',_0x1e03c1=>{const _0x38aeb8=_0x3237d7;if(!SceneManager[_0x38aeb8(0x5cb)]())return;if(!Imported[_0x38aeb8(0x8fb)])return;VisuMZ[_0x38aeb8(0x3d3)](_0x1e03c1,_0x1e03c1);const _0x1e08ac={'delay':_0x1e03c1[_0x38aeb8(0x445)],'duration':_0x1e03c1[_0x38aeb8(0x862)],'hue':_0x1e03c1['hue'],'opacityStart':_0x1e03c1[_0x38aeb8(0x959)],'tone':_0x1e03c1['tone'],'visible':!![]},_0x3baa38=VisuMZ[_0x38aeb8(0x5e8)](_0x1e03c1[_0x38aeb8(0x30e)]);for(const _0x48250f of _0x3baa38){if(_0x38aeb8(0x24c)!==_0x38aeb8(0x119)){if(!_0x48250f)continue;_0x48250f[_0x38aeb8(0x2f9)](_0x1e08ac);}else{if(_0x570ddb[_0x38aeb8(0x417)]()[_0x38aeb8(0x54a)]>0x0)return!![];if(_0x36d860['battleCameraData']()[_0x38aeb8(0x98f)]>0x0)return!![];this[_0x38aeb8(0x40c)]='';}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x71e),_0xacefd1=>{const _0x43e691=_0x3237d7;if(!SceneManager[_0x43e691(0x5cb)]())return;if(!Imported[_0x43e691(0x8fb)])return;VisuMZ['ConvertParams'](_0xacefd1,_0xacefd1);const _0x3d397a=VisuMZ[_0x43e691(0x5e8)](_0xacefd1['Targets']);for(const _0x4fde10 of _0x3d397a){if(!_0x4fde10)continue;_0x4fde10[_0x43e691(0xa18)]();}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xa7f),_0x3496ea=>{const _0x2d7bb3=_0x3237d7;if(!Imported[_0x2d7bb3(0x8fb)])return;const _0xfd9f2b=SceneManager[_0x2d7bb3(0x2a7)][_0x2d7bb3(0x314)];if(!_0xfd9f2b)return;VisuMZ['ConvertParams'](_0x3496ea,_0x3496ea);const _0x16b3f1=_0x3496ea['X']||0x0,_0x23d23f=_0x3496ea['Y']||0x0,_0x377483=_0x3496ea[_0x2d7bb3(0x52a)]||0x0,_0x47d90e=_0x3496ea[_0x2d7bb3(0x9d)]||0x0,_0x5d5529=_0x3496ea[_0x2d7bb3(0x1e5)]||0x1;_0xfd9f2b[_0x2d7bb3(0x129)](_0x16b3f1,_0x23d23f,_0x377483,_0x47d90e,_0x5d5529);}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x588),_0x33694c=>{const _0x29693b=_0x3237d7;if(!SceneManager[_0x29693b(0x5cb)]())return;if(!Imported[_0x29693b(0x8fb)])return;const _0x56c302=SceneManager[_0x29693b(0x2a7)]['_spriteset'];if(!_0x56c302)return;VisuMZ[_0x29693b(0x3d3)](_0x33694c,_0x33694c);const _0x64b901=VisuMZ[_0x29693b(0x5e8)](_0x33694c[_0x29693b(0x30e)]),_0x5630a0=_0x33694c[_0x29693b(0x5ea)],_0xea8c35=_0x33694c[_0x29693b(0x252)]||0x0,_0x168044=_0x33694c[_0x29693b(0x57b)]||0x0,_0xc5e421=_0x33694c[_0x29693b(0x52a)]||0x0,_0x5316ab=_0x33694c[_0x29693b(0x9d)]||0x0,_0x525787=_0x33694c[_0x29693b(0x1e5)]||0x1;for(const _0x59bea0 of _0x64b901){if(!_0x59bea0)continue;if(!_0x59bea0[_0x29693b(0x1d5)]())continue;const _0x4b2351=_0x59bea0[_0x29693b(0x1d5)]();let _0x4d6dc0=_0x4b2351[_0x29693b(0x642)],_0x1bb75d=_0x4b2351[_0x29693b(0x9ed)];_0x4d6dc0+=(Graphics[_0x29693b(0xa28)]-Graphics[_0x29693b(0x63d)])/0x2,_0x1bb75d+=(Graphics[_0x29693b(0x766)]-Graphics[_0x29693b(0x747)])/0x2;if(_0x5630a0[_0x29693b(0x453)](/front/i))_0x4d6dc0+=(_0x59bea0[_0x29693b(0x8f2)]()?0x1:-0x1)*_0x4b2351[_0x29693b(0x1ee)]()/0x2;else _0x5630a0[_0x29693b(0x453)](/back/i)&&(_0x4d6dc0+=(_0x59bea0['isEnemy']()?-0x1:0x1)*_0x4b2351[_0x29693b(0x1ee)]()/0x2);if(_0x5630a0[_0x29693b(0x453)](/head/i)){if(_0x29693b(0x978)!==_0x29693b(0x978)){_0x5034e8[_0x29693b(0x735)][_0x29693b(0xa8b)][_0x29693b(0x4db)](this);const _0x5b06d6=this['battleLayoutStyle']();_0x5b06d6===_0x29693b(0xa93)&&this[_0x29693b(0x500)]();}else _0x1bb75d-=_0x4b2351[_0x29693b(0x21c)]();}else _0x5630a0[_0x29693b(0x453)](/center/i)&&(_0x1bb75d-=_0x4b2351[_0x29693b(0x21c)]()/0x2);_0x4d6dc0+=_0xea8c35,_0x1bb75d+=_0x168044,_0x56c302[_0x29693b(0x129)](_0x4d6dc0,_0x1bb75d,_0xc5e421,_0x5316ab,_0x525787);}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x201),_0x3ba34b=>{const _0x3a21bb=_0x3237d7;if(!SceneManager[_0x3a21bb(0x5cb)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x27fd74=SceneManager[_0x3a21bb(0x2a7)][_0x3a21bb(0x314)];if(!_0x27fd74)return;VisuMZ[_0x3a21bb(0x3d3)](_0x3ba34b,_0x3ba34b);const _0x35e76c=VisuMZ[_0x3a21bb(0x5e8)](_0x3ba34b[_0x3a21bb(0x30e)]),_0x308157=_0x3ba34b[_0x3a21bb(0x5ea)],_0x853522=_0x3ba34b[_0x3a21bb(0x252)]||0x0,_0x169835=_0x3ba34b[_0x3a21bb(0x57b)]||0x0,_0x129262=_0x3ba34b['Amp']||0x0,_0x4e6a24=_0x3ba34b['Wave']||0x0,_0x239897=_0x3ba34b[_0x3a21bb(0x1e5)]||0x1,_0x11c127=Math[_0x3a21bb(0x9c4)](..._0x35e76c[_0x3a21bb(0x1e0)](_0x4f99cd=>_0x4f99cd['battler']()[_0x3a21bb(0x642)]-_0x4f99cd[_0x3a21bb(0x1d5)]()[_0x3a21bb(0x1ee)]()/0x2)),_0x105d03=Math[_0x3a21bb(0x2e0)](..._0x35e76c[_0x3a21bb(0x1e0)](_0x17c1c4=>_0x17c1c4['battler']()[_0x3a21bb(0x642)]+_0x17c1c4['battler']()[_0x3a21bb(0x1ee)]()/0x2)),_0x5f1a77=Math[_0x3a21bb(0x9c4)](..._0x35e76c[_0x3a21bb(0x1e0)](_0x5bfdfc=>_0x5bfdfc[_0x3a21bb(0x1d5)]()[_0x3a21bb(0x9ed)]-_0x5bfdfc['battler']()[_0x3a21bb(0x21c)]())),_0x147d6b=Math[_0x3a21bb(0x2e0)](..._0x35e76c['map'](_0xf85057=>_0xf85057[_0x3a21bb(0x1d5)]()[_0x3a21bb(0x9ed)])),_0x5b7ea4=_0x35e76c['filter'](_0x34e1d7=>_0x34e1d7[_0x3a21bb(0x5ef)]())['length'],_0x1e64e4=_0x35e76c['filter'](_0x1e36eb=>_0x1e36eb['isEnemy']())[_0x3a21bb(0x60c)];let _0x4eb6c2=0x0,_0x3c96bc=0x0;if(_0x308157[_0x3a21bb(0x453)](/front/i))_0x3a21bb(0x774)!==_0x3a21bb(0x774)?(this[_0x3a21bb(0x2d2)]=this[_0x3a21bb(0x2d2)]||[],this[_0x3a21bb(0x2d2)]['push'](_0x12ccc1)):_0x4eb6c2=_0x5b7ea4>=_0x1e64e4?_0x11c127:_0x105d03;else{if(_0x308157['match'](/middle/i))_0x4eb6c2=(_0x11c127+_0x105d03)/0x2,melee=-0x1;else _0x308157[_0x3a21bb(0x453)](/back/i)&&(_0x4eb6c2=_0x5b7ea4>=_0x1e64e4?_0x105d03:_0x11c127);}if(_0x308157[_0x3a21bb(0x453)](/head/i))_0x3c96bc=_0x5f1a77;else{if(_0x308157[_0x3a21bb(0x453)](/center/i))_0x3c96bc=(_0x5f1a77+_0x147d6b)/0x2;else _0x308157[_0x3a21bb(0x453)](/base/i)&&(_0x3c96bc=_0x147d6b);}_0x4eb6c2+=(Graphics[_0x3a21bb(0xa28)]-Graphics[_0x3a21bb(0x63d)])/0x2,_0x3c96bc+=(Graphics['height']-Graphics[_0x3a21bb(0x747)])/0x2,_0x4eb6c2+=_0x853522,_0x3c96bc+=_0x169835,_0x27fd74[_0x3a21bb(0x129)](_0x4eb6c2,_0x3c96bc,_0x129262,_0x4e6a24,_0x239897);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xaff),_0x46160c=>{const _0x837d68=_0x3237d7;if(!Imported[_0x837d68(0x8fb)])return;const _0x4c2f5d=SceneManager['_scene'][_0x837d68(0x314)];if(!_0x4c2f5d)return;VisuMZ[_0x837d68(0x3d3)](_0x46160c,_0x46160c);const _0x20da57=_0x46160c['X']||0x0,_0x4fe332=_0x46160c['Y']||0x0,_0x3f9c70=_0x46160c[_0x837d68(0x2f0)]||0x0,_0xfa3d08=_0x46160c[_0x837d68(0x638)]||0x0,_0x24dea7=_0x46160c[_0x837d68(0x1e5)]||0x1,_0x24dc96=_0x46160c[_0x837d68(0x758)]||_0x837d68(0xc6);_0x4c2f5d[_0x837d68(0x483)](_0x3f9c70,_0x20da57,_0x4fe332,_0xfa3d08,_0x24dea7,_0x24dc96);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x2c3d9f=>{const _0x5f6e9b=_0x3237d7;if(!Imported[_0x5f6e9b(0x8fb)])return;const _0x27ed5c=SceneManager[_0x5f6e9b(0x2a7)]['_spriteset'];if(!_0x27ed5c)return;VisuMZ[_0x5f6e9b(0x3d3)](_0x2c3d9f,_0x2c3d9f);const _0x4e4db3=VisuMZ[_0x5f6e9b(0x5e8)](_0x2c3d9f[_0x5f6e9b(0x30e)]),_0x5787ed=_0x2c3d9f[_0x5f6e9b(0x5ea)],_0x7c0138=_0x2c3d9f[_0x5f6e9b(0x252)]||0x0,_0x41fdc3=_0x2c3d9f['OffsetY']||0x0,_0x4d9c08=_0x2c3d9f['Strength']||0x0,_0x2d9048=_0x2c3d9f['Radius']||0x0,_0x33f8e2=_0x2c3d9f[_0x5f6e9b(0x1e5)]||0x1,_0x3c47a9=_0x2c3d9f[_0x5f6e9b(0x758)]||_0x5f6e9b(0xc6),_0x4f9218=Math[_0x5f6e9b(0x9c4)](..._0x4e4db3[_0x5f6e9b(0x1e0)](_0x53db13=>_0x53db13['battler']()['_baseX']-_0x53db13[_0x5f6e9b(0x1d5)]()['mainSpriteWidth']()/0x2)),_0x425fa2=Math['max'](..._0x4e4db3[_0x5f6e9b(0x1e0)](_0x129430=>_0x129430[_0x5f6e9b(0x1d5)]()[_0x5f6e9b(0x642)]+_0x129430[_0x5f6e9b(0x1d5)]()[_0x5f6e9b(0x1ee)]()/0x2)),_0x597a6e=Math[_0x5f6e9b(0x9c4)](..._0x4e4db3[_0x5f6e9b(0x1e0)](_0x2ad2c9=>_0x2ad2c9[_0x5f6e9b(0x1d5)]()[_0x5f6e9b(0x9ed)]-_0x2ad2c9[_0x5f6e9b(0x1d5)]()[_0x5f6e9b(0x21c)]())),_0x2b2d1f=Math[_0x5f6e9b(0x2e0)](..._0x4e4db3[_0x5f6e9b(0x1e0)](_0x4fc2fc=>_0x4fc2fc['battler']()[_0x5f6e9b(0x9ed)])),_0x11302a=_0x4e4db3[_0x5f6e9b(0x921)](_0x32aec4=>_0x32aec4[_0x5f6e9b(0x5ef)]())[_0x5f6e9b(0x60c)],_0x278b1f=_0x4e4db3['filter'](_0x318355=>_0x318355[_0x5f6e9b(0x8f2)]())[_0x5f6e9b(0x60c)];let _0x1037eb=0x0,_0x52b00b=0x0;if(_0x5787ed[_0x5f6e9b(0x453)](/front/i)){if(_0x5f6e9b(0x57e)!==_0x5f6e9b(0x1ca))_0x1037eb=_0x11302a>=_0x278b1f?_0x4f9218:_0x425fa2;else{if(this[_0x5f6e9b(0x409)]<=0x0)return;const _0x83f68c=this[_0x5f6e9b(0x409)],_0xdd3238=this[_0x5f6e9b(0x10e)],_0x3036e2=this[_0x5f6e9b(0xb10)];_0xd490f8['VisuMZ_0_CoreEngine']?this['_currentAngle']=this['applyEasing'](this[_0x5f6e9b(0x28f)],this['_targetAngle'],_0x83f68c,_0xdd3238,_0x3036e2):this[_0x5f6e9b(0x28f)]=(this[_0x5f6e9b(0x28f)]*(_0x83f68c-0x1)+this[_0x5f6e9b(0x4ee)])/_0x83f68c;this['_angleDuration']--;if(this[_0x5f6e9b(0x409)]<=0x0)this[_0x5f6e9b(0x892)]();}}else{if(_0x5787ed[_0x5f6e9b(0x453)](/middle/i))_0x1037eb=(_0x4f9218+_0x425fa2)/0x2,melee=-0x1;else _0x5787ed[_0x5f6e9b(0x453)](/back/i)&&(_0x1037eb=_0x11302a>=_0x278b1f?_0x425fa2:_0x4f9218);}if(_0x5787ed['match'](/head/i))_0x52b00b=_0x597a6e;else{if(_0x5787ed[_0x5f6e9b(0x453)](/center/i))_0x52b00b=(_0x597a6e+_0x2b2d1f)/0x2;else _0x5787ed[_0x5f6e9b(0x453)](/base/i)&&(_0x52b00b=_0x2b2d1f);}_0x1037eb+=(Graphics[_0x5f6e9b(0xa28)]-Graphics['boxWidth'])/0x2,_0x52b00b+=(Graphics[_0x5f6e9b(0x766)]-Graphics[_0x5f6e9b(0x747)])/0x2,_0x1037eb+=_0x7c0138,_0x52b00b+=_0x41fdc3,_0x27ed5c['setupZoomBlurImpactFilter'](_0x4d9c08,_0x1037eb,_0x52b00b,_0x2d9048,_0x33f8e2,_0x3c47a9);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xa9d),_0x141699=>{const _0x3a2c8d=_0x3237d7;if(!SceneManager[_0x3a2c8d(0x5cb)]())return;VisuMZ[_0x3a2c8d(0x3d3)](_0x141699,_0x141699);const _0x51e56f=$gameTemp[_0x3a2c8d(0x968)](),_0xe2745f=BattleManager[_0x3a2c8d(0x343)],_0xed5e26=BattleManager['_subject'],_0x32e1dc=BattleManager[_0x3a2c8d(0x1cd)];if(!_0x51e56f||!_0xe2745f||!_0xed5e26)return;if(!_0xe2745f[_0x3a2c8d(0x7be)]())return;const _0x2b8d16=VisuMZ[_0x3a2c8d(0x5e8)](_0x141699['Targets']);for(const _0x472176 of _0x2b8d16){if(!_0x472176)continue;_0x32e1dc[_0x3a2c8d(0x857)](_0x3a2c8d(0x884),_0xed5e26,_0x472176);}_0x51e56f[_0x3a2c8d(0x20e)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],_0x3237d7(0x1af),_0x34f490=>{const _0x17e006=_0x3237d7;if(!SceneManager[_0x17e006(0x5cb)]())return;VisuMZ[_0x17e006(0x3d3)](_0x34f490,_0x34f490);const _0x299607=['MAXHP','MAXMP',_0x17e006(0xaae),_0x17e006(0x167),_0x17e006(0x3e7),_0x17e006(0x31c),_0x17e006(0x7c5),'LUK'],_0x252426=_0x34f490[_0x17e006(0x419)],_0x572522=_0x34f490[_0x17e006(0x2df)],_0x24d368=_0x34f490['Turns'],_0x2f6ab0=VisuMZ[_0x17e006(0x5e8)](_0x34f490[_0x17e006(0x30e)]);for(const _0x1ca6c4 of _0x2f6ab0){if(!_0x1ca6c4)continue;for(const _0x57cc6f of _0x252426){const _0xf3c67c=_0x299607[_0x17e006(0x4fa)](_0x57cc6f[_0x17e006(0x566)]()[_0x17e006(0x194)]());if(_0xf3c67c>=0x0&&_0xf3c67c<=0x7){if(_0x17e006(0x584)!==_0x17e006(0x6eb))_0x1ca6c4[_0x17e006(0x2c4)](_0xf3c67c,_0x24d368);else{if(_0x10b8c7[_0x17e006(0x790)]())_0x5dd5b2['log'](_0x1e964e);return _0x2f0303[_0x17e006(0xa4)][_0x17e006(0xa9a)][_0x17e006(0x4db)](this);}}}for(const _0x4b84aa of _0x572522){const _0x445c02=_0x299607[_0x17e006(0x4fa)](_0x4b84aa[_0x17e006(0x566)]()['trim']());_0x445c02>=0x0&&_0x445c02<=0x7&&_0x1ca6c4[_0x17e006(0x520)](_0x445c02,_0x24d368);}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x65d),_0x15c22e=>{const _0x1de3b9=_0x3237d7;if(!SceneManager[_0x1de3b9(0x5cb)]())return;VisuMZ[_0x1de3b9(0x3d3)](_0x15c22e,_0x15c22e);const _0x58fadb=_0x15c22e[_0x1de3b9(0x60d)],_0x58708a=VisuMZ[_0x1de3b9(0x5e8)](_0x15c22e[_0x1de3b9(0x30e)]);for(const _0x2b3ec2 of _0x58708a){if(!_0x2b3ec2)continue;for(const _0x58a5b of _0x58fadb){_0x2b3ec2[_0x1de3b9(0x73d)](_0x58a5b);}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x555),_0x27ed15=>{const _0x3a5333=_0x3237d7;if(!SceneManager[_0x3a5333(0x5cb)]())return;VisuMZ[_0x3a5333(0x3d3)](_0x27ed15,_0x27ed15);const _0x5101b5=BattleManager[_0x3a5333(0x343)],_0x1bf295={'arPenRate':_0x27ed15[_0x3a5333(0x52e)],'arPenFlat':_0x27ed15['ArPenFlat'],'arRedRate':_0x27ed15['ArRedRate'],'arRedFlat':_0x27ed15[_0x3a5333(0x29b)]};_0x5101b5[_0x3a5333(0x90a)]=_0x1bf295;}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Mechanics_AnalyzeWeakness',_0x3e8db9=>{const _0x311675=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x311675(0xa9b)])return;VisuMZ[_0x311675(0x3d3)](_0x3e8db9,_0x3e8db9);const _0x48178b=VisuMZ[_0x311675(0x5e8)](_0x3e8db9[_0x311675(0x30e)]),_0x5a9167=_0x3e8db9[_0x311675(0x242)]||0x1;for(const _0x104f0c of _0x48178b){if(!_0x104f0c)continue;if(!_0x104f0c['isEnemy']())continue;_0x104f0c[_0x311675(0xadb)](_0x5a9167);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xaa3),_0x129f14=>{const _0x34826d=_0x3237d7;if(!SceneManager[_0x34826d(0x5cb)]())return;if(!Imported[_0x34826d(0x2c3)])return;if(!BattleManager[_0x34826d(0x614)]())return;VisuMZ[_0x34826d(0x3d3)](_0x129f14,_0x129f14);const _0xe90f6e=VisuMZ['CreateActionSequenceTargets'](_0x129f14[_0x34826d(0x30e)]),_0x4932d8=_0x129f14[_0x34826d(0x45f)],_0x20ef34=_0x129f14['ChargeRate'],_0x395a78=_0x129f14[_0x34826d(0x7dc)];for(const _0x3ce0fc of _0xe90f6e){if(!_0x3ce0fc)continue;if(_0x3ce0fc[_0x34826d(0x830)]())_0x3ce0fc['changeAtbChargeTime'](_0x4932d8);else{if(_0x3ce0fc[_0x34826d(0x904)]()){if('pNFNS'===_0x34826d(0x142)){const _0x36ff81=_0x3c2faf(_0x1982cb['$1'])[_0x34826d(0x194)](),_0x1f71b7=_0x3bfb60(_0x1b6ca7['$2']);_0x23b518[_0x36ff81]=_0x1f71b7,_0x4e934c+=_0x1f71b7;}else{_0x3ce0fc[_0x34826d(0x77e)](_0x20ef34);if(_0x395a78)_0x3ce0fc[_0x34826d(0x89c)]();}}}}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x3cf),_0x4be25e=>{const _0x371c4f=_0x3237d7;if(!SceneManager[_0x371c4f(0x5cb)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ['ConvertParams'](_0x4be25e,_0x4be25e);const _0x5e3ac4=VisuMZ[_0x371c4f(0x5e8)](_0x4be25e['Targets']),_0x1da1e8=_0x4be25e['BoostPoints'];for(const _0xf88af3 of _0x5e3ac4){if(_0x371c4f(0x7ab)===_0x371c4f(0x7ab)){if(!_0xf88af3)continue;_0xf88af3[_0x371c4f(0x851)](_0x1da1e8);}else{if(!_0x490548[_0x371c4f(0x6c8)]()){const _0x2b9762=_0xbfebf9[_0x371c4f(0x982)](_0x17d665['x'],_0xab85ff['y']);if(this[_0x371c4f(0x8b7)]&&this[_0x371c4f(0x8b7)][_0x2b9762])return this[_0x371c4f(0x8b7)][_0x2b9762];}return _0x37080d[_0x371c4f(0xa4)][_0x371c4f(0x37c)][_0x371c4f(0x4db)](this);}}}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x67e),_0x2cafe7=>{const _0x49dc15=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x49dc15(0x173)])return;if(!BattleManager[_0x49dc15(0xb5c)])return;VisuMZ['ConvertParams'](_0x2cafe7,_0x2cafe7);const _0x48a809=_0x2cafe7[_0x49dc15(0x5ae)];$gameVariables['setValue'](_0x48a809,BattleManager[_0x49dc15(0xb5c)][_0x49dc15(0x62b)]());}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0xb0f),_0x40254b=>{const _0x51c6de=_0x3237d7;if(!SceneManager[_0x51c6de(0x5cb)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x51c6de(0x3d3)](_0x40254b,_0x40254b);const _0x4cac49=VisuMZ[_0x51c6de(0x5e8)](_0x40254b['Targets']),_0x18a4ff=_0x40254b[_0x51c6de(0x6cf)];for(const _0x1f3226 of _0x4cac49){if(_0x51c6de(0x696)!==_0x51c6de(0x696)){if(_0x1c75db[_0x51c6de(0x218)]())this['preparePartyRefresh'](),this[_0x51c6de(0x4bb)]=![],_0xc1da9f[_0x51c6de(0x997)]();else this['_requestRefresh']&&(this[_0x51c6de(0x4bb)]=![],this[_0x51c6de(0xaa6)](),this[_0x51c6de(0x53b)]());}else{if(!_0x1f3226)continue;if(_0x1f3226[_0x51c6de(0x128)]())continue;if(!_0x1f3226[_0x51c6de(0x82e)]())continue;_0x1f3226[_0x51c6de(0x177)](_0x18a4ff);}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Mechanics_BreakShieldReset',_0x3a8f0c=>{const _0x5f3c5f=_0x3237d7;if(!SceneManager[_0x5f3c5f(0x5cb)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x5f3c5f(0x3d3)](_0x3a8f0c,_0x3a8f0c);const _0x165854=VisuMZ['CreateActionSequenceTargets'](_0x3a8f0c[_0x5f3c5f(0x30e)]);for(const _0x5c0aaf of _0x165854){if(_0x5f3c5f(0x761)!=='PpgpT')_0x4273f7?this[_0x5f3c5f(0x56c)](_0x35a8fc[_0x5f3c5f(0x5fc)],0x0):this['terminate']();else{if(!_0x5c0aaf)continue;if(_0x5c0aaf[_0x5f3c5f(0x128)]())continue;if(!_0x5c0aaf[_0x5f3c5f(0x82e)]())continue;_0x5c0aaf[_0x5f3c5f(0x15f)]();}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x8d3),_0x19ed30=>{const _0x12748e=_0x3237d7;if(!SceneManager[_0x12748e(0x5cb)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x12748e(0x5a9)]())return;VisuMZ['ConvertParams'](_0x19ed30,_0x19ed30);const _0x116f50=VisuMZ[_0x12748e(0x5e8)](_0x19ed30[_0x12748e(0x30e)]),_0xf1fbfa=_0x19ed30[_0x12748e(0x435)];for(const _0x24157e of _0x116f50){if(_0x12748e(0x21b)!==_0x12748e(0x21b)){if(!_0x345a73)return;_0xd51648[_0x12748e(0x9c3)]?_0x13c470[_0x12748e(0x735)][_0x12748e(0x1ff)][_0x12748e(0x4db)](this,_0xf2f6b0,_0x396771,_0x4ffbfc,_0x10649c,_0x43454c):_0x1b51b0[_0x12748e(0x735)][_0x12748e(0x1ff)][_0x12748e(0x4db)](this,_0x272c9f,_0x49a412,_0x4e8b97,_0x752400);}else{if(!_0x24157e)continue;_0x24157e[_0x12748e(0x460)](_0xf1fbfa);}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x946),_0x5730cc=>{const _0x1c46c5=_0x3237d7;if(!SceneManager[_0x1c46c5(0x5cb)]())return;VisuMZ[_0x1c46c5(0x3d3)](_0x5730cc,_0x5730cc);const _0x47673e=$gameTemp[_0x1c46c5(0x968)](),_0x22ee1c=BattleManager[_0x1c46c5(0x343)],_0x277bd0=BattleManager['_subject'];if(!_0x47673e||!_0x22ee1c||!_0x277bd0)return;if(!_0x22ee1c[_0x1c46c5(0x7be)]())return;const _0x4415c1=VisuMZ[_0x1c46c5(0x5e8)](_0x5730cc[_0x1c46c5(0x30e)]);for(const _0x3026fc of _0x4415c1){if('qlYvR'===_0x1c46c5(0x5e9)){if(_0xac7910['_spriteset'][_0x1c46c5(0xafb)]())return!![];this['_waitMode']='';}else{if(!_0x3026fc)continue;_0x5730cc[_0x1c46c5(0x515)]&&(_0x3026fc[_0x1c46c5(0x64e)](),_0x3026fc[_0x1c46c5(0x73d)](_0x3026fc['deathStateId']())),_0x3026fc[_0x1c46c5(0x741)]()&&_0x3026fc['performCollapse']();}}_0x47673e[_0x1c46c5(0x20e)](_0x1c46c5(0x345));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x37d),_0x3761c2=>{const _0x1c0000=_0x3237d7;if(!SceneManager[_0x1c0000(0x5cb)]())return;if(!Imported[_0x1c0000(0x74c)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x1c0000(0x3d3)](_0x3761c2,_0x3761c2);const _0x141faa=VisuMZ[_0x1c0000(0x5e8)](_0x3761c2['Targets']),_0x1de65e=_0x3761c2[_0x1c0000(0xa0c)];for(const _0x436541 of _0x141faa){if(_0x1c0000(0x12e)!==_0x1c0000(0x12e)){const _0x56ee2e=_0x3a70e7[_0x1c0000(0xa5a)]();_0x56ee2e<=0x0?_0x1b62ca[_0x1c0000(0x63c)]():this[_0x1c0000(0x373)](_0x243036,_0x56ee2e);}else{if(!_0x436541)continue;_0x436541['changeTurnOrderByCTB'](_0x1de65e);}}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Mechanics_CtbSpeed',_0x337887=>{const _0x15107f=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x15107f(0x74c)])return;if(!BattleManager[_0x15107f(0x563)]())return;VisuMZ[_0x15107f(0x3d3)](_0x337887,_0x337887);const _0x4bd070=VisuMZ[_0x15107f(0x5e8)](_0x337887[_0x15107f(0x30e)]),_0x2c551c=_0x337887[_0x15107f(0x45f)],_0x186d95=_0x337887[_0x15107f(0x45f)];for(const _0x427cc0 of _0x4bd070){if('iaYEX'==='iaYEX'){if(!_0x427cc0)continue;if(_0x427cc0[_0x15107f(0x66a)]===_0x15107f(0x706))_0x427cc0[_0x15107f(0x547)](_0x2c551c);else{if(_0x427cc0[_0x15107f(0x66a)]==='casting'){if(_0x15107f(0x2ad)!=='nKMOq'){const _0x52e8a9=this[_0x15107f(0x5ef)]()?this[_0x15107f(0x5f9)]():this[_0x15107f(0x9df)]();if(_0x52e8a9){const _0x59021e=_0x52e8a9[_0x15107f(0x4fe)];if(_0x59021e[_0x15107f(0x453)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x3ea437(_0x1b7611['$1'])*0.01;else{if(_0x59021e[_0x15107f(0x453)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x3f06cf(_0x5e6c29['$1'])||0x0;}}return 0x1;}else _0x427cc0[_0x15107f(0x2f3)](_0x186d95);}}}else{if(_0x3dd564[_0x15107f(0x77b)]())return _0x15107f(0xa64);return _0x15107f(0x585);}}}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x916),_0x4bed1e=>{const _0x488509=_0x3237d7;if(!SceneManager[_0x488509(0x5cb)]())return;VisuMZ[_0x488509(0x3d3)](_0x4bed1e,_0x4bed1e);const _0xd0e2a0=BattleManager[_0x488509(0x343)];if(!_0xd0e2a0)return;let _0x34a54d=_0x4bed1e[_0x488509(0x665)];_0xd0e2a0[_0x488509(0x8d9)](_0x34a54d);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x95f),_0x6c1a49=>{const _0x54be43=_0x3237d7;if(!SceneManager[_0x54be43(0x5cb)]())return;VisuMZ[_0x54be43(0x3d3)](_0x6c1a49,_0x6c1a49);const _0x2155e7=VisuMZ[_0x54be43(0x5e8)](_0x6c1a49[_0x54be43(0x30e)]);for(const _0x36bffc of _0x2155e7){if(_0x54be43(0x605)===_0x54be43(0x504)){if(!_0x46e0b5)return;if(!this[_0x54be43(0x23d)](_0x365ed0))return;const _0x5916b2=this[_0x54be43(0x2cd)](),_0x31f5f9=_0x1e445c[_0x54be43(0x975)](_0x3b8623),_0x5226b4=_0xbec747['battleCommandIcon'](_0x325b71),_0x43fe81=_0x5916b2==='text'?_0x31f5f9:_0x54be43(0x861)[_0x54be43(0x117)](_0x5226b4,_0x31f5f9),_0x327e0b=this[_0x54be43(0x1e4)][_0x54be43(0x779)](_0x263c7a);this[_0x54be43(0x557)](_0x43fe81,_0x54be43(0x7e7),_0x327e0b,_0x192117['id']);}else{if(!_0x36bffc)continue;if(_0x36bffc['shouldPopupDamage']())_0x36bffc[_0x54be43(0x954)]();}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x375),_0x216994=>{const _0x98bfb=_0x3237d7;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x98bfb(0x3d3)](_0x216994,_0x216994);const _0x248517=$gameTemp[_0x98bfb(0x968)](),_0xd652b5=BattleManager[_0x98bfb(0xb5c)],_0x508d04=_0x216994[_0x98bfb(0x19a)];if(!_0x248517)return;if(!_0xd652b5)return;_0xd652b5&&_0xd652b5[_0x98bfb(0x4a3)]()&&_0x508d04[_0x98bfb(0x566)]()['trim']()!==_0x98bfb(0xbc)&&_0x248517[_0x98bfb(0xa97)]([_0x508d04]);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xa1b),_0x5e9ea4=>{const _0x39bf8d=_0x3237d7;if(!SceneManager[_0x39bf8d(0x5cb)]())return;VisuMZ[_0x39bf8d(0x3d3)](_0x5e9ea4,_0x5e9ea4);const _0x1689c7=VisuMZ[_0x39bf8d(0x5e8)](_0x5e9ea4[_0x39bf8d(0x30e)]);for(const _0x2c7c2a of _0x1689c7){if(!_0x2c7c2a)continue;if(!_0x2c7c2a[_0x39bf8d(0x8f2)]())continue;_0x2c7c2a['escape']();}}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x5d3),_0x58a379=>{const _0x242145=_0x3237d7;if(!SceneManager[_0x242145(0x5cb)]())return;if(!Imported[_0x242145(0x3fd)])return;if(!BattleManager[_0x242145(0x9ab)]())return;VisuMZ[_0x242145(0x3d3)](_0x58a379,_0x58a379);const _0x49c18f=_0x58a379[_0x242145(0x5fe)];if(BattleManager[_0x242145(0xb5c)]){if(_0x242145(0x362)!=='iMAHa')BattleManager[_0x242145(0xb5c)][_0x242145(0x889)]()[_0x242145(0x47b)](_0x49c18f);else{if(!this[_0x242145(0x820)])return![];if(this[_0x242145(0x9fd)]>0x0)return!![];return _0x5b2bfc[_0x242145(0xa4)][_0x242145(0x23f)][_0x242145(0x4db)](this);}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Mechanics_FtbAction',_0x56c93d=>{const _0x44fde5=_0x3237d7;if(!SceneManager[_0x44fde5(0x5cb)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager[_0x44fde5(0x653)]())return;VisuMZ['ConvertParams'](_0x56c93d,_0x56c93d);const _0x17b792=_0x56c93d[_0x44fde5(0x5fe)];BattleManager[_0x44fde5(0xb5c)]&&('FyWlr'!=='FyWlr'?(_0x3abbba[_0x44fde5(0xa4)]['Sprite_Enemy_setBattler'][_0x44fde5(0x4db)](this,_0x46efa0),this[_0x44fde5(0x236)](_0x2dfdb8)):BattleManager[_0x44fde5(0xb5c)][_0x44fde5(0x889)]()[_0x44fde5(0x9b0)](_0x17b792));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x5c6),_0x36cde9=>{const _0x26b1a3=_0x3237d7;if(!SceneManager[_0x26b1a3(0x5cb)]())return;VisuMZ['ConvertParams'](_0x36cde9,_0x36cde9);const _0x1b6ed8=VisuMZ['CreateActionSequenceTargets'](_0x36cde9[_0x26b1a3(0x30e)]),_0x55ba18=_0x36cde9[_0x26b1a3(0x587)],_0xd0ce08=_0x36cde9[_0x26b1a3(0x673)],_0x379cc9=_0x36cde9[_0x26b1a3(0x6ba)],_0x58ded8=_0x36cde9[_0x26b1a3(0x11b)],_0xdf1c09=_0x36cde9[_0x26b1a3(0x552)],_0x138c10=_0x36cde9['TP_Flat'],_0x33343e=_0x36cde9['ShowPopup'];for(const _0x35a54c of _0x1b6ed8){if(_0x26b1a3(0x43e)===_0x26b1a3(0x43e)){if(!_0x35a54c)continue;const _0x194777=_0x35a54c['isAlive'](),_0x3f7bb3=Math[_0x26b1a3(0x222)](_0x55ba18*_0x35a54c['mhp']+_0xd0ce08),_0x3dcaa3=Math[_0x26b1a3(0x222)](_0x379cc9*_0x35a54c[_0x26b1a3(0xf9)]+_0x58ded8),_0x57f53a=Math[_0x26b1a3(0x222)](_0xdf1c09*_0x35a54c[_0x26b1a3(0x6c9)]()+_0x138c10);if(_0x3f7bb3!==0x0)_0x35a54c[_0x26b1a3(0x852)](_0x3f7bb3);if(_0x3dcaa3!==0x0)_0x35a54c[_0x26b1a3(0x46c)](_0x3dcaa3);if(_0x57f53a!==0x0)_0x35a54c[_0x26b1a3(0x9e5)](_0x57f53a);if(_0x33343e)_0x35a54c[_0x26b1a3(0x954)]();_0x194777&&_0x35a54c[_0x26b1a3(0x4a3)]()&&_0x35a54c[_0x26b1a3(0x5d7)]();}else{if(!this[_0x26b1a3(0x3cd)])return;this[_0x26b1a3(0x820)]!==this[_0x26b1a3(0x3cd)]['_battler']&&this[_0x26b1a3(0x56c)](this[_0x26b1a3(0x3cd)][_0x26b1a3(0x820)]);}}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x81d),_0x3ab511=>{const _0x568096=_0x3237d7;if(!SceneManager[_0x568096(0x5cb)]())return;VisuMZ[_0x568096(0x3d3)](_0x3ab511,_0x3ab511);const _0x47b057=VisuMZ['CreateActionSequenceTargets'](_0x3ab511[_0x568096(0x30e)]);for(const _0x14b524 of _0x47b057){if(_0x568096(0x8cb)===_0x568096(0x8cb)){if(!_0x14b524)continue;_0x14b524[_0x568096(0x47c)](_0x3ab511['Immortal']);}else _0x5b0343[_0x568096(0xa4)][_0x568096(0x62d)][_0x568096(0x4db)](this),this[_0x568096(0x457)]()===_0x568096(0xa93)&&this[_0x568096(0xf3)]();}}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x5c4),_0x2a919c=>{const _0x131b15=_0x3237d7;if(!SceneManager[_0x131b15(0x5cb)]())return;VisuMZ[_0x131b15(0x3d3)](_0x2a919c,_0x2a919c);const _0x42f8e0=BattleManager[_0x131b15(0x343)],_0xc0b735={'criticalHitRate':_0x2a919c[_0x131b15(0x65b)],'criticalHitFlat':_0x2a919c[_0x131b15(0x767)],'criticalDmgRate':_0x2a919c[_0x131b15(0x4b8)],'criticalDmgFlat':_0x2a919c[_0x131b15(0x606)],'damageRate':_0x2a919c[_0x131b15(0x441)],'damageFlat':_0x2a919c[_0x131b15(0xf1)],'hitRate':_0x2a919c[_0x131b15(0x6cd)],'hitFlat':_0x2a919c['HitFlat']};_0x42f8e0[_0x131b15(0x6b8)]=_0xc0b735;}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Mechanics_OnceParallel',_0x43effc=>{const _0x1de235=_0x3237d7;if(!SceneManager[_0x1de235(0x5cb)]())return;VisuMZ[_0x1de235(0x3d3)](_0x43effc,_0x43effc);const _0x259fd1=_0x43effc[_0x1de235(0xa37)];SceneManager[_0x1de235(0x2a7)][_0x1de235(0x498)](_0x259fd1);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x74d),_0x1dc34b=>{const _0x113f6f=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x113f6f(0xa95)]())return;VisuMZ[_0x113f6f(0x3d3)](_0x1dc34b,_0x1dc34b);const _0x198d3b=VisuMZ[_0x113f6f(0x5e8)](_0x1dc34b['Targets']);for(const _0x36280d of _0x198d3b){if(!_0x36280d)continue;let _0x1b5f42=_0x1dc34b[_0x113f6f(0x6af)],_0x23c33c=_0x1dc34b[_0x113f6f(0x76c)],_0x8c8f4f=_0x1dc34b[_0x113f6f(0x890)];BattleManager[_0x113f6f(0x15c)]['includes'](_0x36280d)?_0x113f6f(0x540)!==_0x113f6f(0x540)?(this[_0x113f6f(0x2fa)]=new _0x251fd7(),_0x5c77a2['ANTI_TINT_UI']?this['addChild'](this['_animationContainer']):this['_battleField'][_0x113f6f(0x70d)](this['_animationContainer'])):_0x1b5f42+=_0x8c8f4f:_0x23c33c+=_0x8c8f4f,BattleManager[_0x113f6f(0x3c8)](_0x36280d,-_0x1b5f42,![]),BattleManager[_0x113f6f(0x3c8)](_0x36280d,-_0x23c33c,!![]);}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x5fa),_0x2889b5=>{const _0x4fae96=_0x3237d7;if(!SceneManager[_0x4fae96(0x5cb)]())return;if(!Imported[_0x4fae96(0x5c9)])return;if(!BattleManager[_0x4fae96(0x8b3)]())return;VisuMZ[_0x4fae96(0x3d3)](_0x2889b5,_0x2889b5);const _0x368e21=BattleManager[_0x4fae96(0xb5c)][_0x4fae96(0x889)](),_0x286701=_0x2889b5['Override'],_0x26015a=_0x2889b5[_0x4fae96(0x68d)]||_0x4fae96(0x36f),_0x133dfc=_0x2889b5[_0x4fae96(0xabd)]||'unchanged',_0x295315=_0x2889b5['alterCost']||0x0,_0x456da2=_0x2889b5['alterPriority']||0x0;(_0x368e21[_0x4fae96(0x267)]()||_0x286701)&&(_0x286701&&(_0x368e21[_0x4fae96(0x36d)]=_0x368e21[_0x4fae96(0x36d)]||{},_0x368e21[_0x4fae96(0x36d)]['priority']=0x0),_0x368e21[_0x4fae96(0x5dc)](_0x26015a,_0x133dfc,_0x295315,_0x456da2));}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x2a9),_0x32a887=>{const _0x5ba190=_0x3237d7;if(!SceneManager[_0x5ba190(0x5cb)]())return;if(!Imported[_0x5ba190(0x5c9)])return;if(!BattleManager[_0x5ba190(0x8b3)]())return;VisuMZ[_0x5ba190(0x3d3)](_0x32a887,_0x32a887);const _0x1b4f52=BattleManager['_subject']['friendsUnit']();let _0x34032c=Math[_0x5ba190(0x2e0)](_0x32a887['ConvertCount'],0x0),_0x4cc7e9=_0x1b4f52[_0x5ba190(0x452)](),_0x4b3924=_0x1b4f52['getHalfActionsPTB']();while(_0x34032c--){if(_0x4cc7e9<=0x0&&_0x4b3924<=0x0){if('EyKHi'!=='tJfYg')break;else return!![];}else{if(_0x4cc7e9>0x0)_0x4cc7e9--,_0x4b3924++;else{if(_0x5ba190(0xa0e)===_0x5ba190(0x1ce))return this[_0x5ba190(0xb64)]=this[_0x5ba190(0xb64)]||_0x52c193[_0x5ba190(0x735)][_0x5ba190(0x46e)]()||0x24,this['_lineHeight']*0x4;else _0x4b3924--;}}}_0x1b4f52[_0x5ba190(0x11f)](_0x4cc7e9),_0x1b4f52[_0x5ba190(0x633)](_0x4b3924);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x29f),_0x130c2d=>{const _0x49a45a=_0x3237d7;if(!SceneManager[_0x49a45a(0x5cb)]())return;if(!Imported[_0x49a45a(0x5c9)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x49a45a(0x3d3)](_0x130c2d,_0x130c2d);const _0x54ff87=BattleManager[_0x49a45a(0xb5c)][_0x49a45a(0x889)]();let _0x593327=_0x130c2d[_0x49a45a(0x4f5)],_0x2c57f2=_0x130c2d['HalfActions'];_0x54ff87['gainFullActionsPTB'](_0x593327),_0x54ff87[_0x49a45a(0x1e7)](_0x2c57f2);}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],'ActSeq_Mechanics_RemoveBuffDebuff',_0xd7452e=>{const _0x1f02ad=_0x3237d7;if(!SceneManager[_0x1f02ad(0x5cb)]())return;VisuMZ[_0x1f02ad(0x3d3)](_0xd7452e,_0xd7452e);const _0x3d5da1=[_0x1f02ad(0x5c5),_0x1f02ad(0x3d8),_0x1f02ad(0xaae),_0x1f02ad(0x167),_0x1f02ad(0x3e7),_0x1f02ad(0x31c),_0x1f02ad(0x7c5),_0x1f02ad(0x899)],_0x59a507=_0xd7452e[_0x1f02ad(0x419)],_0x5227c6=_0xd7452e['Debuffs'],_0x5281f9=VisuMZ[_0x1f02ad(0x5e8)](_0xd7452e[_0x1f02ad(0x30e)]);for(const _0x21300b of _0x5281f9){if('pOnot'!=='fHMbg'){if(!_0x21300b)continue;for(const _0x4a1d8c of _0x59a507){const _0x4fc621=_0x3d5da1[_0x1f02ad(0x4fa)](_0x4a1d8c[_0x1f02ad(0x566)]()[_0x1f02ad(0x194)]());if(_0x4fc621>=0x0&&_0x4fc621<=0x7&&_0x21300b[_0x1f02ad(0x837)](_0x4fc621)){if(_0x1f02ad(0x115)!==_0x1f02ad(0x78d))_0x21300b['removeBuff'](_0x4fc621);else{if(this[_0x1f02ad(0x371)]>0x0){const _0x418584=this[_0x1f02ad(0x371)],_0x28d11d=this['_borderPortraitSprite'];_0x28d11d['x']=(_0x28d11d['x']*(_0x418584-0x1)+this['_borderPortraitTargetX'])/_0x418584,_0x28d11d[_0x1f02ad(0x61e)]=(_0x28d11d[_0x1f02ad(0x61e)]*(_0x418584-0x1)+0xff)/_0x418584,this['_borderPortraitDuration']--;}}}}for(const _0x3cd93e of _0x5227c6){if('EhsTm'!==_0x1f02ad(0xb57))return _0x1bce4f[_0x1f02ad(0xa4)][_0x1f02ad(0x1c5)][_0x1f02ad(0x4db)](this,_0x24d644),_0x57c776[_0x1f02ad(0x814)](_0x41b134=>{this['_branch'][this['_indent']]=_0x41b134;}),!![];else{const _0x4eecd6=_0x3d5da1[_0x1f02ad(0x4fa)](_0x3cd93e[_0x1f02ad(0x566)]()[_0x1f02ad(0x194)]());if(_0x4eecd6>=0x0&&_0x4eecd6<=0x7&&_0x21300b[_0x1f02ad(0x602)](_0x4eecd6)){if(_0x1f02ad(0x950)!=='UHIsr')_0x21300b[_0x1f02ad(0x72a)](_0x4eecd6);else{const _0x3cc4cc=this['_distortionSprite'];_0x3cc4cc&&(_0x3cc4cc[_0x1f02ad(0x845)]['x']=this['mainSpriteScaleX'](),_0x3cc4cc['scale']['y']=this[_0x1f02ad(0xde)]());}}}}}else this['performWeaponAnimation']();}}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x718),_0x1f4e91=>{const _0xee662c=_0x3237d7;if(!SceneManager[_0xee662c(0x5cb)]())return;VisuMZ[_0xee662c(0x3d3)](_0x1f4e91,_0x1f4e91);const _0xf108c7=_0x1f4e91[_0xee662c(0x60d)],_0x2ca4d1=VisuMZ[_0xee662c(0x5e8)](_0x1f4e91['Targets']);for(const _0x3ab739 of _0x2ca4d1){if(!_0x3ab739)continue;for(const _0x16442e of _0xf108c7){_0x3ab739[_0xee662c(0x1fe)](_0x16442e);}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x967),_0x33ba32=>{const _0x166cb7=_0x3237d7;if(!SceneManager[_0x166cb7(0x5cb)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x166cb7(0x3d3)](_0x33ba32,_0x33ba32);const _0x1e631a=_0x33ba32['Exploited'],_0x35f939=VisuMZ[_0x166cb7(0x5e8)](_0x33ba32['Targets']),_0x3256a2=_0x33ba32[_0x166cb7(0x5dd)],_0x5708b2=_0x33ba32[_0x166cb7(0x50e)],_0x3c1b19=_0x33ba32[_0x166cb7(0xa98)],_0x30b598=BattleManager[_0x166cb7(0x343)];if(_0x1e631a)for(const _0x2b4732 of _0x35f939){if(!_0x2b4732)continue;if(_0x2b4732===user)continue;if(_0x3256a2)_0x2b4732[_0x166cb7(0x1ef)](![]);_0x2b4732['becomeSTBExploited'](BattleManager[_0x166cb7(0xb5c)],_0x30b598);}if(_0x5708b2&&BattleManager[_0x166cb7(0xb5c)]){if(_0x3c1b19)BattleManager[_0x166cb7(0xb5c)][_0x166cb7(0x1ef)](![]);const _0x478707=_0x35f939[0x0];BattleManager[_0x166cb7(0x72b)](_0x478707,_0x30b598);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x4f8),_0xf141f=>{const _0x4146df=_0x3237d7;if(!SceneManager[_0x4146df(0x5cb)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x4146df(0x22b)]())return;VisuMZ[_0x4146df(0x3d3)](_0xf141f,_0xf141f);const _0x58ee9b=_0xf141f[_0x4146df(0x48d)];BattleManager[_0x4146df(0xb5c)]&&BattleManager[_0x4146df(0xb5c)][_0x4146df(0x377)](_0x58ee9b);}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x670),_0x338ea4=>{const _0x4e0e3c=_0x3237d7;if(!SceneManager[_0x4e0e3c(0x5cb)]())return;if(!Imported[_0x4e0e3c(0x760)])return;if(!BattleManager[_0x4e0e3c(0x22b)]())return;VisuMZ[_0x4e0e3c(0x3d3)](_0x338ea4,_0x338ea4);let _0x4d116f=_0x338ea4['Actions'];if(BattleManager['_subject']){if(_0x4e0e3c(0x2c6)==='JRhHe')this[_0x4e0e3c(0x364)][_0x4e0e3c(0x5be)](),this['_actorWindow'][_0x4e0e3c(0x181)](),this[_0x4e0e3c(0x5f0)][_0x4e0e3c(0xa8b)]();else{BattleManager[_0x4e0e3c(0xb5c)][_0x4e0e3c(0x7ca)]=BattleManager[_0x4e0e3c(0xb5c)]['_actions']||[];while(_0x4d116f--){if(BattleManager[_0x4e0e3c(0xb5c)]['_actions'][_0x4e0e3c(0x60c)]<=0x0)break;BattleManager[_0x4e0e3c(0xb5c)][_0x4e0e3c(0x7ca)][_0x4e0e3c(0xa12)]();}}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x5ba),_0x36b506=>{const _0x281d68=_0x3237d7;if(!SceneManager[_0x281d68(0x5cb)]())return;if(!Imported[_0x281d68(0xab3)])return;VisuMZ[_0x281d68(0x3d3)](_0x36b506,_0x36b506);const _0x17c5a7=VisuMZ[_0x281d68(0x5e8)](_0x36b506[_0x281d68(0x30e)]),_0x1b519c=_0x36b506[_0x281d68(0x9aa)];for(const _0x1d22df of _0x17c5a7){if(!_0x1d22df)continue;if(!_0x1d22df[_0x281d68(0x5ef)]())continue;_0x1d22df[_0x281d68(0x6c4)](_0x1b519c);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x351),_0x397553=>{const _0x2aea11=_0x3237d7;if(!SceneManager[_0x2aea11(0x5cb)]())return;VisuMZ[_0x2aea11(0x3d3)](_0x397553,_0x397553);const _0x1a3ca5=VisuMZ[_0x2aea11(0x5e8)](_0x397553['Targets']),_0x3b2a40=_0x397553[_0x2aea11(0x86a)],_0x30a68e={'textColor':ColorManager[_0x2aea11(0x508)](_0x397553[_0x2aea11(0x5e1)]),'flashColor':_0x397553['FlashColor'],'flashDuration':_0x397553['FlashDuration']};for(const _0x3901be of _0x1a3ca5){if(!_0x3901be)continue;_0x3901be[_0x2aea11(0x76f)](_0x3b2a40,_0x30a68e);}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x8cc),_0x6cbf3a=>{const _0x246746=_0x3237d7;if(!SceneManager[_0x246746(0x5cb)]())return;VisuMZ[_0x246746(0x3d3)](_0x6cbf3a,_0x6cbf3a);const _0x3ca84b=VisuMZ[_0x246746(0x5e8)](_0x6cbf3a[_0x246746(0x30e)]);let _0x2bd552=$gameVariables['value'](_0x6cbf3a[_0x246746(0x551)]);Imported[_0x246746(0x38d)]&&_0x6cbf3a[_0x246746(0x123)]&&(_0x2bd552=VisuMZ[_0x246746(0x881)](_0x2bd552));const _0x128f03=String(_0x2bd552),_0x5bfe01={'textColor':ColorManager['getColor'](_0x6cbf3a[_0x246746(0x5e1)]),'flashColor':_0x6cbf3a[_0x246746(0x93d)],'flashDuration':_0x6cbf3a[_0x246746(0x1ae)]};for(const _0x1b5a8a of _0x3ca84b){if(!_0x1b5a8a)continue;_0x1b5a8a[_0x246746(0x76f)](_0x128f03,_0x5bfe01);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x2e2),_0x2987f4=>{const _0x5610d5=_0x3237d7;if(!SceneManager['isSceneBattle']())return;const _0x38b351=$gameTemp[_0x5610d5(0x968)]();if(!_0x38b351)return;_0x38b351[_0x5610d5(0x20e)](_0x5610d5(0x345));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x306),_0x3a2e68=>{const _0x5fdc72=_0x3237d7;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3a2e68,_0x3a2e68);const _0x516fcd=VisuMZ['CreateActionSequenceTargets'](_0x3a2e68[_0x5fdc72(0x30e)]);for(const _0x380b2e of _0x516fcd){if(!_0x380b2e)continue;_0x380b2e[_0x5fdc72(0x692)]();}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Motion_FreezeMotionFrame',_0x53ebb0=>{const _0x522ec9=_0x3237d7;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x522ec9(0x3d3)](_0x53ebb0,_0x53ebb0);const _0x5d98c9=VisuMZ[_0x522ec9(0x5e8)](_0x53ebb0['Targets']),_0x3b9e02=_0x53ebb0[_0x522ec9(0x507)]['toLowerCase']()[_0x522ec9(0x194)]();let _0x225a4f=_0x53ebb0[_0x522ec9(0x7f9)];const _0x28fd03=_0x53ebb0[_0x522ec9(0x4af)];![_0x522ec9(0x34b),_0x522ec9(0xa3e),_0x522ec9(0x275),_0x522ec9(0x960)][_0x522ec9(0x231)](_0x3b9e02)&&(_0x225a4f=![]);for(const _0x2bf91f of _0x5d98c9){if(_0x522ec9(0x870)==='kgCfO'){if(!_0x2bf91f)continue;_0x2bf91f[_0x522ec9(0x27c)](_0x3b9e02,_0x225a4f,_0x28fd03);}else{if(!_0x3239b8['isSceneBattle']())return;if(!_0x35400c[_0x522ec9(0x5c9)])return;if(!_0x4c566f[_0x522ec9(0x8b3)]())return;_0x12bbf3[_0x522ec9(0x3d3)](_0x1a803e,_0x160230);const _0x2574f5=_0x191089[_0x522ec9(0xb5c)][_0x522ec9(0x889)](),_0x279d59=_0x1e99b2['Override'],_0x31b946=_0x3ac685[_0x522ec9(0x68d)]||_0x522ec9(0x36f),_0x11adf5=_0x3e25f4[_0x522ec9(0xabd)]||_0x522ec9(0x36f),_0x2e6e70=_0x15827e['alterCost']||0x0,_0x1eef71=_0x4924f3[_0x522ec9(0x2cc)]||0x0;(_0x2574f5[_0x522ec9(0x267)]()||_0x279d59)&&(_0x279d59&&(_0x2574f5['_ptbActionCost']=_0x2574f5[_0x522ec9(0x36d)]||{},_0x2574f5[_0x522ec9(0x36d)][_0x522ec9(0x550)]=0x0),_0x2574f5[_0x522ec9(0x5dc)](_0x31b946,_0x11adf5,_0x2e6e70,_0x1eef71));}}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Motion_MotionType',_0xf6a8b3=>{const _0xe10a14=_0x3237d7;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xe10a14(0x3d3)](_0xf6a8b3,_0xf6a8b3);const _0x3ee46b=VisuMZ[_0xe10a14(0x5e8)](_0xf6a8b3['Targets']),_0x1402d8=_0xf6a8b3[_0xe10a14(0x507)]['toLowerCase']()[_0xe10a14(0x194)](),_0x2e0da4=_0xf6a8b3[_0xe10a14(0x7f9)];for(const _0x3cd6d2 of _0x3ee46b){if(_0xe10a14(0x713)!==_0xe10a14(0x713))this[_0xe10a14(0x9be)]=new _0x3bfc94(),this['_mainSprite'][_0xe10a14(0xa99)]['x']=0.5,this['_mainSprite'][_0xe10a14(0xa99)]['y']=0x1,this[_0xe10a14(0x70d)](this[_0xe10a14(0x9be)]),this[_0xe10a14(0x8aa)]();else{if(!_0x3cd6d2)continue;if(_0x1402d8['match'](/ATTACK[ ](\d+)/i))_0x3cd6d2[_0xe10a14(0x333)](Number(RegExp['$1']));else{if(_0x1402d8===_0xe10a14(0x34b))_0x3cd6d2[_0xe10a14(0x3e8)]();else{if(_0xe10a14(0x506)==='MThOg'){if(this[_0xe10a14(0x77b)]())this['_phase']='turn';else this[_0xe10a14(0x159)][_0xe10a14(0x60c)]>0x0?this['_phase']=_0xe10a14(0x897):this[_0xe10a14(0x855)]();}else _0x3cd6d2[_0xe10a14(0x85a)](_0x1402d8);}}if(!_0x2e0da4)_0x3cd6d2[_0xe10a14(0x85f)](0x0);else{if(_0x2e0da4&&[_0xe10a14(0xa3e),'swing',_0xe10a14(0xbe)][_0xe10a14(0x231)](_0x1402d8)){}}}}}),PluginManager['registerCommand'](pluginData['name'],_0x3237d7(0x80d),_0x42f159=>{const _0xe5a42b=_0x3237d7;if(!SceneManager[_0xe5a42b(0x5cb)]())return;VisuMZ[_0xe5a42b(0x3d3)](_0x42f159,_0x42f159);const _0x186e57=BattleManager[_0xe5a42b(0x343)];if(!_0x186e57)return;if(!_0x186e57[_0xe5a42b(0x7be)]())return;const _0x3706fa=VisuMZ[_0xe5a42b(0x5e8)](_0x42f159[_0xe5a42b(0x30e)]);for(const _0x8a3ca3 of _0x3706fa){if(_0xe5a42b(0xb02)!==_0xe5a42b(0x2c9)){if(!_0x8a3ca3)continue;_0x8a3ca3[_0xe5a42b(0x5d8)](_0x186e57);}else this['_createCursorArea'](),this[_0xe5a42b(0x724)](),_0x5affcb[_0xe5a42b(0x735)][_0xe5a42b(0x86e)][_0xe5a42b(0x4db)](this),this[_0xe5a42b(0x288)]();}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xb56),_0x45047c=>{const _0x1a4c97=_0x3237d7;if(!SceneManager[_0x1a4c97(0x5cb)]())return;VisuMZ[_0x1a4c97(0x3d3)](_0x45047c,_0x45047c);const _0x164468=VisuMZ[_0x1a4c97(0x5e8)](_0x45047c[_0x1a4c97(0x30e)]);for(const _0x557071 of _0x164468){if(!_0x557071)continue;if(!_0x557071[_0x1a4c97(0x1d5)]())continue;_0x557071[_0x1a4c97(0x1d5)]()[_0x1a4c97(0x537)]();}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x3bb),_0x211569=>{const _0x56929a=_0x3237d7;if(!SceneManager[_0x56929a(0x5cb)]())return;VisuMZ[_0x56929a(0x3d3)](_0x211569,_0x211569);const _0x41d8b1=$gameTemp[_0x56929a(0x968)](),_0x250c2d=_0x211569[_0x56929a(0x17a)]*Sprite_Battler[_0x56929a(0xa1)];_0x41d8b1[_0x56929a(0x6ca)](_0x250c2d);}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x456),_0x413551=>{const _0x4ae412=_0x3237d7;if(!SceneManager[_0x4ae412(0x5cb)]())return;VisuMZ[_0x4ae412(0x3d3)](_0x413551,_0x413551);const _0x3ee849=$gameTemp[_0x4ae412(0x968)](),_0x3f4818=BattleManager[_0x4ae412(0x343)];if(!_0x3ee849||!_0x3f4818)return;if(!_0x3f4818['item']())return;const _0x5f0003=VisuMZ[_0x4ae412(0x5e8)](_0x413551['Targets']);for(const _0x14fab7 of _0x5f0003){if(!_0x14fab7)continue;_0x14fab7[_0x4ae412(0x8be)](_0x3f4818);}if(_0x413551[_0x4ae412(0xb08)])_0x3ee849[_0x4ae412(0x20e)](_0x4ae412(0x22e));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Movement_HomeMoveBy',_0x1923d6=>{const _0x405a46=_0x3237d7;if(!SceneManager[_0x405a46(0x5cb)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x1923d6,_0x1923d6);const _0x5a50f6=$gameTemp['getLastPluginCommandInterpreter'](),_0x1fc43c=VisuMZ[_0x405a46(0x5e8)](_0x1923d6['Targets']),_0xa9bd57=_0x1923d6[_0x405a46(0x1c8)],_0x3c0a64=_0x1923d6['DistanceX'],_0xa19df7=_0x1923d6['DistanceY'],_0x3050ed=_0x1923d6[_0x405a46(0x1e5)],_0x344333=_0x1923d6[_0x405a46(0x5a0)],_0x16c518=_0x1923d6['EasingType'],_0x23d5ca=_0x1923d6[_0x405a46(0x507)],_0x590eea=_0x1923d6[_0x405a46(0xb08)];if(!_0x5a50f6)return;for(const _0x48c133 of _0x1fc43c){if(_0x405a46(0xaee)!==_0x405a46(0x97c)){if(!_0x48c133)continue;let _0x374f1c=_0x3c0a64,_0x3f4a88=_0xa19df7;if(_0xa9bd57[_0x405a46(0x453)](/horz/i))_0x374f1c*=_0x48c133[_0x405a46(0x5ef)]()?-0x1:0x1;if(_0xa9bd57[_0x405a46(0x453)](/vert/i))_0x3f4a88*=_0x48c133['isActor']()?-0x1:0x1;_0x48c133[_0x405a46(0x341)](_0x374f1c,_0x3f4a88,_0x3050ed,_0x344333,_0x16c518),_0x48c133['requestMotion'](_0x23d5ca);}else return this[_0x405a46(0xb32)]['allowCollapse']();}if(_0x590eea)_0x5a50f6[_0x405a46(0x20e)](_0x405a46(0x22e));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x337),_0x32a40e=>{const _0x3cbf0b=_0x3237d7;if(!SceneManager[_0x3cbf0b(0x5cb)]())return;if(!$gameSystem[_0x3cbf0b(0x59e)]())return;VisuMZ[_0x3cbf0b(0x3d3)](_0x32a40e,_0x32a40e);const _0x352a9f=$gameTemp[_0x3cbf0b(0x968)](),_0x2db574=VisuMZ[_0x3cbf0b(0x5e8)](_0x32a40e[_0x3cbf0b(0x30e)]),_0x1dc4a5=_0x32a40e[_0x3cbf0b(0xadc)],_0x2cf836=_0x32a40e[_0x3cbf0b(0xaf)],_0x103234=_0x32a40e[_0x3cbf0b(0x252)],_0x269908=_0x32a40e[_0x3cbf0b(0x57b)],_0x2e54a5=_0x32a40e['Duration'],_0x533ed6=_0x32a40e[_0x3cbf0b(0x5a0)],_0x7e807=_0x32a40e['EasingType'],_0x56b5f1=_0x32a40e[_0x3cbf0b(0x507)],_0x17dc9f=_0x32a40e[_0x3cbf0b(0xb08)];if(!_0x352a9f)return;for(const _0x56c876 of _0x2db574){if(!_0x56c876)continue;let _0x3edc9e=_0x56c876[_0x3cbf0b(0x1d5)]()[_0x3cbf0b(0x642)],_0x471670=_0x56c876[_0x3cbf0b(0x1d5)]()[_0x3cbf0b(0x9ed)];if(_0x1dc4a5[_0x3cbf0b(0x453)](/home/i)){if(_0x3cbf0b(0x7b0)===_0x3cbf0b(0x7b0))_0x3edc9e=_0x56c876[_0x3cbf0b(0x1d5)]()['_homeX'],_0x471670=_0x56c876[_0x3cbf0b(0x1d5)]()[_0x3cbf0b(0x3f3)];else{if(_0x1e053b[_0x3cbf0b(0x529)]&&_0x1e8866['uiInputPosition']!==_0x42ab74)return _0x34e47b[_0x3cbf0b(0x93c)];else{if(this[_0x3cbf0b(0x457)]()===_0x3cbf0b(0xa93))return![];else{return _0x4b3301[_0x3cbf0b(0x735)][_0x3cbf0b(0x5e6)][_0x3cbf0b(0x4db)](this);;}}}}else{if(_0x1dc4a5[_0x3cbf0b(0x453)](/center/i))_0x3edc9e=Graphics[_0x3cbf0b(0x63d)]/0x2,_0x471670=Graphics[_0x3cbf0b(0x747)]/0x2;else _0x1dc4a5[_0x3cbf0b(0x453)](/point (\d+), (\d+)/i)&&(_0x3edc9e=Number(RegExp['$1']),_0x471670=Number(RegExp['$2']));}if(_0x2cf836['match'](/none/i))_0x3edc9e+=_0x103234,_0x471670+=_0x269908;else{if(_0x2cf836['match'](/horz/i)&&_0x2cf836[_0x3cbf0b(0x453)](/vert/i))'ZZicb'!==_0x3cbf0b(0x2ab)?(_0x3edc9e+=_0x56c876[_0x3cbf0b(0x5ef)]()?-_0x103234:_0x103234,_0x471670+=_0x56c876[_0x3cbf0b(0x5ef)]()?-_0x269908:_0x269908):this[_0x3cbf0b(0xbb)](...arguments);else{if(_0x2cf836[_0x3cbf0b(0x453)](/horz/i)){if(_0x3cbf0b(0x676)!=='ygZoh')_0x3edc9e+=_0x56c876[_0x3cbf0b(0x5ef)]()?-_0x103234:_0x103234,_0x471670+=_0x269908;else{if(!this[_0x3cbf0b(0x16f)]()&&this!==_0x55d39c[_0x3cbf0b(0xb5c)]){if(this[_0x3cbf0b(0x1d5)]())this[_0x3cbf0b(0x1d5)]()[_0x3cbf0b(0x537)]();}this['clearFreezeMotion']();return;}}else _0x2cf836[_0x3cbf0b(0x453)](/vert/i)&&(_0x3edc9e+=_0x103234,_0x471670+=_0x56c876[_0x3cbf0b(0x5ef)]()?-_0x269908:_0x269908);}}_0x56c876[_0x3cbf0b(0x895)](_0x3edc9e,_0x471670,_0x2e54a5,_0x533ed6,_0x7e807,-0x1),_0x56c876[_0x3cbf0b(0x85a)](_0x56b5f1);}if(_0x17dc9f)_0x352a9f[_0x3cbf0b(0x20e)](_0x3cbf0b(0x22e));}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],'ActSeq_Movement_HomeMoveToTarget',_0x33f539=>{const _0x429eb3=_0x3237d7;if(!SceneManager[_0x429eb3(0x5cb)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x33f539,_0x33f539);const _0x237a6f=$gameTemp[_0x429eb3(0x968)](),_0x5e7c20=VisuMZ[_0x429eb3(0x5e8)](_0x33f539['Targets1']),_0x1cc29e=VisuMZ['CreateActionSequenceTargets'](_0x33f539[_0x429eb3(0x318)]),_0x548377=_0x33f539[_0x429eb3(0x5ea)];let _0xedaf00=_0x33f539[_0x429eb3(0x789)];const _0x4fecd9=_0x33f539[_0x429eb3(0xaf)],_0x234680=_0x33f539[_0x429eb3(0x252)],_0x38752a=_0x33f539[_0x429eb3(0x57b)],_0x37fe33=_0x33f539[_0x429eb3(0x1e5)],_0x18e31f=_0x33f539['FaceDirection'],_0x2589cb=_0x33f539[_0x429eb3(0x758)],_0x19d59c=_0x33f539[_0x429eb3(0x507)],_0x1dcdae=_0x33f539[_0x429eb3(0xb08)],_0x1986f1=Math[_0x429eb3(0x9c4)](..._0x1cc29e['map'](_0x51f6d6=>_0x51f6d6['battler']()[_0x429eb3(0x642)]-_0x51f6d6['battler']()[_0x429eb3(0x1ee)]()/0x2)),_0x3006e7=Math['max'](..._0x1cc29e[_0x429eb3(0x1e0)](_0x357874=>_0x357874[_0x429eb3(0x1d5)]()[_0x429eb3(0x642)]+_0x357874[_0x429eb3(0x1d5)]()[_0x429eb3(0x1ee)]()/0x2)),_0x413bc2=Math['min'](..._0x1cc29e['map'](_0x24e043=>_0x24e043[_0x429eb3(0x1d5)]()[_0x429eb3(0x9ed)]-_0x24e043[_0x429eb3(0x1d5)]()[_0x429eb3(0x21c)]())),_0x47e8a9=Math['max'](..._0x1cc29e['map'](_0x551c1c=>_0x551c1c[_0x429eb3(0x1d5)]()['_baseY'])),_0x29f96b=_0x1cc29e['filter'](_0x18ebbd=>_0x18ebbd[_0x429eb3(0x5ef)]())[_0x429eb3(0x60c)],_0x5e0a33=_0x1cc29e[_0x429eb3(0x921)](_0x208593=>_0x208593[_0x429eb3(0x8f2)]())[_0x429eb3(0x60c)];let _0x1c23f7=0x0,_0x5422ab=0x0;if(_0x548377[_0x429eb3(0x453)](/front/i))_0x1c23f7=_0x29f96b>=_0x5e0a33?_0x1986f1:_0x3006e7;else{if(_0x548377['match'](/middle/i))'gdveU'===_0x429eb3(0x632)?_0x497b6e[_0x429eb3(0x28b)](this[_0x429eb3(0x67f)]()):(_0x1c23f7=(_0x1986f1+_0x3006e7)/0x2,_0xedaf00=-0x1);else _0x548377[_0x429eb3(0x453)](/back/i)&&(_0x1c23f7=_0x29f96b>=_0x5e0a33?_0x3006e7:_0x1986f1);}if(_0x548377[_0x429eb3(0x453)](/head/i)){if(_0x429eb3(0x414)!==_0x429eb3(0x414)){for(const _0x3b4913 of _0x2ed646){_0x3b4913['match'](_0x1b61ea);const _0xd15640=_0x3338d6(_0x1fb261['$1'])[_0x429eb3(0x2cf)](',')[_0x429eb3(0x1e0)](_0xacc91a=>_0xdf1783(_0xacc91a)[_0x429eb3(0x566)]()[_0x429eb3(0x194)]());_0x5867e2=_0x371373['concat'](_0xd15640);}!_0x5275e0['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x27972e[_0x429eb3(0x4fe)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}else _0x5422ab=_0x413bc2;}else{if(_0x548377[_0x429eb3(0x453)](/center/i))_0x5422ab=(_0x413bc2+_0x47e8a9)/0x2;else{if(_0x548377[_0x429eb3(0x453)](/base/i)){if(_0x429eb3(0x1d2)==='WsEzo'){if(_0x13f2f2['_animation'][_0x429eb3(0x49e)]===0x3)return![];}else _0x5422ab=_0x47e8a9;}}}if(!_0x237a6f)return;for(const _0x5dcb5f of _0x5e7c20){if(!_0x5dcb5f)continue;let _0x337e40=_0x1c23f7,_0x461e6e=_0x5422ab;if(_0x4fecd9[_0x429eb3(0x453)](/none/i))_0x337e40+=_0x234680,_0x461e6e+=_0x38752a;else{if(_0x4fecd9['match'](/horz/i)&&_0x4fecd9[_0x429eb3(0x453)](/vert/i))_0x337e40+=_0x5dcb5f[_0x429eb3(0x5ef)]()?-_0x234680:_0x234680,_0x461e6e+=_0x5dcb5f[_0x429eb3(0x5ef)]()?-_0x38752a:_0x38752a;else{if(_0x4fecd9['match'](/horz/i))_0x337e40+=_0x5dcb5f[_0x429eb3(0x5ef)]()?-_0x234680:_0x234680,_0x461e6e+=_0x38752a;else _0x4fecd9[_0x429eb3(0x453)](/vert/i)&&(_0x337e40+=_0x234680,_0x461e6e+=_0x5dcb5f[_0x429eb3(0x5ef)]()?-_0x38752a:_0x38752a);}}_0x5dcb5f[_0x429eb3(0x895)](_0x337e40,_0x461e6e,_0x37fe33,_0x18e31f,_0x2589cb,_0xedaf00),_0x5dcb5f[_0x429eb3(0x85a)](_0x19d59c);}if(_0x1dcdae)_0x237a6f[_0x429eb3(0x20e)]('battleMove');}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x425),_0xfdb524=>{const _0xc50071=_0x3237d7;if(!SceneManager[_0xc50071(0x5cb)]())return;if(!$gameSystem[_0xc50071(0x59e)]())return;VisuMZ[_0xc50071(0x3d3)](_0xfdb524,_0xfdb524);const _0x17c947=VisuMZ[_0xc50071(0x5e8)](_0xfdb524[_0xc50071(0x30e)]);let _0x1b1a30=_0xfdb524[_0xc50071(0x860)]['match'](/back/i);for(const _0x49ec67 of _0x17c947){if(!_0x49ec67)continue;if(_0xfdb524[_0xc50071(0x860)]['match'](/rand/i))_0x1b1a30=Math[_0xc50071(0x1a2)](0x2);_0x49ec67[_0xc50071(0x92a)](!!_0x1b1a30);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xa40),_0xcc8911=>{const _0x43c099=_0x3237d7;if(!SceneManager[_0x43c099(0x5cb)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0xcc8911,_0xcc8911);const _0x246edd=VisuMZ[_0x43c099(0x5e8)](_0xcc8911[_0x43c099(0x30e)]);let _0x4161b3=_0xcc8911[_0x43c099(0x33d)];const _0x2c1514=_0xcc8911[_0x43c099(0xb06)];for(const _0x4592eb of _0x246edd){if(!_0x4592eb)continue;let _0x120693=_0x4592eb[_0x43c099(0x1d5)]()[_0x43c099(0x642)],_0x30e680=_0x4592eb['battler']()[_0x43c099(0x9ed)];if(_0x4161b3[_0x43c099(0x453)](/home/i))_0x43c099(0xb42)===_0x43c099(0xb42)?(_0x120693=_0x4592eb[_0x43c099(0x1d5)]()[_0x43c099(0x7e8)],_0x30e680=_0x4592eb[_0x43c099(0x1d5)]()[_0x43c099(0x3f3)]):(this['_text']=this['enemy']()['name'](),this[_0x43c099(0xaa6)]());else{if(_0x4161b3[_0x43c099(0x453)](/center/i)){if(_0x43c099(0x578)===_0x43c099(0xaaa))return 0x0;else _0x120693=Graphics[_0x43c099(0x63d)]/0x2,_0x30e680=Graphics[_0x43c099(0x747)]/0x2;}else _0x4161b3[_0x43c099(0x453)](/point (\d+), (\d+)/i)&&(_0x43c099(0xae5)!==_0x43c099(0xae5)?this[_0x43c099(0x857)](_0x43c099(0x786),_0x13033a):(_0x120693=Number(RegExp['$1']),_0x30e680=Number(RegExp['$2'])));}_0x4592eb[_0x43c099(0x18b)](Math[_0x43c099(0x222)](_0x120693),Math[_0x43c099(0x222)](_0x30e680),!!_0x2c1514);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xb69),_0x267317=>{const _0x2a2328=_0x3237d7;if(!SceneManager[_0x2a2328(0x5cb)]())return;if(!$gameSystem[_0x2a2328(0x59e)]())return;VisuMZ[_0x2a2328(0x3d3)](_0x267317,_0x267317);const _0x103cb2=VisuMZ[_0x2a2328(0x5e8)](_0x267317[_0x2a2328(0x60f)]),_0x21245e=VisuMZ[_0x2a2328(0x5e8)](_0x267317['Targets2']),_0x8d24fd=_0x21245e[_0x2a2328(0x1e0)](_0x219d9f=>_0x219d9f&&_0x219d9f[_0x2a2328(0x1d5)]()?_0x219d9f[_0x2a2328(0x1d5)]()[_0x2a2328(0x642)]:0x0)/(_0x21245e[_0x2a2328(0x60c)]||0x1),_0x740bcc=_0x21245e['map'](_0x4b8824=>_0x4b8824&&_0x4b8824['battler']()?_0x4b8824[_0x2a2328(0x1d5)]()['_baseY']:0x0)/(_0x21245e[_0x2a2328(0x60c)]||0x1),_0x5b2a39=_0x267317[_0x2a2328(0xb06)];for(const _0x1fee51 of _0x103cb2){if(_0x2a2328(0x8c6)!==_0x2a2328(0x8c6))_0x522d7a[_0x2a2328(0x735)][_0x2a2328(0x379)]['call'](this);else{if(!_0x1fee51)continue;_0x1fee51['setBattlerFacePoint'](Math[_0x2a2328(0x222)](_0x8d24fd),Math[_0x2a2328(0x222)](_0x740bcc),!!_0x5b2a39);}}}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Movement_Float',_0x5d0d4d=>{const _0x1dc589=_0x3237d7;if(!SceneManager[_0x1dc589(0x5cb)]())return;VisuMZ[_0x1dc589(0x3d3)](_0x5d0d4d,_0x5d0d4d);const _0x384c0e=$gameTemp['getLastPluginCommandInterpreter'](),_0x21a04d=VisuMZ[_0x1dc589(0x5e8)](_0x5d0d4d[_0x1dc589(0x30e)]),_0x497653=_0x5d0d4d[_0x1dc589(0x8ee)],_0x527747=_0x5d0d4d[_0x1dc589(0x1e5)],_0x100d43=_0x5d0d4d[_0x1dc589(0x758)],_0x6f7ce7=_0x5d0d4d[_0x1dc589(0x42d)];if(!_0x384c0e)return;for(const _0x5b15a2 of _0x21a04d){if(!_0x5b15a2)continue;_0x5b15a2[_0x1dc589(0x12f)](_0x497653,_0x527747,_0x100d43);}if(_0x6f7ce7)_0x384c0e[_0x1dc589(0x20e)](_0x1dc589(0x4fb));}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x3ff),_0x1f7917=>{const _0x258022=_0x3237d7;if(!SceneManager[_0x258022(0x5cb)]())return;VisuMZ['ConvertParams'](_0x1f7917,_0x1f7917);const _0xf8e8d4=$gameTemp[_0x258022(0x968)]();if(!_0xf8e8d4)return;const _0x2ecff0=VisuMZ[_0x258022(0x5e8)](_0x1f7917[_0x258022(0x30e)]);for(const _0x5ffc0 of _0x2ecff0){if(_0x258022(0x3fa)!=='ZlQwA'){if(!_0x5ffc0)continue;_0x5ffc0[_0x258022(0xb38)]();}else this[_0x258022(0x88c)]=this[_0x258022(0x6a7)](),this[_0x258022(0x891)](),_0x2abef1[_0x258022(0x735)][_0x258022(0xaa6)][_0x258022(0x4db)](this);}BattleManager[_0x258022(0xb5c)]&&(_0x258022(0x434)==='ybEQm'?this[_0x258022(0x97e)]()?_0x1e4584['_scene'][_0x258022(0x364)]['removeDamageSprite'](_0x25d3bc):(this[_0x258022(0xa2c)]()[_0x258022(0x89f)](_0x221036),this['_damages'][_0x258022(0x28b)](_0x23a80f),_0x9a7c59[_0x258022(0x416)]()):BattleManager[_0x258022(0xb5c)]['performActionEnd']());if(_0x1f7917['WaitForMovement'])_0xf8e8d4[_0x258022(0x20e)](_0x258022(0x22e));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xa14),_0x5deb0f=>{const _0x202675=_0x3237d7;if(!SceneManager[_0x202675(0x5cb)]())return;VisuMZ['ConvertParams'](_0x5deb0f,_0x5deb0f);const _0x180350=$gameTemp[_0x202675(0x968)](),_0x32328f=VisuMZ[_0x202675(0x5e8)](_0x5deb0f['Targets']),_0x568e89=_0x5deb0f[_0x202675(0x8ee)],_0x2e7c5a=_0x5deb0f[_0x202675(0x1e5)],_0x1bf534=_0x5deb0f[_0x202675(0x4b5)];if(!_0x180350)return;for(const _0x2ca8ff of _0x32328f){if(!_0x2ca8ff)continue;_0x2ca8ff[_0x202675(0xb20)](_0x568e89,_0x2e7c5a);}if(_0x1bf534)_0x180350[_0x202675(0x20e)](_0x202675(0xae8));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x99a),_0x41e439=>{const _0x3080b6=_0x3237d7;if(!SceneManager[_0x3080b6(0x5cb)]())return;if(!$gameSystem[_0x3080b6(0x59e)]())return;VisuMZ[_0x3080b6(0x3d3)](_0x41e439,_0x41e439);const _0x5b4df2=$gameTemp[_0x3080b6(0x968)](),_0x4f1b82=VisuMZ[_0x3080b6(0x5e8)](_0x41e439[_0x3080b6(0x30e)]),_0x3c7e62=_0x41e439[_0x3080b6(0x1c8)],_0x3b9eb4=_0x41e439['DistanceX'],_0x43c3ee=_0x41e439[_0x3080b6(0xae7)],_0x1a793f=_0x41e439[_0x3080b6(0x1e5)],_0x315347=_0x41e439[_0x3080b6(0x5a0)],_0x4d431f=_0x41e439[_0x3080b6(0x758)],_0x321961=_0x41e439[_0x3080b6(0x507)],_0x4e6917=_0x41e439[_0x3080b6(0xb08)];if(!_0x5b4df2)return;for(const _0x5a7315 of _0x4f1b82){if('kznmy'!=='qaTIf'){if(!_0x5a7315)continue;let _0x46010e=_0x3b9eb4,_0x1e636a=_0x43c3ee;if(_0x3c7e62[_0x3080b6(0x453)](/horz/i))_0x46010e*=_0x5a7315['isActor']()?-0x1:0x1;if(_0x3c7e62[_0x3080b6(0x453)](/vert/i))_0x1e636a*=_0x5a7315[_0x3080b6(0x5ef)]()?-0x1:0x1;_0x5a7315[_0x3080b6(0x819)](_0x46010e,_0x1e636a,_0x1a793f,_0x315347,_0x4d431f),_0x5a7315['requestMotion'](_0x321961);}else this['setup'](_0x25a919[_0x3080b6(0x5fc)],0x0);}if(_0x4e6917)_0x5b4df2['setWaitMode'](_0x3080b6(0x22e));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0x3c6),_0x657cec=>{const _0x4c680f=_0x3237d7;if(!SceneManager[_0x4c680f(0x5cb)]())return;if(!$gameSystem[_0x4c680f(0x59e)]())return;VisuMZ[_0x4c680f(0x3d3)](_0x657cec,_0x657cec);const _0x51513f=$gameTemp[_0x4c680f(0x968)](),_0x515e4c=VisuMZ[_0x4c680f(0x5e8)](_0x657cec[_0x4c680f(0x30e)]),_0x3926c8=_0x657cec[_0x4c680f(0xadc)],_0x374a80=_0x657cec[_0x4c680f(0xaf)],_0x5af7ef=_0x657cec[_0x4c680f(0x252)],_0x1fac8f=_0x657cec[_0x4c680f(0x57b)],_0x5363e=_0x657cec[_0x4c680f(0x1e5)],_0x431a8b=_0x657cec[_0x4c680f(0x5a0)],_0x1d595b=_0x657cec['EasingType'],_0x368f60=_0x657cec[_0x4c680f(0x507)],_0x403a2b=_0x657cec[_0x4c680f(0xb08)];if(!_0x51513f)return;for(const _0x2195e7 of _0x515e4c){if(!_0x2195e7)continue;let _0x10eb21=_0x2195e7[_0x4c680f(0x1d5)]()[_0x4c680f(0x642)],_0x5a6b57=_0x2195e7[_0x4c680f(0x1d5)]()['_baseY'];if(_0x3926c8['match'](/home/i))_0x10eb21=_0x2195e7[_0x4c680f(0x1d5)]()['_homeX'],_0x5a6b57=_0x2195e7[_0x4c680f(0x1d5)]()[_0x4c680f(0x3f3)];else{if(_0x3926c8[_0x4c680f(0x453)](/center/i))_0x4c680f(0x730)!=='AsRMa'?this[_0x4c680f(0x581)]():(_0x10eb21=Graphics[_0x4c680f(0x63d)]/0x2,_0x5a6b57=Graphics[_0x4c680f(0x747)]/0x2);else{if(_0x3926c8[_0x4c680f(0x453)](/point (\d+), (\d+)/i)){if(_0x4c680f(0x803)!==_0x4c680f(0x2de))_0x10eb21=Number(RegExp['$1']),_0x5a6b57=Number(RegExp['$2']);else{const _0x61246a=this[_0x4c680f(0x2cd)](),_0x129ba3=_0x1e8061[_0x4c680f(0xa4)][_0x4c680f(0x98d)][_0x4c680f(0x661)]['CmdIconEscape'],_0x491fd5=_0x61246a==='text'?_0x14d98c['escape']:_0x4c680f(0x861)['format'](_0x129ba3,_0x1a25bd['escape']),_0x8c8af=this['isEscapeCommandEnabled']();this[_0x4c680f(0x557)](_0x491fd5,_0x4c680f(0x11c),_0x8c8af);}}}}if(_0x374a80['match'](/none/i))_0x10eb21+=_0x5af7ef,_0x5a6b57+=_0x1fac8f;else{if(_0x374a80[_0x4c680f(0x453)](/horz/i)&&_0x374a80[_0x4c680f(0x453)](/vert/i))_0x10eb21+=_0x2195e7[_0x4c680f(0x5ef)]()?-_0x5af7ef:_0x5af7ef,_0x5a6b57+=_0x2195e7[_0x4c680f(0x5ef)]()?-_0x1fac8f:_0x1fac8f;else{if(_0x374a80[_0x4c680f(0x453)](/horz/i))_0x10eb21+=_0x2195e7[_0x4c680f(0x5ef)]()?-_0x5af7ef:_0x5af7ef,_0x5a6b57+=_0x1fac8f;else _0x374a80[_0x4c680f(0x453)](/vert/i)&&(_0x4c680f(0x625)!==_0x4c680f(0xa6d)?(_0x10eb21+=_0x5af7ef,_0x5a6b57+=_0x2195e7[_0x4c680f(0x5ef)]()?-_0x1fac8f:_0x1fac8f):(this[_0x4c680f(0x642)]=this['x'],this[_0x4c680f(0x9ed)]=this['y'],this[_0x4c680f(0x5aa)](),this['updateJump'](),this['x']+=this[_0x4c680f(0x285)](),this['y']+=this[_0x4c680f(0x68a)](),this['y']+=this[_0x4c680f(0xac6)](),this['x']=_0x839b45[_0x4c680f(0x521)](this['x']),this['y']=_0xa8bb6e[_0x4c680f(0x521)](this['y'])));}}_0x2195e7[_0x4c680f(0x8ff)](_0x10eb21,_0x5a6b57,_0x5363e,_0x431a8b,_0x1d595b,-0x1),_0x2195e7[_0x4c680f(0x85a)](_0x368f60);}if(_0x403a2b)_0x51513f[_0x4c680f(0x20e)]('battleMove');}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x693),_0x3cadee=>{const _0x5587fe=_0x3237d7;if(!SceneManager[_0x5587fe(0x5cb)]())return;if(!$gameSystem[_0x5587fe(0x59e)]())return;VisuMZ[_0x5587fe(0x3d3)](_0x3cadee,_0x3cadee);const _0x19254d=$gameTemp[_0x5587fe(0x968)](),_0x4b9ec2=VisuMZ[_0x5587fe(0x5e8)](_0x3cadee[_0x5587fe(0x60f)]),_0x558e32=VisuMZ[_0x5587fe(0x5e8)](_0x3cadee['Targets2']),_0x167cd0=_0x3cadee['TargetLocation'];let _0x884b6c=_0x3cadee[_0x5587fe(0x789)];const _0x354b35=_0x3cadee[_0x5587fe(0xaf)],_0x14551e=_0x3cadee[_0x5587fe(0x252)],_0x488e90=_0x3cadee[_0x5587fe(0x57b)],_0x2da990=_0x3cadee[_0x5587fe(0x1e5)],_0x238bbd=_0x3cadee[_0x5587fe(0x5a0)],_0x492077=_0x3cadee[_0x5587fe(0x758)],_0x819d1f=_0x3cadee[_0x5587fe(0x507)],_0x137c2f=_0x3cadee[_0x5587fe(0xb08)],_0x3f452e=Math[_0x5587fe(0x9c4)](..._0x558e32['map'](_0x337d74=>_0x337d74[_0x5587fe(0x1d5)]()[_0x5587fe(0x642)]-_0x337d74[_0x5587fe(0x1d5)]()[_0x5587fe(0x1ee)]()/0x2)),_0x1d7748=Math[_0x5587fe(0x2e0)](..._0x558e32[_0x5587fe(0x1e0)](_0x55d169=>_0x55d169[_0x5587fe(0x1d5)]()[_0x5587fe(0x642)]+_0x55d169[_0x5587fe(0x1d5)]()['mainSpriteWidth']()/0x2)),_0x4103cf=Math['min'](..._0x558e32[_0x5587fe(0x1e0)](_0x27338e=>_0x27338e['battler']()[_0x5587fe(0x9ed)]-_0x27338e[_0x5587fe(0x1d5)]()[_0x5587fe(0x21c)]())),_0x28cccd=Math[_0x5587fe(0x2e0)](..._0x558e32['map'](_0x1fcdb5=>_0x1fcdb5[_0x5587fe(0x1d5)]()['_baseY'])),_0x5954c8=_0x558e32[_0x5587fe(0x921)](_0x117895=>_0x117895['isActor']())[_0x5587fe(0x60c)],_0x591c80=_0x558e32[_0x5587fe(0x921)](_0x5b0eef=>_0x5b0eef[_0x5587fe(0x8f2)]())[_0x5587fe(0x60c)];let _0x8ef546=0x0,_0x349e3f=0x0;if(_0x167cd0[_0x5587fe(0x453)](/front/i)){if(_0x5587fe(0x58b)!==_0x5587fe(0x58b)){const _0x2577fd=_0xafb111[_0x373c2b];if(!_0x2577fd)return![];if(_0x2577fd[_0x5587fe(0x5fc)][_0x5587fe(0x60c)]<=0x1)return![];return!![];}else _0x8ef546=_0x5954c8>=_0x591c80?_0x3f452e:_0x1d7748;}else{if(_0x167cd0[_0x5587fe(0x453)](/middle/i))_0x8ef546=(_0x3f452e+_0x1d7748)/0x2,_0x884b6c=-0x1;else _0x167cd0[_0x5587fe(0x453)](/back/i)&&(_0x5587fe(0x9a2)!==_0x5587fe(0x9a2)?this[_0x5587fe(0x2d2)]=[]:_0x8ef546=_0x5954c8>=_0x591c80?_0x1d7748:_0x3f452e);}if(_0x167cd0[_0x5587fe(0x453)](/head/i)){if(_0x5587fe(0x9d7)!=='SPXxh')return;else _0x349e3f=_0x4103cf;}else{if(_0x167cd0[_0x5587fe(0x453)](/center/i))_0x349e3f=(_0x4103cf+_0x28cccd)/0x2;else{if(_0x167cd0[_0x5587fe(0x453)](/base/i)){if(_0x5587fe(0x29c)!==_0x5587fe(0x29c)){if(this[_0x5587fe(0x457)]()==='border')return this['skillItemWindowRectBorderStyle']();else return this[_0x5587fe(0x883)]()?this[_0x5587fe(0x1fd)]():_0x263eea['BattleCore']['Scene_Battle_itemWindowRect'][_0x5587fe(0x4db)](this);}else _0x349e3f=_0x28cccd;}}}if(!_0x19254d)return;for(const _0x23c859 of _0x4b9ec2){if(!_0x23c859)continue;let _0x38a044=_0x8ef546,_0x22d871=_0x349e3f;if(_0x354b35['match'](/none/i))_0x38a044+=_0x14551e,_0x22d871+=_0x488e90;else{if(_0x354b35[_0x5587fe(0x453)](/horz/i)&&_0x354b35[_0x5587fe(0x453)](/vert/i))_0x5587fe(0x6da)===_0x5587fe(0x8e2)?(this['_stateSprite'][_0x5587fe(0x845)]['x']=0x1/(this[_0x5587fe(0x845)]['x']||0.001),this[_0x5587fe(0xbf)][_0x5587fe(0x845)]['y']=0x1/(this[_0x5587fe(0x845)]['y']||0.001)):(_0x38a044+=_0x23c859[_0x5587fe(0x5ef)]()?-_0x14551e:_0x14551e,_0x22d871+=_0x23c859[_0x5587fe(0x5ef)]()?-_0x488e90:_0x488e90);else{if(_0x354b35[_0x5587fe(0x453)](/horz/i))_0x38a044+=_0x23c859[_0x5587fe(0x5ef)]()?-_0x14551e:_0x14551e,_0x22d871+=_0x488e90;else{if(_0x354b35[_0x5587fe(0x453)](/vert/i)){if('afmsB'!==_0x5587fe(0x567))_0x38a044+=_0x14551e,_0x22d871+=_0x23c859['isActor']()?-_0x488e90:_0x488e90;else{const _0x15aa90=this['item'](),_0x3d48e4=_0x15aa90[_0x5587fe(0xb49)][_0x5587fe(0x15e)];_0x15aa90[_0x5587fe(0xb49)][_0x5587fe(0x15e)]=this[_0x5587fe(0x7a9)];let _0x48cf93=_0x4fd37a['BattleCore']['Game_Action_evalDamageFormula']['call'](this,_0x58b5b1);return _0x15aa90[_0x5587fe(0xb49)][_0x5587fe(0x15e)]=_0x3d48e4,_0x48cf93;}}}}}_0x23c859['moveBattlerToPoint'](_0x38a044,_0x22d871,_0x2da990,_0x238bbd,_0x492077,_0x884b6c),_0x23c859[_0x5587fe(0x85a)](_0x819d1f);}if(_0x137c2f)_0x19254d[_0x5587fe(0x20e)]('battleMove');}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],_0x3237d7(0x462),_0x3296f6=>{const _0x511eff=_0x3237d7;if(!SceneManager[_0x511eff(0x5cb)]())return;VisuMZ[_0x511eff(0x3d3)](_0x3296f6,_0x3296f6);const _0x3c06c3=$gameTemp[_0x511eff(0x968)](),_0x5e3adc=VisuMZ[_0x511eff(0x5e8)](_0x3296f6[_0x511eff(0x30e)]),_0x2a0288=_0x3296f6[_0x511eff(0x418)],_0x1eb767=_0x3296f6[_0x511eff(0x1e5)],_0x366a4f=_0x3296f6[_0x511eff(0x758)],_0xc796a5=_0x3296f6[_0x511eff(0x993)];if(!_0x3c06c3)return;for(const _0x42672e of _0x5e3adc){if(!_0x42672e)continue;_0x42672e['changeBattlerOpacity'](_0x2a0288,_0x1eb767,_0x366a4f);}if(_0xc796a5)_0x3c06c3[_0x511eff(0x20e)](_0x511eff(0x424));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Movement_Scale',_0x254bee=>{const _0x15fc5d=_0x3237d7;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x254bee,_0x254bee);const _0x58e835=$gameTemp[_0x15fc5d(0x968)](),_0x12e4ae=VisuMZ[_0x15fc5d(0x5e8)](_0x254bee[_0x15fc5d(0x30e)]),_0x45d9fc=_0x254bee[_0x15fc5d(0xb40)],_0x4bfe98=_0x254bee[_0x15fc5d(0x66d)],_0x5369ca=_0x254bee[_0x15fc5d(0x1e5)],_0x394e26=_0x254bee[_0x15fc5d(0x758)],_0x258eb0=_0x254bee[_0x15fc5d(0x188)];if(!_0x58e835)return;for(const _0x3c1478 of _0x12e4ae){if(!_0x3c1478)continue;_0x3c1478[_0x15fc5d(0x6c7)](_0x45d9fc,_0x4bfe98,_0x5369ca,_0x394e26);}if(_0x258eb0)_0x58e835[_0x15fc5d(0x20e)]('battleGrow');}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],'ActSeq_Movement_Skew',_0x5ae6ec=>{const _0x38e8f2=_0x3237d7;if(!SceneManager[_0x38e8f2(0x5cb)]())return;VisuMZ[_0x38e8f2(0x3d3)](_0x5ae6ec,_0x5ae6ec);const _0x3fb785=$gameTemp[_0x38e8f2(0x968)](),_0x43801b=VisuMZ[_0x38e8f2(0x5e8)](_0x5ae6ec[_0x38e8f2(0x30e)]),_0x10dc46=_0x5ae6ec[_0x38e8f2(0x99d)],_0x1c246e=_0x5ae6ec['SkewY'],_0x3e53cf=_0x5ae6ec[_0x38e8f2(0x1e5)],_0x47afcf=_0x5ae6ec[_0x38e8f2(0x758)],_0x2ab241=_0x5ae6ec[_0x38e8f2(0x615)];if(!_0x3fb785)return;for(const _0xf7ec8f of _0x43801b){if(!_0xf7ec8f)continue;_0xf7ec8f[_0x38e8f2(0x412)](_0x10dc46,_0x1c246e,_0x3e53cf,_0x47afcf);}if(_0x2ab241)_0x3fb785['setWaitMode'](_0x38e8f2(0x94f));}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],'ActSeq_Movement_Spin',_0x59c76c=>{const _0x318028=_0x3237d7;if(!SceneManager[_0x318028(0x5cb)]())return;VisuMZ[_0x318028(0x3d3)](_0x59c76c,_0x59c76c);const _0x595db5=$gameTemp[_0x318028(0x968)](),_0x2f26b0=VisuMZ[_0x318028(0x5e8)](_0x59c76c[_0x318028(0x30e)]),_0x534d8a=_0x59c76c['Angle'],_0x5462b0=_0x59c76c['Duration'],_0x424d49=_0x59c76c[_0x318028(0x758)],_0x4a0c60=_0x59c76c[_0x318028(0x643)],_0xb684d2=_0x59c76c[_0x318028(0x5ac)];if(!_0x595db5)return;for(const _0x19a199 of _0x2f26b0){if(!_0x19a199)continue;_0x19a199[_0x318028(0x82a)](_0x534d8a,_0x5462b0,_0x424d49,_0x4a0c60);}if(_0xb684d2)_0x595db5['setWaitMode'](_0x318028(0x3e5));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Movement_WaitForFloat',_0x3313d6=>{const _0x50f278=_0x3237d7;if(!SceneManager[_0x50f278(0x5cb)]())return;const _0x273080=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x273080)return;_0x273080[_0x50f278(0x20e)](_0x50f278(0x4fb));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Movement_WaitForJump',_0x4be32d=>{const _0x2bffbd=_0x3237d7;if(!SceneManager[_0x2bffbd(0x5cb)]())return;const _0x479cfb=$gameTemp[_0x2bffbd(0x968)]();if(!_0x479cfb)return;_0x479cfb['setWaitMode'](_0x2bffbd(0xae8));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x594),_0x3cbbfa=>{const _0x2139f1=_0x3237d7;if(!SceneManager[_0x2139f1(0x5cb)]())return;const _0x179f91=$gameTemp[_0x2139f1(0x968)]();if(!_0x179f91)return;_0x179f91['setWaitMode']('battleMove');}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xa75),_0x8656f5=>{const _0x563867=_0x3237d7;if(!SceneManager[_0x563867(0x5cb)]())return;const _0x19d4ea=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x19d4ea)return;_0x19d4ea[_0x563867(0x20e)](_0x563867(0x424));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x323),_0x4b97e7=>{const _0x5c9b1b=_0x3237d7;if(!SceneManager[_0x5c9b1b(0x5cb)]())return;const _0x41b82d=$gameTemp[_0x5c9b1b(0x968)]();if(!_0x41b82d)return;_0x41b82d[_0x5c9b1b(0x20e)](_0x5c9b1b(0x9c));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x1a9),_0x3e03fc=>{const _0x9c52d7=_0x3237d7;if(!SceneManager[_0x9c52d7(0x5cb)]())return;const _0x13d490=$gameTemp[_0x9c52d7(0x968)]();if(!_0x13d490)return;_0x13d490['setWaitMode'](_0x9c52d7(0x94f));}),PluginManager[_0x3237d7(0xe4)](pluginData['name'],'ActSeq_Movement_WaitForSpin',_0x3cde71=>{const _0x42dddb=_0x3237d7;if(!SceneManager[_0x42dddb(0x5cb)]())return;const _0x39b82f=$gameTemp[_0x42dddb(0x968)]();if(!_0x39b82f)return;_0x39b82f[_0x42dddb(0x20e)](_0x42dddb(0x3e5));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Projectile_Animation',_0x56cedc=>{const _0x23b45e=_0x3237d7;if(!SceneManager[_0x23b45e(0x5cb)]())return;if(!Imported[_0x23b45e(0x2b0)])return;VisuMZ[_0x23b45e(0x3d3)](_0x56cedc,_0x56cedc);const _0x5bd9f6=$gameTemp[_0x23b45e(0x968)](),_0x5ae157=_0x56cedc['WaitForProjectile'];if(!_0x5bd9f6)return;const _0xb94390=BattleManager['_spriteset'];if(!_0xb94390)return;_0xb94390[_0x23b45e(0xb07)](_0x56cedc);if(_0x5ae157)_0x5bd9f6[_0x23b45e(0x20e)](_0x23b45e(0x5ce));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Projectile_Icon',_0x44323a=>{const _0x15332a=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x15332a(0x2b0)])return;VisuMZ[_0x15332a(0x3d3)](_0x44323a,_0x44323a);const _0x37aeeb=$gameTemp[_0x15332a(0x968)](),_0x4801c4=_0x44323a['WaitForProjectile'];if(!_0x37aeeb)return;const _0x12d2bf=BattleManager[_0x15332a(0x314)];if(!_0x12d2bf)return;_0x12d2bf['createActionSequenceProjectile'](_0x44323a);if(_0x4801c4)_0x37aeeb[_0x15332a(0x20e)](_0x15332a(0x5ce));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x13a),_0x45f3e1=>{const _0x1c1afe=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c1afe(0x2b0)])return;VisuMZ['ConvertParams'](_0x45f3e1,_0x45f3e1);const _0x17201e=$gameTemp[_0x1c1afe(0x968)](),_0x1e1222=_0x45f3e1[_0x1c1afe(0x6b5)];if(!_0x17201e)return;const _0x16f437=BattleManager['_spriteset'];if(!_0x16f437)return;_0x16f437[_0x1c1afe(0xb07)](_0x45f3e1);if(_0x1e1222)_0x17201e[_0x1c1afe(0x20e)](_0x1c1afe(0x5ce));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x656),_0x44bd16=>{const _0x3751df=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3751df(0x255)])return;VisuMZ[_0x3751df(0x3d3)](_0x44bd16,_0x44bd16);const _0x2837cb=$gameTemp[_0x3751df(0x968)](),_0x47ff05=_0x44bd16[_0x3751df(0x615)];if(!_0x2837cb)return;$gameScreen[_0x3751df(0x25f)](_0x44bd16[_0x3751df(0x99d)],_0x44bd16[_0x3751df(0x18d)],_0x44bd16[_0x3751df(0x1e5)],_0x44bd16[_0x3751df(0x758)]);if(_0x47ff05)_0x2837cb[_0x3751df(0x20e)]('battleSkew');}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Skew_Reset',_0x18aca2=>{const _0x44263f=_0x3237d7;if(!SceneManager[_0x44263f(0x5cb)]())return;if(!Imported[_0x44263f(0x255)])return;VisuMZ[_0x44263f(0x3d3)](_0x18aca2,_0x18aca2);const _0x1e7786=$gameTemp[_0x44263f(0x968)](),_0x576deb=_0x18aca2[_0x44263f(0x615)];if(!_0x1e7786)return;$gameScreen[_0x44263f(0x25f)](0x0,0x0,_0x18aca2[_0x44263f(0x1e5)],_0x18aca2[_0x44263f(0x758)]);if(_0x576deb)_0x1e7786[_0x44263f(0x20e)]('battleSkew');}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x12c),_0x306977=>{const _0x31f8b2=_0x3237d7;if(!SceneManager[_0x31f8b2(0x5cb)]())return;if(!Imported[_0x31f8b2(0x255)])return;const _0x415748=$gameTemp[_0x31f8b2(0x968)]();if(!_0x415748)return;_0x415748[_0x31f8b2(0x20e)](_0x31f8b2(0x75f));}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],'ActSeq_Target_CurrentIndex',_0x176449=>{const _0x5909bd=_0x3237d7;if(!SceneManager[_0x5909bd(0x5cb)]())return;VisuMZ[_0x5909bd(0x3d3)](_0x176449,_0x176449);const _0x4644e3=$gameTemp['getLastPluginCommandInterpreter'](),_0x3651cb=_0x176449[_0x5909bd(0x6c0)],_0x21b77b=_0x176449['JumpToLabel'];if(!_0x4644e3)return;BattleManager['_targetIndex']=_0x3651cb,BattleManager[_0x5909bd(0x93f)]=BattleManager[_0x5909bd(0xabe)]?BattleManager[_0x5909bd(0xabe)][BattleManager[_0x5909bd(0x475)]]||null:null,BattleManager[_0x5909bd(0x93f)]&&_0x21b77b['toUpperCase']()[_0x5909bd(0x194)]()!==_0x5909bd(0xbc)&&_0x4644e3[_0x5909bd(0xa97)]([_0x21b77b]);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x284),_0x219d51=>{const _0x29f266=_0x3237d7;if(!SceneManager[_0x29f266(0x5cb)]())return;VisuMZ[_0x29f266(0x3d3)](_0x219d51,_0x219d51);const _0x579d72=$gameTemp[_0x29f266(0x968)](),_0x52a54d=_0x219d51['JumpToLabel'];if(!_0x579d72)return;BattleManager[_0x29f266(0x475)]++,BattleManager[_0x29f266(0x93f)]=BattleManager[_0x29f266(0xabe)][BattleManager['_targetIndex']]||null,BattleManager[_0x29f266(0x93f)]&&_0x52a54d['toUpperCase']()[_0x29f266(0x194)]()!==_0x29f266(0xbc)&&_0x579d72[_0x29f266(0xa97)]([_0x52a54d]);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x9f2),_0x4fb2a4=>{const _0x4073ee=_0x3237d7;if(!SceneManager[_0x4073ee(0x5cb)]())return;VisuMZ[_0x4073ee(0x3d3)](_0x4fb2a4,_0x4fb2a4);const _0x5c7a4e=$gameTemp[_0x4073ee(0x968)](),_0x545a4f=_0x4fb2a4[_0x4073ee(0x19a)];if(!_0x5c7a4e)return;BattleManager['_targetIndex']--,BattleManager[_0x4073ee(0x93f)]=BattleManager[_0x4073ee(0xabe)][BattleManager[_0x4073ee(0x475)]]||null,BattleManager['_target']&&_0x545a4f[_0x4073ee(0x566)]()[_0x4073ee(0x194)]()!==_0x4073ee(0xbc)&&_0x5c7a4e[_0x4073ee(0xa97)]([_0x545a4f]);}),PluginManager['registerCommand'](pluginData[_0x3237d7(0x444)],_0x3237d7(0xb6a),_0x12a3e8=>{const _0x31756c=_0x3237d7;if(!SceneManager[_0x31756c(0x5cb)]())return;VisuMZ[_0x31756c(0x3d3)](_0x12a3e8,_0x12a3e8);const _0x535add=$gameTemp[_0x31756c(0x968)](),_0x28cca3=_0x12a3e8[_0x31756c(0x43d)],_0x18b13c=_0x12a3e8[_0x31756c(0x19a)];if(!_0x535add)return;const _0x1ca9e5=BattleManager[_0x31756c(0x475)];for(;;){if(_0x31756c(0x50b)!==_0x31756c(0x50b))return 0x1;else{BattleManager[_0x31756c(0x475)]=Math['randomInt'](BattleManager[_0x31756c(0xabe)]['length']);if(!_0x28cca3)break;if(BattleManager[_0x31756c(0x475)]!==_0x1ca9e5)break;if(BattleManager[_0x31756c(0xabe)][_0x31756c(0x60c)]<=0x1){if(_0x31756c(0x44d)===_0x31756c(0xaf9)){this[_0x31756c(0x371)]=0x14,this[_0x31756c(0x694)]['bitmap']=_0x53efc4;_0x235022[_0x31756c(0x2a7)][_0x31756c(0x5e6)]()?(this[_0x31756c(0x694)]['x']=0x0,this[_0x31756c(0x4de)]=_0x486f0e['ceil'](_0x3b63e6[_0x31756c(0xa28)]/0x2)):(this['_borderPortraitSprite']['x']=this[_0x31756c(0xa28)],this[_0x31756c(0x4de)]=this[_0x31756c(0xa28)]*0x3/0x4);this[_0x31756c(0x694)][_0x31756c(0x61e)]=0x0,this[_0x31756c(0x694)]['y']=this['y']+this[_0x31756c(0x766)];const _0x33b37d=_0x4cd3e7['actor']();_0x33b37d&&(this['_borderPortraitTargetX']+=_0x33b37d[_0x31756c(0xad8)](),this[_0x31756c(0x694)]['y']+=_0x33b37d['getBattlePortraitOffsetY']());}else{BattleManager[_0x31756c(0x475)]=0x0;break;}}}}BattleManager[_0x31756c(0x93f)]=BattleManager['_allTargets'][BattleManager[_0x31756c(0x475)]]||null;if(BattleManager[_0x31756c(0x93f)]&&_0x18b13c[_0x31756c(0x566)]()['trim']()!==_0x31756c(0xbc)){if('LrDub'===_0x31756c(0xef))_0x535add[_0x31756c(0xa97)]([_0x18b13c]);else return this[_0x31756c(0x685)]()&&!this[_0x31756c(0x745)]()?this[_0x31756c(0x40d)]():_0x149889[_0x31756c(0xa4)][_0x31756c(0x700)][_0x31756c(0x4db)](this);}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xe9),_0x3feee3=>{const _0x5bb43e=_0x3237d7;if(!SceneManager[_0x5bb43e(0x5cb)]())return;VisuMZ[_0x5bb43e(0x3d3)](_0x3feee3,_0x3feee3);const _0xfd63a0=VisuMZ[_0x5bb43e(0x5e8)](_0x3feee3[_0x5bb43e(0x30e)]);for(const _0x1a6ee1 of _0xfd63a0){if(!_0x1a6ee1)continue;if(!_0x1a6ee1[_0x5bb43e(0x5ef)]())continue;_0x1a6ee1[_0x5bb43e(0x772)]();}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Weapon_NextActiveWeapon',_0x3186d7=>{const _0x31c6cc=_0x3237d7;if(!SceneManager[_0x31c6cc(0x5cb)]())return;VisuMZ[_0x31c6cc(0x3d3)](_0x3186d7,_0x3186d7);const _0x5348ed=$gameTemp['getLastPluginCommandInterpreter']();let _0xba0e0=![];const _0x5ca9fe=_0x3186d7[_0x31c6cc(0x19a)],_0x1834f2=VisuMZ[_0x31c6cc(0x5e8)](_0x3186d7[_0x31c6cc(0x30e)]);for(const _0x5da498 of _0x1834f2){if(_0x31c6cc(0x72d)!==_0x31c6cc(0x912)){if(!_0x5da498)continue;if(!_0x5da498['isActor']())continue;_0x5da498[_0x31c6cc(0x9fc)](),_0x5da498[_0x31c6cc(0x8cf)]()[_0x31c6cc(0x60c)]>0x0?_0xba0e0=!![]:_0x5da498[_0x31c6cc(0x772)]();}else _0xbdb612[_0x31c6cc(0xa4)][_0x31c6cc(0x9d8)][_0x31c6cc(0x4db)](this,_0x44b701),this[_0x31c6cc(0x4a1)]();}_0xba0e0&&_0x5ca9fe[_0x31c6cc(0x566)]()[_0x31c6cc(0x194)]()!==_0x31c6cc(0xbc)&&_0x5348ed[_0x31c6cc(0xa97)]([_0x5ca9fe]);}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0xa0b),_0x435251=>{const _0x2cf57d=_0x3237d7;if(!SceneManager[_0x2cf57d(0x5cb)]())return;VisuMZ[_0x2cf57d(0x3d3)](_0x435251,_0x435251);let _0x4ae213=_0x435251[_0x2cf57d(0x34e)];_0x4ae213--,_0x4ae213=Math['max'](_0x4ae213,0x0);const _0xf34b0=VisuMZ[_0x2cf57d(0x5e8)](_0x435251[_0x2cf57d(0x30e)]);for(const _0x59827c of _0xf34b0){if('smRRJ'==='smRRJ'){if(!_0x59827c)continue;if(!_0x59827c[_0x2cf57d(0x5ef)]())continue;_0x59827c[_0x2cf57d(0x4c4)](_0x4ae213);}else{if(!_0x1e5dbd[_0x2cf57d(0xa4)][_0x2cf57d(0x98d)][_0x2cf57d(0x10b)][_0x2cf57d(0x8c4)])return;_0x3a515e[_0x2cf57d(0xa4)][_0x2cf57d(0xa08)][_0x2cf57d(0x4db)](this,_0x2d8d7d);}}}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Zoom_Scale',_0x2bf2b7=>{const _0x386c1b=_0x3237d7;if(!SceneManager[_0x386c1b(0x5cb)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x386c1b(0x3d3)](_0x2bf2b7,_0x2bf2b7);const _0x37302f=$gameTemp[_0x386c1b(0x968)](),_0x4e171f=_0x2bf2b7[_0x386c1b(0x36e)];if(!_0x37302f)return;$gameScreen[_0x386c1b(0x6b3)](_0x2bf2b7[_0x386c1b(0x648)],_0x2bf2b7[_0x386c1b(0x1e5)],_0x2bf2b7[_0x386c1b(0x758)]);if(_0x4e171f)_0x37302f[_0x386c1b(0x20e)](_0x386c1b(0x876));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],_0x3237d7(0x1cf),_0x451915=>{const _0x3ba228=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3ba228(0x3d3)](_0x451915,_0x451915);const _0x55a8c7=$gameTemp[_0x3ba228(0x968)](),_0x77f4eb=_0x451915[_0x3ba228(0x36e)];if(!_0x55a8c7)return;$gameScreen[_0x3ba228(0x6b3)](0x1,_0x451915[_0x3ba228(0x1e5)],_0x451915[_0x3ba228(0x758)]);if(_0x77f4eb)_0x55a8c7[_0x3ba228(0x20e)](_0x3ba228(0x876));}),PluginManager[_0x3237d7(0xe4)](pluginData[_0x3237d7(0x444)],'ActSeq_Zoom_WaitForZoom',_0x23e70d=>{const _0x4f0139=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x15449d=$gameTemp[_0x4f0139(0x968)]();if(!_0x15449d)return;_0x15449d[_0x4f0139(0x20e)](_0x4f0139(0x876));}),VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x4c6)]=Scene_Boot['prototype'][_0x3237d7(0x684)],Scene_Boot[_0x3237d7(0x735)]['onDatabaseLoaded']=function(){const _0x5889cf=_0x3237d7;this[_0x5889cf(0x9a9)](),this[_0x5889cf(0x6b4)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x5889cf(0x810)](),VisuMZ[_0x5889cf(0xa4)][_0x5889cf(0x4c6)][_0x5889cf(0x4db)](this),this[_0x5889cf(0x5c7)](),this[_0x5889cf(0x172)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x5889cf(0x2e4)]();},Scene_Boot[_0x3237d7(0x735)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x42dee0=_0x3237d7;if(VisuMZ[_0x42dee0(0x8a3)])return;this[_0x42dee0(0xa80)](),this[_0x42dee0(0x324)](),this[_0x42dee0(0x875)]();},Scene_Boot[_0x3237d7(0x735)][_0x3237d7(0x9a9)]=function(){const _0x30516a=_0x3237d7,_0x51c764=$dataSystem[_0x30516a(0x6e7)][_0x30516a(0x60c)];for(let _0x2607a6=0x0;_0x2607a6<_0x51c764;_0x2607a6++){if(_0x30516a(0x805)!==_0x30516a(0x184)){const _0x45af5a=$dataSystem[_0x30516a(0x8f3)][_0x2607a6];if(_0x45af5a)continue;$dataSystem[_0x30516a(0x8f3)][_0x2607a6]=JsonEx[_0x30516a(0xa88)]($dataSystem['attackMotions'][0x0]);}else this[_0x30516a(0xb1)]=_0x30516a(0x195);}},Scene_Boot['prototype'][_0x3237d7(0x6b4)]=function(){const _0x1e9539=_0x3237d7,_0xf73b97=VisuMZ[_0x1e9539(0xa4)][_0x1e9539(0x98d)];_0xf73b97[_0x1e9539(0x626)][_0x1e9539(0xb41)]===undefined&&(_0xf73b97[_0x1e9539(0x626)][_0x1e9539(0xb41)]=_0x1e9539(0x461));if(_0xf73b97[_0x1e9539(0x4da)]['SmoothImage']===undefined){if('aAEjO'===_0x1e9539(0xa1d)){this[_0x1e9539(0x118)]=new _0x714dba();for(let _0xb361c4=0x0;_0xb361c4<0x9;_0xb361c4++){this[_0x1e9539(0x118)][_0x1e9539(0x70d)](new _0x5e7234());}this[_0x1e9539(0xa02)][_0x1e9539(0x70d)](this[_0x1e9539(0x118)]);}else _0xf73b97[_0x1e9539(0x4da)][_0x1e9539(0xb7)]=![];}_0xf73b97[_0x1e9539(0x754)][_0x1e9539(0xb7)]===undefined&&(_0xf73b97[_0x1e9539(0x754)][_0x1e9539(0xb7)]=!![]);if(_0xf73b97[_0x1e9539(0x4da)][_0x1e9539(0x6a6)]===undefined){if(_0x1e9539(0xb2e)==='rlmQU'){const _0x441b71=_0x549a2f['floor'](_0x326997[_0x1e9539(0xa28)]/0x3),_0x510100=this[_0x1e9539(0x5e6)]()?(_0x5bcfe9[_0x1e9539(0xa28)]+_0x825c3c[_0x1e9539(0x63d)])/0x2-_0x441b71:(_0x5af9f2['width']-_0x2e2dc5[_0x1e9539(0x63d)])/-0x2,_0x5b0aa5=this[_0x1e9539(0xa8d)](),_0x5a7fa6=_0x5b0aa5['y']+_0x5b0aa5[_0x1e9539(0x766)],_0xb7b694=this[_0x1e9539(0xa48)](),_0xd53477=_0xb7b694['y']-_0x5a7fa6;return new _0x765c94(_0x510100,_0x5a7fa6,_0x441b71,_0xd53477);}else _0xf73b97[_0x1e9539(0x4da)]['PrioritySortActive']=![];}_0xf73b97[_0x1e9539(0x4da)][_0x1e9539(0x19f)]===undefined&&(_0xf73b97['Actor'][_0x1e9539(0x19f)]=!![]);},VisuMZ[_0x3237d7(0x5f5)]={},Scene_Boot[_0x3237d7(0x735)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x27f2ea=_0x3237d7;for(const _0x5e80a4 of VisuMZ[_0x27f2ea(0xa4)][_0x27f2ea(0x98d)][_0x27f2ea(0x626)]['DamageStyleList']){if('jjEjn'===_0x27f2ea(0x8b5)){if(!_0x5e80a4)continue;const _0xde53ba=_0x5e80a4['Name'][_0x27f2ea(0x566)]()['trim']();VisuMZ[_0x27f2ea(0x5f5)][_0xde53ba]=_0x5e80a4;}else return!![];}},VisuMZ['BattleCore']['RegExp']={},Scene_Boot[_0x3237d7(0x735)][_0x3237d7(0x810)]=function(){const _0x4f714b=_0x3237d7,_0x545592=VisuMZ[_0x4f714b(0xa4)][_0x4f714b(0x8d4)],_0x2a680a=_0x4f714b(0x5bc),_0x5e0771=[[_0x4f714b(0xa8c),_0x4f714b(0x278)],['Post',_0x4f714b(0x97a)]],_0x310f50=[[_0x4f714b(0x952),_0x4f714b(0x668)],[_0x4f714b(0x787),_0x4f714b(0x6a0)]],_0x23a8a6=[['',''],[_0x4f714b(0x60e),_0x4f714b(0x9e7)],[_0x4f714b(0x5e5),'AS\x20TARGET']];for(const _0xee42b8 of _0x310f50){for(const _0x38b199 of _0x23a8a6){if(_0x4f714b(0xa07)==='EBbWA')_0x3a70d1[_0x4f714b(0x735)][_0x4f714b(0xb0c)][_0x4f714b(0x4db)](this),this[_0x4f714b(0x85a)]('evade');else for(const _0x1acf02 of _0x5e0771){const _0xe09fbc=_0xee42b8[0x0][_0x4f714b(0x117)](_0x1acf02[0x0],_0x38b199[0x0]),_0x19d1a6=_0xee42b8[0x1][_0x4f714b(0x117)](_0x1acf02[0x1],_0x38b199[0x1])[_0x4f714b(0x194)](),_0x86c8b0=new RegExp(_0x2a680a[_0x4f714b(0x117)](_0x19d1a6),'i');_0x545592[_0xe09fbc]=_0x86c8b0;}}}const _0x44d539=[[_0x4f714b(0x89e),_0x4f714b(0x918)],['%1EndActionJS',_0x4f714b(0x206)]];for(const _0x2d0162 of _0x44d539){for(const _0x2bc61f of _0x5e0771){const _0x4d00c9=_0x2d0162[0x0]['format'](_0x2bc61f[0x0]),_0x5e89d7=_0x2d0162[0x1][_0x4f714b(0x117)](_0x2bc61f[0x1]),_0x5ea16e=new RegExp(_0x2a680a[_0x4f714b(0x117)](_0x5e89d7),'i');_0x545592[_0x4d00c9]=_0x5ea16e;}}const _0x346560=[[_0x4f714b(0xb09),_0x4f714b(0x92e)],[_0x4f714b(0x743),_0x4f714b(0x68f)],[_0x4f714b(0x95e),_0x4f714b(0x976)],[_0x4f714b(0xe1),_0x4f714b(0x4c8)],[_0x4f714b(0x65c),'JS\x20ESCAPE\x20SUCCESS'],[_0x4f714b(0x47e),_0x4f714b(0x410)],[_0x4f714b(0x599),_0x4f714b(0xb48)],[_0x4f714b(0x44f),_0x4f714b(0x4a8)],['%1RegenerateJS',_0x4f714b(0xd3)]];for(const _0x3090fa of _0x346560){if(_0x4f714b(0x8c8)!==_0x4f714b(0x91a))for(const _0xec6804 of _0x5e0771){if('icedS'!==_0x4f714b(0x8f9)){const _0x578abb=_0x3090fa[0x0][_0x4f714b(0x117)](_0xec6804[0x0]),_0x3e5e19=_0x3090fa[0x1][_0x4f714b(0x117)](_0xec6804[0x1]),_0x271808=new RegExp(_0x2a680a['format'](_0x3e5e19),'i');_0x545592[_0x578abb]=_0x271808;}else delete _0x56ee21[_0x4f714b(0x842)][_0x4f714b(0x8f7)];}else _0x263d77['BattleCore'][_0x4f714b(0xe2)]['call'](this),this['clearOnceParallelInterpreters']();}},Scene_Boot['prototype'][_0x3237d7(0xa80)]=function(){const _0x2a57d3=_0x3237d7,_0x59d100=$dataSkills['concat']($dataItems);for(const _0x5622da of _0x59d100){if(_0x2a57d3(0x73f)!==_0x2a57d3(0x73f))_0x1e2201[_0x2a57d3(0x20e)](_0x2a57d3(0x785));else{if(!_0x5622da)continue;VisuMZ[_0x2a57d3(0xa4)][_0x2a57d3(0x9ff)](_0x5622da);}}},Scene_Boot[_0x3237d7(0x735)][_0x3237d7(0x324)]=function(){const _0x2ccd8b=_0x3237d7,_0x2f1a31=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x2a7912 of _0x2f1a31){if(!_0x2a7912)continue;VisuMZ[_0x2ccd8b(0xa4)][_0x2ccd8b(0xcb)](_0x2a7912);}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x3ff15b=_0x3237d7,_0x5bfb92=VisuMZ[_0x3ff15b(0xa4)]['Settings'][_0x3ff15b(0x87c)][_0x3ff15b(0x359)],_0x3ba9d9=[];for(const _0x24d88e of _0x5bfb92){const _0x15ac3c=$dataTroops[_0x24d88e];if(_0x15ac3c)_0x3ba9d9[_0x3ff15b(0x857)](JsonEx['makeDeepCopy'](_0x15ac3c));}for(const _0x3f8659 of $dataTroops){if('zXEsf'!==_0x3ff15b(0x162)){const _0xbe8200=_0x22f340['VisuMZ_1_SkillsStatesCore']?_0x433284['SkillsStatesCore']['Settings'][_0x3ff15b(0x637)]:_0x512c13[_0x3ff15b(0xa4)][_0x3ff15b(0x98d)][_0x3ff15b(0x4c5)],_0x97cacf=_0x3c6797[_0x3ff15b(0xd6)]['includes'](_0x1d8e4a),_0x26ac35=_0x97cacf?_0xbe8200[_0x3ff15b(0x914)]:_0xbe8200['IconStypeNorm'];_0x5d2b9b='\x5cI[%1]%2'[_0x3ff15b(0x117)](_0x26ac35,_0x25d07a);}else{if(!_0x3f8659)continue;for(const _0x4b0c92 of _0x3ba9d9){if(_0x4b0c92['id']===_0x3f8659['id'])continue;_0x3f8659[_0x3ff15b(0x1fa)]=_0x3f8659[_0x3ff15b(0x1fa)][_0x3ff15b(0x169)](_0x4b0c92[_0x3ff15b(0x1fa)]);}}}},Scene_Boot[_0x3237d7(0x735)][_0x3237d7(0x29d)]=function(){const _0x4b81e1=_0x3237d7,_0x24fe90=VisuMZ[_0x4b81e1(0xa4)]['Settings']['Mechanics'];if(_0x24fe90[_0x4b81e1(0x16b)]>0x0&&$dataCommonEvents[_0x24fe90[_0x4b81e1(0x16b)]]){const _0x9f101b=$dataCommonEvents[_0x24fe90['BattleStartEvent']],_0x4d4a87=_0x9f101b[_0x4b81e1(0x5fc)][_0x4b81e1(0x60c)]-0x2,_0x1b6704=_0x9f101b['list'][_0x4d4a87];if(_0x1b6704&&_0x1b6704['code']!==0xe6){const _0x27ddde={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x4f7418=_0x9f101b[_0x4b81e1(0x5fc)][_0x4b81e1(0x180)]();_0x9f101b['list'][_0x4b81e1(0x6f9)](_0x27ddde),_0x9f101b['list'][_0x4b81e1(0x6f9)](_0x4f7418);}}},Scene_Boot[_0x3237d7(0x735)]['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x2c48a3=_0x3237d7;VisuMZ[_0x2c48a3(0xa4)]['CreateCommonEventKeys'](),VisuMZ[_0x2c48a3(0xa4)][_0x2c48a3(0x3ac)]($dataSkills),VisuMZ['BattleCore']['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x3237d7(0xa4)]['CreateCommonEventKeys']=function(){const _0x103335=_0x3237d7;VisuMZ[_0x103335(0xa4)][_0x103335(0x1a0)]={};for(const _0x486a18 of $dataCommonEvents){if(!_0x486a18)continue;if(_0x486a18[_0x103335(0x444)][_0x103335(0x453)](/\[(.*)\]/i)){if(_0x103335(0x31e)===_0x103335(0xa8f)){if(!_0xeac4a2['isSideView']())return;const _0x491866=this[_0x103335(0x1d5)]();if(!_0x491866)return;_0x2fa9e0=_0x482c5b||0x0;if(_0x3c5584>0x0){if(_0x491866[_0x103335(0x642)]>_0x35a2fe)_0x3fcde8+=_0x491866['width']/0x2+_0x183c87;if(_0x491866[_0x103335(0x642)]<_0x39fa21)_0x5c766d-=_0x491866[_0x103335(0xa28)]/0x2+_0x6152f;}if(_0x45e20e)this[_0x103335(0x18b)](_0x1da2ad,_0x15f7a6,![]);_0x491866[_0x103335(0x8d2)](_0x8fc1a5,_0x4376a5,_0x4715b5,_0x865917),this['_forcedHomeX']=_0x3dbfcf,this['_forcedHomeY']=_0x3fec25;}else{let _0x218a94=String(RegExp['$1'])['replace'](/,/g,'')[_0x103335(0x566)]()['trim']();VisuMZ[_0x103335(0xa4)][_0x103335(0x1a0)][_0x218a94]=_0x486a18['id'];}}}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x3ac)]=function(_0x40e349){for(const _0x377237 of _0x40e349){if(!_0x377237)continue;VisuMZ['BattleCore']['BindCommonEventKeysForObj'](_0x377237);}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x16d)]=function(_0x46fe06){const _0x85085d=_0x3237d7;if(!_0x46fe06)return;if(!_0x46fe06[_0x85085d(0xb61)])return;VisuMZ[_0x85085d(0xa4)][_0x85085d(0x1a0)]=VisuMZ[_0x85085d(0xa4)]['_commonEventKey']||{};const _0x47122e=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x356b22=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x2c66e7=[];const _0x2329b2=_0x46fe06[_0x85085d(0x4fe)][_0x85085d(0x453)](_0x47122e);if(_0x2329b2){for(const _0x1e17cf of _0x2329b2){_0x1e17cf[_0x85085d(0x453)](_0x47122e);const _0x11fb0e=String(RegExp['$1'])[_0x85085d(0x2cf)](',')['map'](_0x3e5c62=>String(_0x3e5c62)[_0x85085d(0x566)]()[_0x85085d(0x194)]());_0x2c66e7=_0x2c66e7[_0x85085d(0x169)](_0x11fb0e);}!_0x46fe06['note'][_0x85085d(0x453)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x46fe06['note']+=_0x85085d(0xa7b));;}if(_0x46fe06['note'][_0x85085d(0x453)](_0x356b22)){const _0x79d34f=String(RegExp['$1'])[_0x85085d(0x2cf)](/[\r\n]+/)[_0x85085d(0x1e0)](_0x4ebe80=>String(_0x4ebe80)[_0x85085d(0x566)]()[_0x85085d(0x194)]());_0x2c66e7=_0x2c66e7[_0x85085d(0x169)](_0x79d34f);if(!_0x46fe06[_0x85085d(0x4fe)][_0x85085d(0x453)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x85085d(0x398)!=='wsmTw')return _0x5e460f(_0x4e8b90['$1'])*0.01;else _0x46fe06[_0x85085d(0x4fe)]+='<CUSTOM\x20ACTION\x20SEQUENCE>';};}for(const _0x17689f of _0x2c66e7){if(_0x85085d(0xa72)===_0x85085d(0x936)){if([0x6c,0x198][_0x85085d(0x231)](_0x4ef52c[_0x85085d(0xb3c)])){const _0x3dd1fc=_0x129caf[_0x85085d(0x149)][0x0];if(_0x3dd1fc[_0x85085d(0x453)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}else{if(VisuMZ[_0x85085d(0xa4)]['_commonEventKey'][_0x17689f]){if(_0x85085d(0x9cd)!==_0x85085d(0x6f8)){const _0x578a78=VisuMZ['BattleCore'][_0x85085d(0x1a0)][_0x17689f],_0x5421ae={'code':0x2c,'dataId':_0x578a78,'value1':0x1,'value2':0x0};_0x46fe06[_0x85085d(0xb61)][_0x85085d(0x857)](_0x5421ae);}else return _0x58388c[_0x85085d(0xa4)][_0x85085d(0x6bb)]['call'](this);}}}},Scene_Boot[_0x3237d7(0x735)]['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x32e569=_0x3237d7,_0x4738d8=$dataSkills['concat']($dataItems);for(const _0x4fcc55 of _0x4738d8){if(!_0x4fcc55)continue;VisuMZ[_0x32e569(0xa4)][_0x32e569(0xad1)](_0x4fcc55);}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x1d1)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x3237d7(0x1d1)]=function(_0xa4145){const _0x24d6ae=_0x3237d7;if(VisuMZ[_0x24d6ae(0xa4)][_0x24d6ae(0x1d1)]){if(_0x24d6ae(0x19c)===_0x24d6ae(0x517)){const _0x76584d=_0x24d6ae(0x861);let _0x3ed7d3=_0x1ea9f0[_0x24d6ae(0xb3d)],_0x5171b5=_0x1c8fe7[_0x24d6ae(0x444)];const _0x3df91e=_0x3e99c5['note'];return _0x3df91e[_0x24d6ae(0x453)](/<DISPLAY ICON: (\d+)>/i)&&(_0x3ed7d3=_0x53c4cd(_0x5ae900['$1'])),_0x3df91e['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x5171b5=_0x203b21(_0x2227f7['$1'])),_0x76584d[_0x24d6ae(0x117)](_0x3ed7d3,_0x5171b5);}else VisuMZ['BattleCore']['ParseActorNotetags'][_0x24d6ae(0x4db)](this,_0xa4145);}VisuMZ[_0x24d6ae(0xa4)][_0x24d6ae(0xcb)](_0xa4145);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x5bd)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x3237d7(0x5bd)]=function(_0x295b64){const _0x4b94b7=_0x3237d7;VisuMZ[_0x4b94b7(0xa4)][_0x4b94b7(0x5bd)]&&VisuMZ[_0x4b94b7(0xa4)][_0x4b94b7(0x5bd)][_0x4b94b7(0x4db)](this,_0x295b64),VisuMZ['BattleCore'][_0x4b94b7(0xcb)](_0x295b64);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x2a4)]=VisuMZ[_0x3237d7(0x2a4)],VisuMZ['ParseSkillNotetags']=function(_0x4e3566){const _0x19b7c2=_0x3237d7;VisuMZ[_0x19b7c2(0xa4)]['ParseSkillNotetags']&&VisuMZ[_0x19b7c2(0xa4)][_0x19b7c2(0x2a4)][_0x19b7c2(0x4db)](this,_0x4e3566),VisuMZ['BattleCore'][_0x19b7c2(0x9ff)](_0x4e3566),VisuMZ[_0x19b7c2(0xa4)][_0x19b7c2(0xad1)](_0x4e3566);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x6f1)]=VisuMZ[_0x3237d7(0x6f1)],VisuMZ[_0x3237d7(0x6f1)]=function(_0x227fc3){const _0x1836cc=_0x3237d7;VisuMZ['BattleCore'][_0x1836cc(0x6f1)]&&VisuMZ[_0x1836cc(0xa4)][_0x1836cc(0x6f1)][_0x1836cc(0x4db)](this,_0x227fc3),VisuMZ[_0x1836cc(0xa4)]['Parse_Notetags_Action'](_0x227fc3),VisuMZ[_0x1836cc(0xa4)][_0x1836cc(0xad1)](_0x227fc3);},VisuMZ[_0x3237d7(0xa4)]['ParseWeaponNotetags']=VisuMZ[_0x3237d7(0x3f6)],VisuMZ['ParseWeaponNotetags']=function(_0x319111){const _0x194b56=_0x3237d7;if(VisuMZ[_0x194b56(0xa4)][_0x194b56(0x3f6)]){if(_0x194b56(0x9d0)===_0x194b56(0x9d0))VisuMZ[_0x194b56(0xa4)][_0x194b56(0x3f6)][_0x194b56(0x4db)](this,_0x319111);else return this[_0x194b56(0x685)]()&&!this[_0x194b56(0x745)]()?this[_0x194b56(0x53d)]():_0x44ca68[_0x194b56(0xa4)][_0x194b56(0x299)][_0x194b56(0x4db)](this);}VisuMZ['BattleCore'][_0x194b56(0xcb)](_0x319111);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x273)]=VisuMZ[_0x3237d7(0x273)],VisuMZ[_0x3237d7(0x273)]=function(_0xe2766b){const _0x142050=_0x3237d7;VisuMZ[_0x142050(0xa4)][_0x142050(0x273)]&&(_0x142050(0x1a8)!=='ejHHm'?(this[_0x142050(0xb34)]()?(this['_statusWindow']['show'](),this[_0x142050(0x988)][_0x142050(0x181)](),this['_actorCommandWindow']['activate']()):_0x4a41ea['BattleCore']['Scene_Battle_onEnemyCancel'][_0x142050(0x4db)](this),this[_0x142050(0x2ac)]()):VisuMZ[_0x142050(0xa4)][_0x142050(0x273)]['call'](this,_0xe2766b)),VisuMZ[_0x142050(0xa4)][_0x142050(0xcb)](_0xe2766b);},VisuMZ['BattleCore'][_0x3237d7(0x925)]=VisuMZ[_0x3237d7(0x925)],VisuMZ['ParseEnemyNotetags']=function(_0x18d932){const _0x4a77a8=_0x3237d7;if(VisuMZ[_0x4a77a8(0xa4)]['ParseEnemyNotetags']){if(_0x4a77a8(0x102)!=='aDiHE'){if(!_0x4184a7[_0x4a77a8(0x5cb)]())return;const _0x49eeb1=_0xf2fd71[_0x4a77a8(0x968)]();if(!_0x49eeb1)return;_0x49eeb1[_0x4a77a8(0x20e)](_0x4a77a8(0x785));}else VisuMZ[_0x4a77a8(0xa4)]['ParseEnemyNotetags'][_0x4a77a8(0x4db)](this,_0x18d932);}VisuMZ[_0x4a77a8(0xa4)][_0x4a77a8(0xcb)](_0x18d932);},VisuMZ['BattleCore'][_0x3237d7(0x57c)]=VisuMZ[_0x3237d7(0x57c)],VisuMZ[_0x3237d7(0x57c)]=function(_0x40aab2){const _0xccbc39=_0x3237d7;VisuMZ[_0xccbc39(0xa4)][_0xccbc39(0x57c)]&&VisuMZ[_0xccbc39(0xa4)][_0xccbc39(0x57c)][_0xccbc39(0x4db)](this,_0x40aab2),VisuMZ[_0xccbc39(0xa4)]['Parse_Notetags_TraitObjects'](_0x40aab2);},VisuMZ['BattleCore']['Parse_Notetags_Action']=function(_0x1742e1){const _0x51ff8d=_0x3237d7,_0x52f9d8=[_0x51ff8d(0xb5f),'PostApplyJS',_0x51ff8d(0x237),'PostDamageJS','PreStartActionJS',_0x51ff8d(0xb46),_0x51ff8d(0x707),_0x51ff8d(0x4ae)];for(const _0x373dda of _0x52f9d8){VisuMZ[_0x51ff8d(0xa4)][_0x51ff8d(0xac7)](_0x1742e1,_0x373dda);}const _0x1e1ada=_0x1742e1[_0x51ff8d(0x4fe)];if(_0x1e1ada[_0x51ff8d(0x453)](/<ALWAYS CRITICAL/i)){if(_0x51ff8d(0x9c9)===_0x51ff8d(0x9c9))_0x1742e1[_0x51ff8d(0xb49)]['critical']=!![];else{if(!_0x4f4a99[_0x51ff8d(0x2a7)])return;if(!_0x59eafd[_0x51ff8d(0x2a7)][_0x51ff8d(0x314)])return;if(!_0x1a8600[_0x51ff8d(0x38d)])return;_0x33a47d[_0x51ff8d(0x3d3)](_0x46f5e8,_0x544303);const _0x3c510c=_0x472c93['getLastPluginCommandInterpreter'](),_0x273e2f=_0x524f2c[_0x51ff8d(0x222)](_0x5a5c03[_0x51ff8d(0x7f0)]),_0x2b0e7d=_0x1c102d[_0x51ff8d(0x222)](_0xc7fa5e[_0x51ff8d(0x138)]);_0xbc58aa[_0x51ff8d(0x247)](_0x273e2f,_0x2b0e7d,_0x5bc4ef[_0x51ff8d(0xaf1)],_0x589a27['Mirror'],_0x4eb76d[_0x51ff8d(0x531)]),_0x15c722[_0x51ff8d(0x5bb)]&&_0x3c510c&&(_0x4e55fa[_0x51ff8d(0x2a7)][_0x51ff8d(0x314)][_0x51ff8d(0xb52)](),_0x3c510c[_0x51ff8d(0x20e)]('battleAnimation'));}}_0x1e1ada[_0x51ff8d(0x453)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x51ff8d(0xa7e)!=='EYllD'?_0x1742e1['repeats']=Math[_0x51ff8d(0x2e0)](0x1,Number(RegExp['$1'])):_0x33968c[_0x51ff8d(0xa4)]['Scene_Battle_commandFight'][_0x51ff8d(0x4db)](this)),_0x1e1ada[_0x51ff8d(0x453)](/<TARGET:[ ](.*)>/i)&&(_0x1742e1[_0x51ff8d(0xa89)]=String(RegExp['$1'])[_0x51ff8d(0x566)]()[_0x51ff8d(0x194)]());},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xcb)]=function(_0x5dea90){const _0x24b599=_0x3237d7,_0x5b92ba=[_0x24b599(0x9da),_0x24b599(0x397),'PreDamageAsUserJS',_0x24b599(0x32d),_0x24b599(0xa25),_0x24b599(0x497),'PreDamageAsTargetJS',_0x24b599(0x9de),_0x24b599(0x677),'PostStartActionJS',_0x24b599(0x707),'PostEndActionJS',_0x24b599(0x827),_0x24b599(0x89a),_0x24b599(0x477),_0x24b599(0x836),_0x24b599(0x95e),_0x24b599(0xe1),_0x24b599(0x65c),_0x24b599(0x47e),'PreStartTurnJS',_0x24b599(0x253),'PreEndTurnJS',_0x24b599(0x663),_0x24b599(0x16e),_0x24b599(0x84b)];for(const _0x3818f1 of _0x5b92ba){VisuMZ['BattleCore'][_0x24b599(0xac7)](_0x5dea90,_0x3818f1);}},VisuMZ[_0x3237d7(0xa4)]['Parse_Notetags_Targets']=function(_0x4efe64){const _0x5962f7=_0x3237d7,_0x3e2ded=_0x4efe64['note'];if(_0x3e2ded['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x265c89=String(RegExp['$1']),_0x377b67=VisuMZ[_0x5962f7(0xa4)][_0x5962f7(0x17e)](_0x4efe64,_0x5962f7(0x30e));VisuMZ[_0x5962f7(0xa4)][_0x5962f7(0xa05)](_0x265c89,_0x377b67);}if(_0x3e2ded['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0xd57ed0=String(RegExp['$1']),_0x106405=VisuMZ[_0x5962f7(0xa4)][_0x5962f7(0x17e)](_0x4efe64,_0x5962f7(0x601));VisuMZ[_0x5962f7(0xa4)][_0x5962f7(0x305)](_0xd57ed0,_0x106405);}},VisuMZ['BattleCore']['JS']={},VisuMZ['BattleCore'][_0x3237d7(0xac7)]=function(_0x5b94f8,_0xbb7028){const _0x10e59f=_0x3237d7,_0x3ba6cd=_0x5b94f8[_0x10e59f(0x4fe)];if(_0x3ba6cd['match'](VisuMZ[_0x10e59f(0xa4)][_0x10e59f(0x8d4)][_0xbb7028])){const _0x13499e=RegExp['$1'],_0x4f58fa=_0x10e59f(0x9e6)[_0x10e59f(0x117)](_0x13499e),_0x552e49=VisuMZ[_0x10e59f(0xa4)]['createKeyJS'](_0x5b94f8,_0xbb7028);VisuMZ['BattleCore']['JS'][_0x552e49]=new Function(_0x4f58fa);}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x17e)]=function(_0x448ac8,_0x16a83d){const _0x3b7914=_0x3237d7;let _0x24a1fb='';if($dataActors[_0x3b7914(0x231)](_0x448ac8))_0x24a1fb=_0x3b7914(0x21f)[_0x3b7914(0x117)](_0x448ac8['id'],_0x16a83d);if($dataClasses['includes'](_0x448ac8))_0x24a1fb=_0x3b7914(0x496)[_0x3b7914(0x117)](_0x448ac8['id'],_0x16a83d);if($dataSkills[_0x3b7914(0x231)](_0x448ac8))_0x24a1fb=_0x3b7914(0x8fe)['format'](_0x448ac8['id'],_0x16a83d);if($dataItems[_0x3b7914(0x231)](_0x448ac8))_0x24a1fb=_0x3b7914(0x1d8)[_0x3b7914(0x117)](_0x448ac8['id'],_0x16a83d);if($dataWeapons[_0x3b7914(0x231)](_0x448ac8))_0x24a1fb='Weapon-%1-%2'['format'](_0x448ac8['id'],_0x16a83d);if($dataArmors['includes'](_0x448ac8))_0x24a1fb=_0x3b7914(0x4e7)[_0x3b7914(0x117)](_0x448ac8['id'],_0x16a83d);if($dataEnemies[_0x3b7914(0x231)](_0x448ac8))_0x24a1fb=_0x3b7914(0x58d)[_0x3b7914(0x117)](_0x448ac8['id'],_0x16a83d);if($dataStates['includes'](_0x448ac8))_0x24a1fb=_0x3b7914(0xa11)[_0x3b7914(0x117)](_0x448ac8['id'],_0x16a83d);return _0x24a1fb;},VisuMZ[_0x3237d7(0xa4)]['createTargetsJS']=function(_0x93aa3e,_0x2943df){const _0x44f6b9=_0x3237d7,_0x410e27=_0x44f6b9(0x3bd)[_0x44f6b9(0x117)](_0x93aa3e);VisuMZ[_0x44f6b9(0xa4)]['JS'][_0x2943df]=new Function(_0x410e27);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x305)]=function(_0x2f3201,_0x3cb016){const _0x1cd84b=_0x3237d7,_0x31e072=_0x1cd84b(0x4a7)[_0x1cd84b(0x117)](_0x2f3201);VisuMZ[_0x1cd84b(0xa4)]['JS'][_0x3cb016]=new Function(_0x31e072);},TextManager[_0x3237d7(0x223)]=VisuMZ[_0x3237d7(0xa4)]['Settings']['PartyCmd'][_0x3237d7(0xade)],TextManager[_0x3237d7(0x14f)]=VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x98d)][_0x3237d7(0x811)]['StartName'],TextManager[_0x3237d7(0xed)]=VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x98d)][_0x3237d7(0x811)][_0x3237d7(0x5de)],TextManager[_0x3237d7(0x59b)]=VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x98d)][_0x3237d7(0x3c0)][_0x3237d7(0x751)],ColorManager[_0x3237d7(0x508)]=function(_0xca0235){const _0x324668=_0x3237d7;_0xca0235=String(_0xca0235);if(_0xca0235['match'](/#(.*)/i)){if('dUYrO'!==_0x324668(0x7cf))return _0x324668(0x349)[_0x324668(0x117)](String(RegExp['$1']));else _0x1feb6e[_0x324668(0xa4)][_0x324668(0x9ac)][_0x324668(0x4db)](this),this[_0x324668(0x9be)]&&this[_0x324668(0x9be)][_0x324668(0x651)]&&this[_0x324668(0x820)]&&(this[_0x324668(0x9be)][_0x324668(0x651)]['smooth']!==this[_0x324668(0x820)][_0x324668(0x8ab)]()&&(this[_0x324668(0x9be)][_0x324668(0x651)][_0x324668(0x133)]=this['_battler']['battlerSmoothImage']()));}else return this[_0x324668(0x2da)](Number(_0xca0235));},DataManager[_0x3237d7(0x4bc)]=function(_0x578029){const _0x4ff3b8=_0x3237d7;if(_0x578029[_0x4ff3b8(0x4fe)][_0x4ff3b8(0x453)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x38ae2e=String(RegExp['$1'])[_0x4ff3b8(0x566)]()['trim']();if(_0x38ae2e==='MANUAL')return _0x4ff3b8(0x831);if(VisuMZ[_0x4ff3b8(0x5f5)][_0x38ae2e])return _0x38ae2e;}const _0x1d413b=VisuMZ['BattleCore'][_0x4ff3b8(0x98d)]['Damage'][_0x4ff3b8(0xad7)]['toUpperCase']()[_0x4ff3b8(0x194)]();if(VisuMZ[_0x4ff3b8(0x5f5)][_0x1d413b])return _0x1d413b;return _0x4ff3b8(0x831);},DataManager['getStypeIdWithName']=function(_0x1acbd8){const _0x5e3415=_0x3237d7;_0x1acbd8=_0x1acbd8[_0x5e3415(0x566)]()['trim'](),this[_0x5e3415(0xb66)]=this[_0x5e3415(0xb66)]||{};if(this[_0x5e3415(0xb66)][_0x1acbd8])return this[_0x5e3415(0xb66)][_0x1acbd8];for(let _0xffb46f=0x1;_0xffb46f<0x64;_0xffb46f++){if(!$dataSystem['skillTypes'][_0xffb46f])continue;let _0x412e5d=$dataSystem[_0x5e3415(0x611)][_0xffb46f]['toUpperCase']()[_0x5e3415(0x194)]();_0x412e5d=_0x412e5d[_0x5e3415(0x268)](/\x1I\[(\d+)\]/gi,''),_0x412e5d=_0x412e5d[_0x5e3415(0x268)](/\\I\[(\d+)\]/gi,''),this[_0x5e3415(0xb66)][_0x412e5d]=_0xffb46f;}return this['_stypeIDs'][_0x1acbd8]||0x0;},DataManager[_0x3237d7(0x126)]=function(_0x322e29){const _0x9f38c0=_0x3237d7;_0x322e29=_0x322e29[_0x9f38c0(0x566)]()['trim'](),this[_0x9f38c0(0x2fb)]=this[_0x9f38c0(0x2fb)]||{};if(this[_0x9f38c0(0x2fb)][_0x322e29])return this[_0x9f38c0(0x2fb)][_0x322e29];for(const _0x2ac456 of $dataSkills){if(!_0x2ac456)continue;this[_0x9f38c0(0x2fb)][_0x2ac456[_0x9f38c0(0x444)][_0x9f38c0(0x566)]()[_0x9f38c0(0x194)]()]=_0x2ac456['id'];}return this[_0x9f38c0(0x2fb)][_0x322e29]||0x0;},DataManager['getEnemyIdWithName']=function(_0x276ca4){const _0xf59b44=_0x3237d7;_0x276ca4=_0x276ca4[_0xf59b44(0x566)]()['trim'](),this[_0xf59b44(0x9e4)]=this[_0xf59b44(0x9e4)]||{};if(this[_0xf59b44(0x9e4)][_0x276ca4])return this[_0xf59b44(0x9e4)][_0x276ca4];for(const _0x385491 of $dataEnemies){if(_0xf59b44(0x7f7)===_0xf59b44(0x6ce))this['_distortionSprite']=new _0x5cdea1(),this[_0xf59b44(0x342)][_0xf59b44(0xa99)]['x']=0.5,this[_0xf59b44(0x342)][_0xf59b44(0xa99)]['y']=0.5,this[_0xf59b44(0x70d)](this[_0xf59b44(0x342)]);else{if(!_0x385491)continue;this[_0xf59b44(0x9e4)][_0x385491['name'][_0xf59b44(0x566)]()[_0xf59b44(0x194)]()]=_0x385491['id'];}}return this[_0xf59b44(0x9e4)][_0x276ca4]||0x0;},DataManager[_0x3237d7(0xa5d)]=function(_0x375640){const _0x2fb84e=_0x3237d7;_0x375640=_0x375640[_0x2fb84e(0x566)]()['trim'](),this[_0x2fb84e(0x3d1)]=this[_0x2fb84e(0x3d1)]||{};if(this[_0x2fb84e(0x3d1)][_0x375640])return this[_0x2fb84e(0x3d1)][_0x375640];for(let _0x4efaa7=0x1;_0x4efaa7<0x64;_0x4efaa7++){if(!$dataSystem[_0x2fb84e(0x6e7)][_0x4efaa7])continue;let _0x49a732=$dataSystem['weaponTypes'][_0x4efaa7][_0x2fb84e(0x566)]()[_0x2fb84e(0x194)]();_0x49a732=_0x49a732['replace'](/\x1I\[(\d+)\]/gi,''),_0x49a732=_0x49a732[_0x2fb84e(0x268)](/\\I\[(\d+)\]/gi,''),this[_0x2fb84e(0x3d1)][_0x49a732]=_0x4efaa7;}return this[_0x2fb84e(0x3d1)]['BARE\x20HANDS']=0x0,this[_0x2fb84e(0x3d1)][_0x375640]||0x0;},DataManager[_0x3237d7(0x439)]=function(_0x1e9dd5){const _0x5e81bf=_0x3237d7,_0xde0506=_0x5e81bf(0x861);let _0x425c9d=_0x1e9dd5['iconIndex'],_0x14fb32=_0x1e9dd5[_0x5e81bf(0x444)];const _0x439916=_0x1e9dd5[_0x5e81bf(0x4fe)];if(_0x439916[_0x5e81bf(0x453)](/<DISPLAY ICON: (\d+)>/i)){if(_0x5e81bf(0x623)===_0x5e81bf(0x623))_0x425c9d=Number(RegExp['$1']);else{const _0x346f6e=this['itemLineRect'](this['index']());let _0xc28838=this[_0x5e81bf(0x8bf)](this[_0x5e81bf(0xa27)]());_0xc28838=_0xc28838['replace'](/\\I\[(\d+)\]/gi,''),_0x1b5a27[_0x5e81bf(0x977)](),this[_0x5e81bf(0x274)](_0xc28838,_0x346f6e),this[_0x5e81bf(0x6a3)](_0xc28838,_0x346f6e),this[_0x5e81bf(0x7e6)](_0xc28838,_0x346f6e);}}return _0x439916['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x14fb32=String(RegExp['$1'])),_0xde0506['format'](_0x425c9d,_0x14fb32);},DataManager[_0x3237d7(0x975)]=function(_0x91a339){const _0x263204=_0x3237d7;if(_0x91a339[_0x263204(0x4fe)][_0x263204(0x453)](/<COMMAND TEXT: (.*)>/i)){if(_0x263204(0x7fd)===_0x263204(0x7fd))return String(RegExp['$1']);else this['_distortionSprite'][_0x263204(0x70d)](this['_dragonbonesSpriteContainer']);}else return _0x91a339[_0x263204(0x444)];},DataManager[_0x3237d7(0x4b4)]=function(_0x120d54){const _0x39bdd0=_0x3237d7;if(_0x120d54['note'][_0x39bdd0(0x453)](/<COMMAND ICON: (\d+)>/i)){if('bbbKM'!==_0x39bdd0(0x6d5))this[_0x39bdd0(0x77b)]()?this[_0x39bdd0(0x9f0)]():_0x5eb290[_0x39bdd0(0xa4)][_0x39bdd0(0x1f7)]['call'](this);else return Number(RegExp['$1']);}else{if(_0x39bdd0(0xf6)===_0x39bdd0(0x3a8)){const _0x4bd180=_0x40fd5e['inputtingAction'](),_0x414836=this['actor'](this[_0x39bdd0(0xa27)]());if(!_0x4bd180)return!![];if(!_0x4bd180['item']())return!![];const _0x570519=_0x4bd180[_0x39bdd0(0x7be)]()[_0x39bdd0(0x4fe)];if(_0x570519[_0x39bdd0(0x453)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x414836===_0x2e9ef2[_0x39bdd0(0x5f9)]())return![];}return!![];}else return _0x120d54[_0x39bdd0(0xb3d)];}},DataManager[_0x3237d7(0x7d7)]=function(_0x1061d2){const _0x5d18fc=_0x3237d7,_0x329e6a=$dataEnemies[_0x1061d2];if(_0x329e6a){if(_0x329e6a[_0x5d18fc(0x4fe)][_0x5d18fc(0x453)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x5d18fc(0x4ac)===_0x5d18fc(0x690))this['_endBattle']=![],this[_0x5d18fc(0x62a)]=_0x1d1325[_0x5d18fc(0xabc)],this['processBattleCoreJS'](_0x5d18fc(0x827)),_0x27af5e[_0x5d18fc(0xa4)][_0x5d18fc(0x190)][_0x5d18fc(0x4db)](this),this[_0x5d18fc(0x9ea)]('PostStartBattleJS');else{const _0x5385f1=String(RegExp['$1'])[_0x5d18fc(0x2cf)](/[\r\n]+/)['remove'](''),_0x5e58c0=this[_0x5d18fc(0x8c9)](_0x5385f1);_0x1061d2=this[_0x5d18fc(0x74b)](_0x5e58c0)||_0x1061d2,_0x1061d2=DataManager[_0x5d18fc(0x7d7)](_0x1061d2);}}}return _0x1061d2;},DataManager['processRandomizedData']=function(_0x5b1704){const _0xb39349=_0x3237d7;let _0x5b0433=0x0;const _0x43f24f={};for(const _0x74bb58 of _0x5b1704){if('xEgEz'!=='xEgEz')this[_0xb39349(0x537)]();else{if(_0x74bb58['match'](/(.*):[ ](\d+)/i)){if(_0xb39349(0x3c4)===_0xb39349(0x48f)){return _0x2f2400[_0xb39349(0xa4)]['Game_Actor_makeActionList']['call'](this);;}else{const _0x318570=String(RegExp['$1'])[_0xb39349(0x194)](),_0x28607f=Number(RegExp['$2']);_0x43f24f[_0x318570]=_0x28607f,_0x5b0433+=_0x28607f;}}else{if(_0x74bb58[_0xb39349(0x453)](/(.*):[ ](\d+\.?\d+)/i)){if(_0xb39349(0x675)===_0xb39349(0x5eb))!this[_0xb39349(0x1cd)][_0xb39349(0xa43)]()&&this[_0xb39349(0x574)]();else{const _0x5349c7=String(RegExp['$1'])[_0xb39349(0x194)](),_0x315d28=Number(RegExp['$2']);_0x43f24f[_0x5349c7]=_0x315d28,_0x5b0433+=_0x315d28;}}else{if(_0x74bb58!==''){if(_0xb39349(0x270)==='WAHwm'){const _0x3cbf1b=this[_0xb39349(0x5b9)](_0x59b9e9);return _0x3cbf1b==='autoBattleUseSkills'?this['statusTextAutoBattleStyle']():_0x144558[_0xb39349(0xa4)][_0xb39349(0x97)][_0xb39349(0x4db)](this,_0x25a53a);}else _0x43f24f[_0x74bb58]=0x1,_0x5b0433++;}}}}}if(_0x5b0433<=0x0)return'';let _0x2b46ec=Math[_0xb39349(0x79e)]()*_0x5b0433;for(const _0x2169c8 in _0x43f24f){_0x2b46ec-=_0x43f24f[_0x2169c8];if(_0x2b46ec<=0x0)return _0x2169c8;}return'';},DataManager[_0x3237d7(0x4f6)]=function(_0x26c5ee){const _0xf4bef3=_0x3237d7;if(!_0x26c5ee)return![];if(!VisuMZ[_0xf4bef3(0xa4)][_0xf4bef3(0x98d)][_0xf4bef3(0x9f9)]['AutoNotetag'])return![];if(_0x26c5ee[_0xf4bef3(0x4fe)][_0xf4bef3(0x453)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x26c5ee[_0xf4bef3(0x4fe)][_0xf4bef3(0x453)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x50fd37 of _0x26c5ee[_0xf4bef3(0xb61)]){if(!_0x50fd37)continue;if(_0x50fd37['code']===Game_Action[_0xf4bef3(0x646)])return!![];}return![];},DataManager[_0x3237d7(0x2c2)]=function(_0x502d6a){const _0x259278=_0x3237d7,_0x26298b=$dataTroops[_0x502d6a];if(!_0x26298b)return'';let _0x358276='';_0x358276+=_0x26298b[_0x259278(0x444)];for(const _0x91c938 of _0x26298b['pages']){for(const _0x54e6d6 of _0x91c938[_0x259278(0x5fc)]){if(_0x259278(0x6f6)!==_0x259278(0x7c8)){if([0x6c,0x198][_0x259278(0x231)](_0x54e6d6[_0x259278(0xb3c)])){if('ILOGG'===_0x259278(0x932)){_0x4012fa[_0x259278(0x38d)]&&this[_0x259278(0x122)]()&&this[_0x259278(0x466)]();const _0x1b74c5=_0x38e8ea[_0x259278(0x199)](),_0x580e48=[];for(const _0x12ced6 of _0x1b74c5){_0x580e48[_0x259278(0x857)](new _0x523f16(_0x12ced6));}_0x580e48[_0x259278(0x726)](this['compareEnemySprite'][_0x259278(0x114)](this));for(const _0x3259f0 of _0x580e48){this[_0x259278(0x157)][_0x259278(0x70d)](_0x3259f0);}this['_enemySprites']=_0x580e48;}else _0x358276+='\x0a',_0x358276+=_0x54e6d6[_0x259278(0x149)][0x0];}}else return _0x4cd3a5[_0x259278(0x913)]('cancel');}}return _0x358276;},ConfigManager[_0x3237d7(0xabc)]=ConfigManager[_0x3237d7(0xabc)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x3237d7(0x9a5)]??![],ConfigManager[_0x3237d7(0x59b)]=ConfigManager[_0x3237d7(0x59b)]??!![],VisuMZ['BattleCore'][_0x3237d7(0x650)]=ConfigManager[_0x3237d7(0x64b)],ConfigManager[_0x3237d7(0x64b)]=function(){const _0x333670=_0x3237d7,_0x24564a=VisuMZ[_0x333670(0xa4)]['ConfigManager_makeData']['call'](this);return _0x24564a[_0x333670(0xabc)]=this[_0x333670(0xabc)],_0x24564a[_0x333670(0x9a5)]=this[_0x333670(0x9a5)],_0x24564a[_0x333670(0x59b)]=this[_0x333670(0x59b)],_0x24564a;},VisuMZ['BattleCore'][_0x3237d7(0x54b)]=ConfigManager[_0x3237d7(0x3e2)],ConfigManager['applyData']=function(_0x3c4ea0){const _0x11ba78=_0x3237d7;VisuMZ[_0x11ba78(0xa4)][_0x11ba78(0x54b)][_0x11ba78(0x4db)](this,_0x3c4ea0);_0x11ba78(0xabc)in _0x3c4ea0?this[_0x11ba78(0xabc)]=_0x3c4ea0[_0x11ba78(0xabc)]:this[_0x11ba78(0xabc)]=![];'autoBattleUseSkills'in _0x3c4ea0?this[_0x11ba78(0x9a5)]=_0x3c4ea0[_0x11ba78(0x9a5)]:this['autoBattleUseSkills']=![];if('visualHpGauge'in _0x3c4ea0)_0x11ba78(0x109)===_0x11ba78(0x8de)?_0xa0e76e[_0x11ba78(0x5a2)](_0x56d7b6['SwitchMissEvade'],![]):this[_0x11ba78(0x59b)]=_0x3c4ea0[_0x11ba78(0x59b)];else{if(_0x11ba78(0xae6)===_0x11ba78(0xae6))this[_0x11ba78(0x59b)]=!![];else{if(!_0x30112f['isSceneBattle']())return;_0x381245[_0x11ba78(0x3d3)](_0x11a57a,_0x1c8c31);const _0x4a6546=_0x305224[_0x11ba78(0x1cd)],_0x35b720=_0x4a43f7[_0x11ba78(0x2b4)]&&_0x3ef298[_0x11ba78(0xb4b)];_0x4a6546[_0x11ba78(0x43b)](_0x43f767[_0x11ba78(0x86a)]),_0x35b720&&_0x2badaa['VisuMZ_4_CombatLog']&&_0x2b4445[_0x11ba78(0x17b)](_0x4f3b72['Text']||'',_0x1108aa[_0x11ba78(0x654)]||0x0);}}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x10f)]=BattleManager[_0x3237d7(0x96b)],BattleManager[_0x3237d7(0x96b)]=function(){const _0xfca2e9=_0x3237d7;VisuMZ[_0xfca2e9(0xa4)][_0xfca2e9(0x10f)][_0xfca2e9(0x4db)](this),this['_forcedBattlers']=[];},BattleManager['refreshStatusWindow']=function(){const _0x4d7b1a=_0x3237d7;if(!SceneManager[_0x4d7b1a(0x5cb)]())return;const _0x12dd89=SceneManager[_0x4d7b1a(0x2a7)][_0x4d7b1a(0x364)];if(_0x12dd89)_0x12dd89[_0x4d7b1a(0x917)]();},BattleManager[_0x3237d7(0x802)]=function(){const _0x5b4c0f=_0x3237d7;if(BattleManager[_0x5b4c0f(0x77b)]())return _0x5b4c0f(0xa64);return _0x5b4c0f(0x585);},BattleManager[_0x3237d7(0x3c9)]=function(_0x3012c3){return _0x3012c3=_0x3012c3['toUpperCase']()['trim'](),this['battleSys']()===_0x3012c3;},BattleManager[_0x3237d7(0xa30)]=function(){const _0x3a3afc=_0x3237d7;return this[_0x3a3afc(0x3c9)](_0x3a3afc(0x585));},BattleManager['isTurnBased']=function(){const _0x29f952=_0x3237d7;return this[_0x29f952(0xa30)]();},BattleManager['isTickBased']=function(){const _0x2da28b=_0x3237d7;return!this[_0x2da28b(0x83a)]();},BattleManager[_0x3237d7(0x2b3)]=function(){const _0x5b53bc=_0x3237d7;return!this[_0x5b53bc(0x83a)]()&&!this[_0x5b53bc(0x12a)]();},BattleManager[_0x3237d7(0x9ea)]=function(_0x1e3d69){const _0x4ef55f=_0x3237d7;$gameParty[_0x4ef55f(0x9ea)](_0x1e3d69),$gameTroop[_0x4ef55f(0x9ea)](_0x1e3d69);},VisuMZ[_0x3237d7(0xa4)]['BattleManager_startBattle']=BattleManager[_0x3237d7(0x931)],BattleManager[_0x3237d7(0x931)]=function(){const _0x2df690=_0x3237d7;this[_0x2df690(0xabf)]=![],this['_autoBattle']=ConfigManager[_0x2df690(0xabc)],this[_0x2df690(0x9ea)](_0x2df690(0x827)),VisuMZ[_0x2df690(0xa4)]['BattleManager_startBattle'][_0x2df690(0x4db)](this),this[_0x2df690(0x9ea)](_0x2df690(0x89a));},BattleManager[_0x3237d7(0x6d2)]=function(_0x29eeb1){const _0x33bd1f=_0x3237d7,_0x15fbdd=VisuMZ['BattleCore'][_0x33bd1f(0x98d)]['Mechanics'];if(_0x15fbdd['BattleEndEvent']&&VisuMZ['BattleCore'][_0x33bd1f(0x77a)](_0x15fbdd[_0x33bd1f(0x380)])){if(_0x33bd1f(0xab5)!==_0x33bd1f(0xab5)){const _0x31ec2f=this[_0x33bd1f(0x342)][_0x33bd1f(0x845)]['y'];_0x5ae1ed-=(_0x31ec2f-0x1)*this[_0x33bd1f(0x766)];}else $gameTemp['reserveCommonEvent'](_0x15fbdd[_0x33bd1f(0x380)]);}const _0x47a785=_0x33bd1f(0x768)['format'](_0x29eeb1);if(_0x15fbdd[_0x47a785]&&VisuMZ[_0x33bd1f(0xa4)][_0x33bd1f(0x77a)](_0x15fbdd[_0x47a785])){if('gjxlS'!==_0x33bd1f(0x7ad))return null;else $gameTemp['reserveCommonEvent'](_0x15fbdd[_0x47a785]);}},VisuMZ['BattleCore'][_0x3237d7(0x55c)]=BattleManager[_0x3237d7(0x91f)],BattleManager[_0x3237d7(0x91f)]=function(){const _0x2961f7=_0x3237d7;this[_0x2961f7(0x9ea)](_0x2961f7(0x95e)),VisuMZ[_0x2961f7(0xa4)]['BattleManager_processVictory'][_0x2961f7(0x4db)](this),this[_0x2961f7(0x6d2)](_0x2961f7(0x361));},VisuMZ['BattleCore'][_0x3237d7(0x8e5)]=BattleManager[_0x3237d7(0x396)],BattleManager[_0x3237d7(0x396)]=function(){const _0x5d61ce=_0x3237d7;this[_0x5d61ce(0x9ea)]('BattleDefeatJS'),VisuMZ['BattleCore'][_0x5d61ce(0x8e5)][_0x5d61ce(0x4db)](this),this[_0x5d61ce(0x6d2)](_0x5d61ce(0x69c));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xaaf)]=BattleManager[_0x3237d7(0x8b8)],BattleManager[_0x3237d7(0x8b8)]=function(_0x434607){const _0x240de3=_0x3237d7;this['_endBattle']=!![],this[_0x240de3(0x62a)]=![],this['processBattleCoreJS'](_0x240de3(0x477)),VisuMZ['BattleCore'][_0x240de3(0xaaf)][_0x240de3(0x4db)](this,_0x434607),this[_0x240de3(0x9ea)](_0x240de3(0x836));},VisuMZ['BattleCore'][_0x3237d7(0x640)]=BattleManager[_0x3237d7(0xb18)],BattleManager[_0x3237d7(0xb18)]=function(){const _0x165571=_0x3237d7;if(this['isTurnBased']())this[_0x165571(0x9ea)](_0x165571(0x3f4));VisuMZ['BattleCore']['BattleManager_startTurn'][_0x165571(0x4db)](this);if(this[_0x165571(0x83a)]())this[_0x165571(0x9ea)]('PostStartTurnJS');},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x1b8)]=BattleManager['startAction'],BattleManager[_0x3237d7(0x5a3)]=function(){const _0x24a55c=_0x3237d7,_0x59b37f=this[_0x24a55c(0xb5c)]['currentAction'](),_0x4a2170=this['_subject'];_0x59b37f&&_0x59b37f['subject']()===_0x4a2170&&_0x59b37f['actionBattleCoreJS']('PreStartActionJS'),VisuMZ[_0x24a55c(0xa4)][_0x24a55c(0x1b8)]['call'](this),_0x59b37f&&_0x59b37f[_0x24a55c(0x67f)]()===_0x4a2170&&_0x59b37f[_0x24a55c(0x51e)](_0x24a55c(0xb46));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x957)]=BattleManager[_0x3237d7(0x574)],BattleManager[_0x3237d7(0x574)]=function(){const _0x329e23=_0x3237d7,_0x79c1ba=this[_0x329e23(0x343)],_0xd3198a=this['_subject'];if(_0x79c1ba&&_0x79c1ba!==this[_0x329e23(0xec)]&&_0x79c1ba[_0x329e23(0x67f)]()===_0xd3198a){if(_0x329e23(0x313)===_0x329e23(0x313))_0x79c1ba[_0x329e23(0x51e)](_0x329e23(0x707));else{const _0x4a8fe0=_0x1b22a4[_0x448a0a[_0x329e23(0x4c2)]];if(_0x4a8fe0&&!_0x3d5fac[_0x329e23(0x231)](_0x4a8fe0))_0x346793['push'](_0x4a8fe0);}}VisuMZ[_0x329e23(0xa4)]['BattleManager_endAction'][_0x329e23(0x4db)](this),_0x79c1ba&&_0x79c1ba!==this[_0x329e23(0xec)]&&_0x79c1ba[_0x329e23(0x67f)]()===_0xd3198a&&_0x79c1ba['actionBattleCoreJS']('PostEndActionJS'),this['refreshBattlerMotions'](this['allBattleMembers']()),this[_0x329e23(0xec)]=this[_0x329e23(0x343)];},BattleManager[_0x3237d7(0x300)]=function(_0x3e6f65){const _0x5061e1=_0x3237d7;for(const _0x472a9d of _0x3e6f65){if(!_0x472a9d)continue;if(!_0x472a9d['battler']())continue;_0x472a9d[_0x5061e1(0x1d5)]()[_0x5061e1(0x537)]();}},BattleManager['updateAction']=function(){const _0x302df9=_0x3237d7;!this['_logWindow'][_0x302df9(0xa43)]()&&this[_0x302df9(0x574)]();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x83d)]=function(){const _0x377f0f=_0x3237d7;this[_0x377f0f(0x69b)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x4bf5f5=VisuMZ[_0x377f0f(0x92f)]['Settings'][_0x377f0f(0x60d)];_0x4bf5f5&&_0x4bf5f5[_0x377f0f(0xf0)]===![]&&this[_0x377f0f(0x135)](0x1);}else this[_0x377f0f(0x135)](0x1);this[_0x377f0f(0x9b9)]();},BattleManager[_0x3237d7(0x8bc)]=function(){const _0x477c73=_0x3237d7;this['_escapeRatio']=VisuMZ[_0x477c73(0xa4)][_0x477c73(0x98d)]['Mechanics'][_0x477c73(0x61c)][_0x477c73(0x4db)](this);},VisuMZ['BattleCore'][_0x3237d7(0x95)]=BattleManager[_0x3237d7(0x733)],BattleManager['onEscapeSuccess']=function(){const _0x5a2305=_0x3237d7;this[_0x5a2305(0x9ea)]('EscapeSuccessJS'),BattleManager[_0x5a2305(0x314)][_0x5a2305(0x7f6)](),VisuMZ['BattleCore'][_0x5a2305(0x95)][_0x5a2305(0x4db)](this),this[_0x5a2305(0x6d2)](_0x5a2305(0x8f0));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x9a4)]=BattleManager['onEscapeFailure'],BattleManager[_0x3237d7(0x1e9)]=function(){const _0x468686=_0x3237d7;this[_0x468686(0x9ea)]('EscapeFailureJS');const _0x2ddb3d=this[_0x468686(0x3ce)];VisuMZ[_0x468686(0xa4)][_0x468686(0x9a4)][_0x468686(0x4db)](this),this['_escapeRatio']=_0x2ddb3d+VisuMZ['BattleCore'][_0x468686(0x98d)][_0x468686(0x87c)][_0x468686(0x7ba)][_0x468686(0x4db)](this),this[_0x468686(0x6d2)](_0x468686(0x985));},BattleManager['displayStartMessages']=function(){const _0x7969fb=_0x3237d7;let _0x4d6813=![];if(this[_0x7969fb(0x395)]()){if('JTVfE'===_0x7969fb(0x50c))for(const _0x4f5f16 of $gameTroop['enemyNames']()){_0x7969fb(0x844)!==_0x7969fb(0x77c)?(this[_0x7969fb(0x1cd)]['push']('addText',TextManager[_0x7969fb(0x3b6)]['format'](_0x4f5f16)),this[_0x7969fb(0x1cd)][_0x7969fb(0x857)](_0x7969fb(0x6ca)),_0x4d6813=!![]):this['startMove'](0x0,0x0,0xc);}else _0x2ceb01[_0x7969fb(0x69e)]?this['_forcedBattleLayout']='sideview_ui':this['_forcedBattleLayout']=_0x7969fb(0x51d);}if(this[_0x7969fb(0x146)])this[_0x7969fb(0x1cd)][_0x7969fb(0x857)]('addText',TextManager['preemptive'][_0x7969fb(0x117)]($gameParty[_0x7969fb(0x444)]())),this[_0x7969fb(0x1cd)][_0x7969fb(0x857)](_0x7969fb(0x6ca));else this[_0x7969fb(0x5d6)]&&(this[_0x7969fb(0x1cd)][_0x7969fb(0x857)](_0x7969fb(0x43b),TextManager[_0x7969fb(0x3d7)]['format']($gameParty['name']())),this['_logWindow'][_0x7969fb(0x857)](_0x7969fb(0x6ca)));_0x4d6813&&(this['_logWindow'][_0x7969fb(0x857)](_0x7969fb(0x6ca)),this['_logWindow'][_0x7969fb(0x857)](_0x7969fb(0x2d9))),this['isTpb']()&&this[_0x7969fb(0x23b)]()&&(this[_0x7969fb(0x12d)]=![]);},BattleManager[_0x3237d7(0x395)]=function(){const _0x4fe7ef=_0x3237d7;if(BattleManager[_0x4fe7ef(0x62a)])return![];return VisuMZ[_0x4fe7ef(0xa4)]['Settings'][_0x4fe7ef(0x754)][_0x4fe7ef(0x4e4)];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x127)]=BattleManager[_0x3237d7(0x855)],BattleManager[_0x3237d7(0x855)]=function(){const _0x5348c1=_0x3237d7;VisuMZ[_0x5348c1(0xa4)]['BattleManager_startInput']['call'](this),this[_0x5348c1(0xa30)]()&&this[_0x5348c1(0x23b)]()&&!this[_0x5348c1(0x5d6)]&&$gameParty[_0x5348c1(0x9b4)]()&&this[_0x5348c1(0x4c9)]();},BattleManager[_0x3237d7(0x23b)]=function(){const _0x1b2822=_0x3237d7;return VisuMZ[_0x1b2822(0xa4)][_0x1b2822(0x98d)][_0x1b2822(0x661)][_0x1b2822(0xa1f)];},BattleManager[_0x3237d7(0x6ac)]=function(){const _0x1065b1=_0x3237d7;this['isPartyTpbInputtable']()&&this[_0x1065b1(0x4c9)]();},VisuMZ['BattleCore'][_0x3237d7(0xb25)]=Scene_Battle['prototype']['startActorCommandSelection'],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x8ad)]=function(){const _0x11b5a3=_0x3237d7;VisuMZ['BattleCore'][_0x11b5a3(0xb25)][_0x11b5a3(0x4db)](this),BattleManager[_0x11b5a3(0x77b)]()&&BattleManager[_0x11b5a3(0x12d)]&&(BattleManager[_0x11b5a3(0x12d)]=![],this[_0x11b5a3(0x999)]());},BattleManager[_0x3237d7(0x6fd)]=function(_0x8bc20,_0x4c9739){const _0x1efe13=_0x3237d7;this[_0x1efe13(0x343)][_0x1efe13(0x246)]=_0x4c9739,this[_0x1efe13(0x1cd)][_0x1efe13(0x5b1)](_0x4c9739),this[_0x1efe13(0x1cd)][_0x1efe13(0x7de)](_0x8bc20,this['_action']),this['_action'][_0x1efe13(0x7ae)](_0x8bc20),this['_logWindow'][_0x1efe13(0x166)](_0x8bc20,_0x8bc20);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x61a)]=BattleManager[_0x3237d7(0x8e3)],BattleManager[_0x3237d7(0x8e3)]=function(){const _0xd5bb8d=_0x3237d7;VisuMZ[_0xd5bb8d(0xa4)][_0xd5bb8d(0x61a)][_0xd5bb8d(0x4db)](this),this['_actionBattlers']=this[_0xd5bb8d(0x15c)]['filter'](_0x558df5=>_0x558df5&&_0x558df5[_0xd5bb8d(0x821)]());},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x1f8)]=BattleManager['updatePhase'],BattleManager['updatePhase']=function(_0x51a55c){const _0x5ac053=_0x3237d7;if(this['_phase']===_0x5ac053(0x98)){if(_0x5ac053(0x859)===_0x5ac053(0x503)){if(!this[_0x5ac053(0x820)][_0x5ac053(0xa06)]())return;const _0x48db03=_0x4bde89[_0x5ac053(0xa4)]['Settings'][_0x5ac053(0x626)],_0x40e415=new _0x1ce35c();_0x40e415[_0x5ac053(0x183)]=_0x48db03[_0x5ac053(0x970)],this['sortDamageSprites'](_0x40e415),_0x40e415[_0x5ac053(0x3b1)](_0x2804af,_0x25b617,_0x483170),this['addDamageSprite'](_0x40e415);}else this['updateCustomActionSequence']();}else{if(this['_phase']==='forceAction'){if(_0x5ac053(0x510)===_0x5ac053(0x510))this[_0x5ac053(0x19d)]();else{if(!_0x356171['isSceneBattle']())return;if(!_0x211a79['VisuMZ_3_ActSeqCamera'])return;_0x2b9330[_0x5ac053(0x3d3)](_0x2fa980,_0x55aeef);const _0x374408=_0x3e516f[_0x5ac053(0x968)](),_0x2688c3=_0x6ac95d[_0x5ac053(0x615)];if(!_0x374408)return;_0x5e093d[_0x5ac053(0x25f)](0x0,0x0,_0x3e1df4[_0x5ac053(0x1e5)],_0x10086f[_0x5ac053(0x758)]);if(_0x2688c3)_0x374408[_0x5ac053(0x20e)](_0x5ac053(0x75f));}}else VisuMZ[_0x5ac053(0xa4)][_0x5ac053(0x1f8)][_0x5ac053(0x4db)](this,_0x51a55c);}},BattleManager[_0x3237d7(0x888)]=function(){const _0x9d5c4d=_0x3237d7;this[_0x9d5c4d(0xabe)]=this['_targets'][_0x9d5c4d(0xa76)](0x0),this[_0x9d5c4d(0x475)]=0x0,this['_target']=this['_allTargets'][0x0]||null,this[_0x9d5c4d(0x147)]='custom';},BattleManager[_0x3237d7(0x35b)]=function(){const _0x147601=_0x3237d7;if(!this['updateEventMain']()&&!this['_logWindow'][_0x147601(0xa43)]()){if(_0x147601(0x93a)!==_0x147601(0x407))this[_0x147601(0x147)]=_0x147601(0x826);else{if(_0x550677[_0x147601(0x5ef)]()&&!_0x2d64fe[_0x147601(0x59e)]())return;const _0x37762f=_0x5ab23d[_0x147601(0x1d5)]();if(_0x37762f&&_0x3e3b3d[_0x147601(0x5ef)]())this[_0x147601(0x157)]['addChild'](_0x37762f);}}},BattleManager[_0x3237d7(0x2f7)]=function(_0x2a229f){const _0x40c25c=_0x3237d7;this[_0x40c25c(0x15c)][_0x40c25c(0x28b)](_0x2a229f);if(_0x2a229f===this[_0x40c25c(0xb5c)])return;const _0x567a33=JsonEx['makeDeepCopy'](_0x2a229f[_0x40c25c(0x139)]());this['_forcedBattlers']['push']([_0x2a229f,_0x567a33]);},BattleManager[_0x3237d7(0x8a2)]=function(){},BattleManager['updateStart']=function(){const _0x4f692d=_0x3237d7;if(this['isTpb']()){if(_0x4f692d(0x76a)==='yhnio'){const _0x432428=this[_0x4f692d(0x7df)]();if(!_0x432428)return null;if(_0x432428[_0x4f692d(0x8d7)]()&&_0x432428[_0x4f692d(0x101)]())return _0x432428;}else this[_0x4f692d(0x147)]=_0x4f692d(0x897);}else{if(this[_0x4f692d(0x159)][_0x4f692d(0x60c)]>0x0){if(_0x4f692d(0xa5b)!==_0x4f692d(0x570))this[_0x4f692d(0x147)]=_0x4f692d(0x897);else return this[_0x4f692d(0x80f)]()[_0x4f692d(0x6e4)](_0x1fa875=>_0x1fa875['isFloating']());}else{if(_0x4f692d(0x9ca)!==_0x4f692d(0x571))this[_0x4f692d(0x855)]();else{const _0x2281e9=this['battler']();_0x2281e9&&_0x2281e9[_0x4f692d(0xaa5)]();}}}},BattleManager[_0x3237d7(0x928)]=function(){const _0x4aacf7=_0x3237d7,_0x82f749=this['_subject'];_0x82f749&&this[_0x4aacf7(0x77b)]()&&_0x82f749[_0x4aacf7(0x3e9)](_0x4aacf7(0x6ed));for(;;){const _0x2b522e=this[_0x4aacf7(0x7df)]();if(!_0x2b522e)return null;if(_0x2b522e[_0x4aacf7(0x8d7)]()&&_0x2b522e[_0x4aacf7(0x101)]()){if(_0x4aacf7(0xb2)!==_0x4aacf7(0x934))return _0x2b522e;else this[_0x4aacf7(0x28f)]=(this['_currentAngle']*(_0x3c3db9-0x1)+this[_0x4aacf7(0x4ee)])/_0x2b04a4;}}},BattleManager['getNextSubjectFromPool']=function(){const _0x591623=_0x3237d7;if(this[_0x591623(0x159)][_0x591623(0x60c)]>0x0){if('sZKgo'===_0x591623(0x374)){const _0x5cf8fb=this[_0x591623(0x159)][_0x591623(0xa12)](),_0x20a90e=_0x5cf8fb[0x0];return _0x20a90e['_actions']=_0x20a90e[_0x591623(0x7ca)]||[],_0x20a90e[_0x591623(0x7ca)][0x0]=_0x5cf8fb[0x1],_0x20a90e;}else _0x5265ff[_0x591623(0xa4)][_0x591623(0x3f6)][_0x591623(0x4db)](this,_0x6a7b61);}else{if('uKWJe'!=='nRjON')return this[_0x591623(0x15c)]['shift']();else _0x575704[_0x591623(0x998)]=_0x96088(_0x433008['$1'])[_0x591623(0x165)]()['trim']();}},VisuMZ[_0x3237d7(0xa4)]['Game_Battler_forceAction']=Game_Battler[_0x3237d7(0x735)]['forceAction'],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x2f7)]=function(_0x1f69c9,_0x38fb83){const _0xb7697d=_0x3237d7;VisuMZ[_0xb7697d(0xa4)]['Game_Battler_forceAction'][_0xb7697d(0x4db)](this,_0x1f69c9,_0x38fb83),this[_0xb7697d(0x7ca)][this[_0xb7697d(0x7ca)][_0xb7697d(0x60c)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x3237d7(0x735)][_0x3237d7(0x39b)]=function(_0x3eac4a){const _0x45c3ed=_0x3237d7;return this[_0x45c3ed(0x72c)](_0x3eac4a[0x0],_0x3eac4a[0x1],_0x1d21b2=>{const _0x30a9aa=_0x45c3ed;!_0x1d21b2[_0x30a9aa(0x741)]()&&(_0x1d21b2[_0x30a9aa(0x2f7)](_0x3eac4a[0x2],_0x3eac4a[0x3]),BattleManager[_0x30a9aa(0x2f7)](_0x1d21b2));}),!![];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x5cf)]=Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x6a8)],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x6a8)]=function(){const _0x29704c=_0x3237d7;VisuMZ[_0x29704c(0xa4)][_0x29704c(0x5cf)][_0x29704c(0x4db)](this);if(this[_0x29704c(0x7ca)][_0x29704c(0x60c)]<=0x0){if('YgypA'!==_0x29704c(0x26e)){const _0x25a18c=_0x10ac3e(_0x4a003b['$1']);return[_0x347f2c[_0x29704c(0x889)]()[_0x29704c(0x199)]()[_0x25a18c]];}else this[_0x29704c(0x83e)]=Number[_0x29704c(0x13b)];}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x1f7)]=BattleManager[_0x3237d7(0x4c9)],BattleManager[_0x3237d7(0x4c9)]=function(){const _0xdedce5=_0x3237d7;this[_0xdedce5(0x77b)]()?this[_0xdedce5(0x9f0)]():_0xdedce5(0x98a)===_0xdedce5(0x1d6)?this[_0xdedce5(0x118)]['addChild'](new _0x3d26f7()):VisuMZ[_0xdedce5(0xa4)]['BattleManager_selectNextCommand'][_0xdedce5(0x4db)](this);},BattleManager[_0x3237d7(0x9f0)]=function(){const _0x11aa0e=_0x3237d7;if(this[_0x11aa0e(0x7ce)]){if(_0x11aa0e(0x82d)===_0x11aa0e(0x3b9)){if(!_0x4b0238)return;if(!this[_0x11aa0e(0x9be)])return;this['_mainSprite']['anchor']['x']=this[_0x11aa0e(0x1e4)][_0x11aa0e(0x357)](),this['_mainSprite'][_0x11aa0e(0xa99)]['y']=this[_0x11aa0e(0x1e4)][_0x11aa0e(0x565)](),this[_0x11aa0e(0x621)]();}else{if(this[_0x11aa0e(0x7ce)][_0x11aa0e(0x4c9)]())return;this[_0x11aa0e(0x80c)](),this[_0x11aa0e(0x73e)](),!this[_0x11aa0e(0xb5c)]&&!this[_0x11aa0e(0x7ce)]&&SceneManager['_scene'][_0x11aa0e(0x9b1)]();}}else!this[_0x11aa0e(0xb5c)]&&this[_0x11aa0e(0xd1)]();},BattleManager[_0x3237d7(0x73e)]=function(){const _0x27e2a2=_0x3237d7;if(!this[_0x27e2a2(0x283)]()||this['needsActorInputCancel']()){if(this['_tpbSceneChangeCacheActor']){if(_0x27e2a2(0x5e3)==='MEhPO')!$gameParty[_0x27e2a2(0x4ff)]()[_0x27e2a2(0x231)](this['_tpbSceneChangeCacheActor'])&&(this[_0x27e2a2(0x2be)]=null);else{if(!_0x54b6d5['isSideView']())return;const _0x3eda88=this[_0x27e2a2(0x1d5)]();if(!_0x3eda88)return;if(_0xde4f6c)this['setBattlerFacePoint'](_0x304588+_0x3eda88[_0x27e2a2(0x642)],_0x4d1942+_0x3eda88[_0x27e2a2(0x9ed)],![]);_0x12445f+=_0x3eda88[_0x27e2a2(0x642)]-_0x3eda88['_homeX'],_0x3e453e+=_0x3eda88[_0x27e2a2(0x9ed)]-_0x3eda88[_0x27e2a2(0x3f3)],_0x3eda88[_0x27e2a2(0x835)](_0x72e1e4,_0x52779c,_0x50265f);if(_0x5206bb[_0x27e2a2(0x38d)])_0x3eda88[_0x27e2a2(0x8c1)](_0x2175e0||_0x27e2a2(0xc6));}}!this[_0x27e2a2(0x2be)]?(this[_0x27e2a2(0x631)](),this[_0x27e2a2(0x7ce)]=null,this[_0x27e2a2(0x711)]=![]):this[_0x27e2a2(0x3ec)]();}},BattleManager[_0x3237d7(0x3ec)]=function(){const _0x1bba1f=_0x3237d7;!$gameParty[_0x1bba1f(0x4ff)]()[_0x1bba1f(0x231)](this[_0x1bba1f(0x2be)])&&(_0x1bba1f(0x411)===_0x1bba1f(0x619)?_0xe74ff5[_0x1bba1f(0xa4)]['JS'][_0x4ee6a1][_0x1bba1f(0x4db)](this,this[_0x1bba1f(0x67f)](),this[_0x1bba1f(0x67f)](),_0x159198,_0x4db0d7):this[_0x1bba1f(0x2be)]=null);if(this[_0x1bba1f(0x2be)]){if('ucUSU'!==_0x1bba1f(0x11d)){let _0x540276=0x0;return this['_battler']&&!this[_0x1bba1f(0x820)][_0x1bba1f(0x156)]()&&(_0x540276-=this[_0x1bba1f(0x4ba)],_0x540276-=this['_jumpHeight']),_0x540276;}else this[_0x1bba1f(0x7ce)]=this['_tpbSceneChangeCacheActor'],this[_0x1bba1f(0x7ce)][_0x1bba1f(0x66a)]=_0x1bba1f(0x5db),this['_inputting']=!![],this[_0x1bba1f(0x2be)]=null;}else _0x1bba1f(0x620)!==_0x1bba1f(0x620)?this['_forcedBattleLayout']=_0x1bba1f(0x5fc):(this[_0x1bba1f(0x631)](),this['_currentActor']=null,this[_0x1bba1f(0x711)]=![]);},VisuMZ[_0x3237d7(0xa4)]['BattleManager_isTpbMainPhase']=BattleManager[_0x3237d7(0x7dd)],BattleManager[_0x3237d7(0x7dd)]=function(){const _0x51c7a6=_0x3237d7;return this[_0x51c7a6(0x147)]===_0x51c7a6(0x98)?this['battleCoreTpbMainPhase']():VisuMZ[_0x51c7a6(0xa4)][_0x51c7a6(0x88e)]['call'](this);},BattleManager[_0x3237d7(0x312)]=function(){const _0x13ae0c=_0x3237d7;return this[_0x13ae0c(0xaf6)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x6ab)]=BattleManager[_0x3237d7(0x631)],BattleManager[_0x3237d7(0x631)]=function(){const _0x452dc7=_0x3237d7;this[_0x452dc7(0x77b)]()&&this['_phase']==='battleEnd'&&(_0x452dc7(0x3b3)==='UfAXE'?this[_0x452dc7(0x46b)]():this[_0x452dc7(0x7ce)]=null),VisuMZ[_0x452dc7(0xa4)]['BattleManager_cancelActorInput']['call'](this);},VisuMZ['BattleCore'][_0x3237d7(0x872)]=BattleManager[_0x3237d7(0x99e)],BattleManager['inputtingAction']=function(){const _0x115625=_0x3237d7,_0x21ae74=this[_0x115625(0x7ce)];if(_0x21ae74&&!_0x21ae74[_0x115625(0x99e)]()){const _0x29687a=_0x21ae74[_0x115625(0x9a)];_0x21ae74['_actions'][_0x29687a]=new Game_Action(_0x21ae74);}return VisuMZ[_0x115625(0xa4)][_0x115625(0x872)][_0x115625(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)]['BattleManager_checkSubstitute']=BattleManager['checkSubstitute'],BattleManager[_0x3237d7(0x36a)]=function(_0x4ca9aa){const _0x33ca67=_0x3237d7;if(this['_action'][_0x33ca67(0x221)]())return![];return VisuMZ[_0x33ca67(0xa4)][_0x33ca67(0x235)][_0x33ca67(0x4db)](this,_0x4ca9aa);},SceneManager['isSceneBattle']=function(){const _0x4e346c=_0x3237d7;return this['_scene']&&this['_scene'][_0x4e346c(0x607)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){return Spriteset_Battle['prototype']['isFlipped']();},SceneManager[_0x3237d7(0x5a8)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x3237d7(0xf8)]=function(_0x2fc0e5){const _0x4f99a7=_0x3237d7;if(!SceneManager[_0x4f99a7(0x5cb)]())return!![];const _0x42280e=['Scene_Options',_0x4f99a7(0x202)];return _0x42280e[_0x4f99a7(0x231)](_0x2fc0e5[_0x4f99a7(0x444)]);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x76e)]=SceneManager[_0x3237d7(0x857)],SceneManager[_0x3237d7(0x857)]=function(_0x30aecb){const _0xe63821=_0x3237d7;if(!SceneManager[_0xe63821(0xf8)](_0x30aecb))return this['displayBattleCoreTransitionErrorMsg'](_0x30aecb);VisuMZ[_0xe63821(0xa4)][_0xe63821(0x76e)][_0xe63821(0x4db)](this,_0x30aecb);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x5a0ffe){const _0x14f2c6=_0x3237d7;if(!$gameTemp['isPlaytest']())return;if(this[_0x14f2c6(0xfa)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x4cce92='';_0x4cce92+=_0x14f2c6(0x433),_0x4cce92+=_0x14f2c6(0x429)[_0x14f2c6(0x117)](_0x5a0ffe[_0x14f2c6(0x444)]),alert(_0x4cce92);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x150)]=Game_Temp[_0x3237d7(0x735)][_0x3237d7(0xb60)],Game_Temp[_0x3237d7(0x735)][_0x3237d7(0xb60)]=function(_0x530edd,_0x486e8e,_0x41c5d2){const _0x152f98=_0x3237d7;_0x530edd=_0x530edd[_0x152f98(0x921)]((_0x5eef01,_0x116f46,_0x3199ea)=>_0x3199ea[_0x152f98(0x4fa)](_0x5eef01)===_0x116f46);if(SceneManager[_0x152f98(0x5cb)]()&&SceneManager[_0x152f98(0x33b)]()){if(_0x152f98(0x46f)===_0x152f98(0xfb)){let _0x1d518a=0x0;return _0x1d518a;}else _0x41c5d2=!_0x41c5d2;}VisuMZ[_0x152f98(0xa4)][_0x152f98(0x150)]['call'](this,_0x530edd,_0x486e8e,_0x41c5d2),SceneManager[_0x152f98(0x5cb)]()&&BattleManager['_spriteset'][_0x152f98(0x9b5)]();},Game_Temp[_0x3237d7(0x735)][_0x3237d7(0x7e4)]=function(_0x17a2a9){this['_lastPluginCommandInterpreter']=_0x17a2a9;},Game_Temp[_0x3237d7(0x735)]['getLastPluginCommandInterpreter']=function(){const _0xb236b5=_0x3237d7;return this[_0xb236b5(0x219)];},Game_Temp[_0x3237d7(0x735)][_0x3237d7(0x63a)]=function(){const _0x3abcf7=_0x3237d7;this[_0x3abcf7(0xb1)]=undefined;},Game_Temp[_0x3237d7(0x735)][_0x3237d7(0xb05)]=function(_0x212fc3){const _0x18b612=_0x3237d7;$gameMap&&$dataMap&&$dataMap[_0x18b612(0x4fe)]&&this[_0x18b612(0x686)]($dataMap['note']);const _0x148fdd=$dataTroops[_0x212fc3];if(_0x148fdd){let _0x527831=DataManager[_0x18b612(0x2c2)](_0x148fdd['id']);this[_0x18b612(0x686)](_0x527831);}},Game_Temp[_0x3237d7(0x735)][_0x3237d7(0x686)]=function(_0x4e60dd){const _0xf15e99=_0x3237d7;if(!_0x4e60dd)return;if(_0x4e60dd['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0xf15e99(0x8c2)!==_0xf15e99(0x6c3)){const _0xb5db67=String(RegExp['$1']);if(_0xb5db67[_0xf15e99(0x453)](/DEFAULT/i))this['_forcedBattleLayout']=_0xf15e99(0x51d);else{if(_0xb5db67[_0xf15e99(0x453)](/LIST/i))this[_0xf15e99(0xb1)]=_0xf15e99(0x5fc);else{if(_0xb5db67[_0xf15e99(0x453)](/XP/i)){if(_0xf15e99(0x63e)===_0xf15e99(0x211)){const _0x5ca0d5=this[_0xf15e99(0x2cd)](),_0x1eab3d=_0x1f5445[_0xf15e99(0xa4)][_0xf15e99(0x98d)][_0xf15e99(0x661)][_0xf15e99(0x438)],_0x39ec11=_0x5ca0d5===_0xf15e99(0x488)?_0x44977b[_0xf15e99(0x11c)]:_0xf15e99(0x861)[_0xf15e99(0x117)](_0x1eab3d,_0x362041[_0xf15e99(0x11c)]),_0x39f651=this['isEscapeCommandEnabled']();this[_0xf15e99(0x557)](_0x39ec11,_0xf15e99(0x11c),_0x39f651);}else this['_forcedBattleLayout']='xp';}else{if(_0xb5db67[_0xf15e99(0x453)](/PORTRAIT/i))_0xf15e99(0x3a1)===_0xf15e99(0x3a1)?this[_0xf15e99(0xb1)]=_0xf15e99(0x195):this[_0xf15e99(0x147)]=_0xf15e99(0x897);else{if(_0xb5db67[_0xf15e99(0x453)](/BORDER/i)){if(_0xf15e99(0x2bf)===_0xf15e99(0x2bf))this['_forcedBattleLayout']=_0xf15e99(0xa93);else return _0x1dda3d[_0xf15e99(0x7e4)](this),_0x158cb7[_0xf15e99(0xa4)][_0xf15e99(0x79a)][_0xf15e99(0x4db)](this,_0x25329f);}else{if(_0xb5db67[_0xf15e99(0x453)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0xf15e99(0x69e)]){if(_0xf15e99(0xa7c)===_0xf15e99(0x5b4))return 0x1*this[_0xf15e99(0x659)];else this[_0xf15e99(0xb1)]=_0xf15e99(0x385);}else'ewSBA'!==_0xf15e99(0x8db)?_0x2bd2d5-=_0x306669[_0xf15e99(0x21c)]():this['_forcedBattleLayout']=_0xf15e99(0x51d);}}}}}}}else return _0x386347[_0xf15e99(0xa4)][_0xf15e99(0x420)]['call'](this);}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x6c5)]=Game_System['prototype'][_0x3237d7(0xbb)],Game_System[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(){const _0x2d64f1=_0x3237d7;VisuMZ[_0x2d64f1(0xa4)][_0x2d64f1(0x6c5)][_0x2d64f1(0x4db)](this),this[_0x2d64f1(0x12b)]();},Game_System[_0x3237d7(0x735)][_0x3237d7(0x12b)]=function(){const _0x53cbb0=_0x3237d7;this['_defeatedEnemies']=this[_0x53cbb0(0x42b)]||[];},Game_System[_0x3237d7(0x735)][_0x3237d7(0x6d3)]=function(){const _0x97b55f=_0x3237d7;if(this[_0x97b55f(0x42b)]===undefined)this['initBattleCore']();return this[_0x97b55f(0x42b)];},Game_System[_0x3237d7(0x735)]['registerDefeatedEnemy']=function(_0x3db6b3){const _0x2b7fd2=_0x3237d7;if(this[_0x2b7fd2(0x42b)]===undefined)this[_0x2b7fd2(0x12b)]();if(!_0x3db6b3)return;if(this[_0x2b7fd2(0x42b)]['includes'](_0x3db6b3))return;this['_defeatedEnemies']['push'](_0x3db6b3),this[_0x2b7fd2(0x42b)][_0x2b7fd2(0x726)]((_0x49ce7f,_0xfced82)=>_0x49ce7f-_0xfced82);},VisuMZ[_0x3237d7(0xa4)]['Game_BattlerBase_addNewState']=Game_BattlerBase['prototype'][_0x3237d7(0x783)],Game_BattlerBase['prototype'][_0x3237d7(0x783)]=function(_0x445b5b){const _0x42df62=_0x3237d7,_0x49c490=this[_0x42df62(0x101)](),_0x164072=this[_0x42df62(0x74a)]();VisuMZ['BattleCore'][_0x42df62(0x61d)][_0x42df62(0x4db)](this,_0x445b5b),this[_0x42df62(0x8f2)]()&&_0x49c490&&this[_0x42df62(0x4a3)]()&&(_0x42df62(0x81f)!==_0x42df62(0x81f)?this[_0x42df62(0x2fa)][_0x42df62(0x70d)](_0x4cd46e):(this[_0x42df62(0x56d)]=!this[_0x42df62(0x838)](),$gameSystem[_0x42df62(0xb14)](this[_0x42df62(0x6de)]()))),SceneManager[_0x42df62(0x5cb)]()&&_0x164072!==this[_0x42df62(0x74a)]()&&(this[_0x42df62(0x1d5)]()&&this[_0x42df62(0x1d5)]()[_0x42df62(0x537)]());},Game_Enemy['prototype'][_0x3237d7(0x838)]=function(){const _0x4b9541=_0x3237d7;return $gameSystem[_0x4b9541(0x6d3)]()['includes'](this['_enemyId']);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xb5a)]=Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0xad3)],Game_BattlerBase[_0x3237d7(0x735)]['eraseState']=function(_0xa31e8){const _0x5b890c=_0x3237d7;VisuMZ[_0x5b890c(0xa4)][_0x5b890c(0xb5a)][_0x5b890c(0x4db)](this,_0xa31e8);this[_0x5b890c(0x8f2)]()&&_0xa31e8===this[_0x5b890c(0x97b)]()&&this[_0x5b890c(0x101)]()&&(this['_visualHpGauge_JustDied']=![]);if(!this[_0x5b890c(0x9e1)]&&!this['_tempBattler']&&SceneManager['isSceneBattle']()){if('zPCsB'!=='DGbxE')this[_0x5b890c(0x695)]();else{if(!_0x15768b[_0x5b890c(0x5cb)]())return;_0x6f5bfc[_0x5b890c(0x3d3)](_0xba3114,_0x53a475),_0x2b6c8d['_scene']['setVisibleUI'](_0xa283e5[_0x5b890c(0x522)]);}}},VisuMZ['BattleCore']['Game_Action_clear']=Game_Action['prototype'][_0x3237d7(0x2d9)],Game_Action[_0x3237d7(0x735)][_0x3237d7(0x2d9)]=function(){const _0x9a4e1b=_0x3237d7;VisuMZ['BattleCore']['Game_Action_clear']['call'](this),this[_0x9a4e1b(0x90a)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x9a4e1b(0x6b8)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x9a4e1b(0x7a9)]=_0x9a4e1b(0x51d);},Game_Action[_0x3237d7(0x735)]['makeDamageValue']=function(_0x255f9f,_0x250500){const _0x3fa1a2=_0x3237d7;return VisuMZ[_0x3fa1a2(0xa4)]['Settings'][_0x3fa1a2(0x626)][_0x3fa1a2(0xa90)][_0x3fa1a2(0x4db)](this,_0x255f9f,_0x250500);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x42c)]=function(_0x118473,_0x124a89){const _0x4c1add=_0x3237d7;return VisuMZ[_0x4c1add(0xa4)][_0x4c1add(0x98d)][_0x4c1add(0x626)][_0x4c1add(0x124)][_0x4c1add(0x4db)](this,_0x118473,_0x124a89);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0xad)]=function(_0x2538f8,_0x1a5801){const _0x20fd54=_0x3237d7;return VisuMZ[_0x20fd54(0xa4)]['Settings'][_0x20fd54(0x626)][_0x20fd54(0x512)]['call'](this,_0x2538f8,_0x1a5801);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x74f)]=Game_Action['prototype'][_0x3237d7(0x90f)],Game_Action['prototype'][_0x3237d7(0x90f)]=function(_0x33198e){const _0x423d18=_0x3237d7,_0x12768a=this['item']()[_0x423d18(0x4fe)];if(_0x12768a['match'](/<ALWAYS HIT>/i)){if(_0x423d18(0xb0b)!==_0x423d18(0xb0b))this[_0x423d18(0x1cd)][_0x423d18(0x857)](_0x423d18(0x43b),_0x5d5352[_0x423d18(0x51b)][_0x423d18(0x117)](_0x107762[_0x423d18(0x444)]())),this[_0x423d18(0x1cd)][_0x423d18(0x857)](_0x423d18(0x6ca));else return 0x1;}else{if(_0x12768a[_0x423d18(0x453)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0x423d18(0x87b)===_0x423d18(0x791))_0x1289db=_0x585096>=_0x2f2024?_0x18e6c5:_0x4af61e;else return Number(RegExp['$1'])/0x64;}else{let _0x129521=VisuMZ[_0x423d18(0xa4)][_0x423d18(0x74f)][_0x423d18(0x4db)](this,_0x33198e);return _0x129521=this[_0x423d18(0x6b8)][_0x423d18(0x51a)]*_0x129521+this[_0x423d18(0x6b8)][_0x423d18(0x23e)],_0x129521;}}},Game_Action[_0x3237d7(0x735)]['itemCri']=function(_0x452702){const _0x6ade0c=_0x3237d7;if(!this['item']()[_0x6ade0c(0xb49)][_0x6ade0c(0xf7)])return 0x0;let _0x1ee521=VisuMZ[_0x6ade0c(0xa4)]['Settings'][_0x6ade0c(0x626)]['CriticalHitRateJS']['call'](this,_0x452702);return _0x1ee521=this[_0x6ade0c(0x6b8)][_0x6ade0c(0x7b4)]*_0x1ee521+this['_multipliers'][_0x6ade0c(0x7bc)],_0x1ee521;},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x248)]=function(_0x4fdde5){const _0x33e754=_0x3237d7;return _0x4fdde5=VisuMZ['BattleCore'][_0x33e754(0x98d)][_0x33e754(0x626)]['CriticalHitMultiplier'][_0x33e754(0x4db)](this,_0x4fdde5),_0x4fdde5=this[_0x33e754(0x6b8)]['criticalDmgRate']*_0x4fdde5+this[_0x33e754(0x6b8)][_0x33e754(0xa69)],_0x4fdde5;},VisuMZ['BattleCore'][_0x3237d7(0xa9a)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0x624)],Game_Action[_0x3237d7(0x735)]['evalDamageFormula']=function(_0x3e6b74){const _0x4c699b=_0x3237d7;if(this['_customDamageFormula']!=='default')return this['customDamageFormula'](_0x3e6b74);else return DataManager[_0x4c699b(0x4bc)](this[_0x4c699b(0x7be)]())==='MANUAL'?VisuMZ[_0x4c699b(0xa4)]['Game_Action_evalDamageFormula'][_0x4c699b(0x4db)](this,_0x3e6b74):this[_0x4c699b(0x987)](_0x3e6b74);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x8d9)]=function(_0xf7df34){const _0x5f305f=_0x3237d7;this[_0x5f305f(0x7a9)]=_0xf7df34;},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x113)]=function(_0x444563){const _0xb4ee1e=_0x3237d7,_0x2ba339=this[_0xb4ee1e(0x7be)](),_0x3d125d=_0x2ba339['damage'][_0xb4ee1e(0x15e)];_0x2ba339[_0xb4ee1e(0xb49)][_0xb4ee1e(0x15e)]=this[_0xb4ee1e(0x7a9)];let _0x1867f6=VisuMZ[_0xb4ee1e(0xa4)][_0xb4ee1e(0xa9a)]['call'](this,_0x444563);return _0x2ba339[_0xb4ee1e(0xb49)]['formula']=_0x3d125d,_0x1867f6;},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x9b3)]=function(){const _0x3da1d3=_0x3237d7;if(this[_0x3da1d3(0x7be)]()['note'][_0x3da1d3(0x453)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x3a5bc0=String(RegExp['$1'])[_0x3da1d3(0x566)]()[_0x3da1d3(0x194)]();return _0x3a5bc0;}return _0x3da1d3(0x831);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x987)]=function(_0x333d04){const _0x1fd443=_0x3237d7,_0x316dde=DataManager[_0x1fd443(0x4bc)](this['item']()),_0x3180ac=VisuMZ[_0x1fd443(0x5f5)][_0x316dde];try{if(_0x1fd443(0x849)===_0x1fd443(0x849))return _0x3180ac[_0x1fd443(0x665)][_0x1fd443(0x4db)](this,_0x333d04);else{if(!this[_0x1fd443(0x1b0)])return;this[_0x1fd443(0x1b0)]['y']=this[_0x1fd443(0x9ed)]-this['y']-0x2;}}catch(_0x350b76){if($gameTemp[_0x1fd443(0x790)]())console['log'](_0x350b76);return VisuMZ[_0x1fd443(0xa4)][_0x1fd443(0xa9a)][_0x1fd443(0x4db)](this);}},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x51c)]=function(_0x45fc7f,_0x47ba43){const _0x3e5661=_0x3237d7;if(this[_0x3e5661(0x40a)]())return _0x47ba43;const _0x3a9c83=this['subject'](),_0x373f87=_0x45fc7f;let _0x4c11f9=[],_0x25f42d=[];_0x4c11f9[_0x3e5661(0x857)](this[_0x3e5661(0x90a)][_0x3e5661(0x687)],this[_0x3e5661(0x90a)][_0x3e5661(0x922)]),_0x25f42d[_0x3e5661(0x857)](this['_armorPenetration'][_0x3e5661(0xb47)],this[_0x3e5661(0x90a)][_0x3e5661(0x7bd)]);const _0x58ad3f=this[_0x3e5661(0xa73)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x85cbfe=this[_0x3e5661(0xa73)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x4ce095=this[_0x3e5661(0xa73)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x4ce546=this[_0x3e5661(0xa73)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x4c11f9=_0x4c11f9[_0x3e5661(0x169)](_0x373f87[_0x3e5661(0x2d6)]()[_0x3e5661(0x1e0)](_0x5388ae=>_0x5388ae&&_0x5388ae['note']['match'](_0x58ad3f)?Number(RegExp['$1']):0x0)),_0x25f42d=_0x25f42d[_0x3e5661(0x169)](_0x373f87[_0x3e5661(0x2d6)]()[_0x3e5661(0x1e0)](_0x6d551c=>_0x6d551c&&_0x6d551c['note']['match'](_0x85cbfe)?Number(RegExp['$1'])/0x64:0x0)),_0x4c11f9=_0x4c11f9[_0x3e5661(0x169)](_0x3a9c83[_0x3e5661(0x2d6)]()[_0x3e5661(0x1e0)](_0x34da50=>_0x34da50&&_0x34da50[_0x3e5661(0x4fe)][_0x3e5661(0x453)](_0x4ce095)?Number(RegExp['$1']):0x0)),_0x25f42d=_0x25f42d['concat'](_0x3a9c83[_0x3e5661(0x2d6)]()[_0x3e5661(0x1e0)](_0x2a9d75=>_0x2a9d75&&_0x2a9d75[_0x3e5661(0x4fe)][_0x3e5661(0x453)](_0x4ce546)?Number(RegExp['$1'])/0x64:0x0)),this['item']()[_0x3e5661(0x4fe)][_0x3e5661(0x453)](_0x4ce095)&&_0x4c11f9['push'](Number(RegExp['$1'])),this[_0x3e5661(0x7be)]()[_0x3e5661(0x4fe)][_0x3e5661(0x453)](_0x4ce546)&&_0x25f42d[_0x3e5661(0x857)](Number(RegExp['$1'])),_0x47ba43=_0x4c11f9[_0x3e5661(0x53f)]((_0x334dbc,_0x27eaa2)=>_0x334dbc-_0x27eaa2,_0x47ba43),_0x47ba43>0x0&&(_0x47ba43=_0x25f42d[_0x3e5661(0x53f)]((_0x35a47f,_0x53264a)=>_0x35a47f*(0x1-_0x53264a),_0x47ba43)),_0x47ba43;},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x39e)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0x6cc)],Game_Action['prototype'][_0x3237d7(0x6cc)]=function(_0x13a9fa,_0x6c1647){const _0x5ec974=_0x3237d7;_0x6c1647=_0x6c1647*this['_multipliers'][_0x5ec974(0x4e2)],_0x6c1647+=this['_multipliers'][_0x5ec974(0xe6)]*(_0x6c1647>=0x0?0x1:-0x1),_0x6c1647=this[_0x5ec974(0x4f0)](_0x5ec974(0xa29),_0x13a9fa,_0x6c1647,![]),_0x6c1647=this['applyDamageCaps'](_0x6c1647),_0x6c1647=Math[_0x5ec974(0x222)](_0x6c1647),this[_0x5ec974(0x562)]=_0x6c1647,this['_totalValue']=this[_0x5ec974(0xb8)]||0x0,this[_0x5ec974(0xb8)]+=_0x6c1647,VisuMZ[_0x5ec974(0xa4)]['Game_Action_executeDamage']['call'](this,_0x13a9fa,_0x6c1647),this[_0x5ec974(0x4f0)]('PostDamage%1JS',_0x13a9fa,_0x6c1647,!![]);},Game_Action['prototype']['applyDamageCaps']=function(_0x58531b){const _0x394b9f=_0x3237d7;if(this['isBypassDamageCap']())return _0x58531b;return _0x58531b=this['applySoftDamageCap'](_0x58531b),_0x58531b=this[_0x394b9f(0x474)](_0x58531b),_0x58531b;},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x7a2)]=function(){const _0x2555dc=_0x3237d7,_0xf4f8ba=/<BYPASS DAMAGE CAP>/i;if(this[_0x2555dc(0x7be)]()[_0x2555dc(0x4fe)][_0x2555dc(0x453)](_0xf4f8ba))return!![];if(this[_0x2555dc(0x67f)]()[_0x2555dc(0x2d6)]()['some'](_0x2e845d=>_0x2e845d&&_0x2e845d[_0x2555dc(0x4fe)][_0x2555dc(0x453)](_0xf4f8ba)))return!![];return!VisuMZ['BattleCore'][_0x2555dc(0x98d)][_0x2555dc(0x626)][_0x2555dc(0x450)];},Game_Action['prototype'][_0x3237d7(0x7d4)]=function(_0x3bc59a){const _0x4ac69c=_0x3237d7;if(!VisuMZ[_0x4ac69c(0xa4)]['Settings'][_0x4ac69c(0x626)][_0x4ac69c(0x261)])return _0x3bc59a;const _0x306205=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()['note'][_0x4ac69c(0x453)](_0x306205))return!![];if(this[_0x4ac69c(0x67f)]()[_0x4ac69c(0x2d6)]()[_0x4ac69c(0x6e4)](_0x56a045=>_0x56a045&&_0x56a045[_0x4ac69c(0x4fe)][_0x4ac69c(0x453)](_0x306205)))return!![];const _0x24277d=_0x3bc59a<0x0?-0x1:0x1;_0x3bc59a=Math[_0x4ac69c(0x249)](_0x3bc59a);let _0x46e5b0=this[_0x4ac69c(0x67f)]()[_0x4ac69c(0x6d4)]();if(this[_0x4ac69c(0x7be)]()[_0x4ac69c(0x4fe)][_0x4ac69c(0x453)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)){if(_0x4ac69c(0xa4d)===_0x4ac69c(0x7a6))return this[_0x4ac69c(0x7e2)]();else _0x46e5b0+=Number(RegExp['$1'])/0x64;}_0x46e5b0=_0x46e5b0['clamp'](0.01,0x1);const _0x258872=this['getHardDamageCap'](),_0x5c1fbb=_0x46e5b0*_0x258872;if(_0x3bc59a>_0x5c1fbb&&_0x258872>_0x5c1fbb){_0x3bc59a-=_0x5c1fbb;const _0x553f48=VisuMZ[_0x4ac69c(0xa4)][_0x4ac69c(0x98d)][_0x4ac69c(0x626)][_0x4ac69c(0x963)],_0xeab63c=Math['max'](0x1-_0x3bc59a/((_0x258872-_0x5c1fbb)*_0x553f48+_0x3bc59a),0.01);_0x3bc59a*=_0xeab63c,_0x3bc59a+=_0x5c1fbb;}return _0x3bc59a*_0x24277d;},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x71d)]=function(){const _0xdb530b=_0x3237d7;if(this['item']()[_0xdb530b(0x4fe)][_0xdb530b(0x453)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0xdb530b(0x9c7)===_0xdb530b(0x9c7))return Number(RegExp['$1']);else this[_0xdb530b(0xbb)](...arguments);}else{if(_0xdb530b(0x8ac)!==_0xdb530b(0x8ac)){if(!_0x530f8c[_0xdb530b(0x59e)]())return![];return![];}else return this['subject']()['hardDamageCap']();}},Game_Action['prototype'][_0x3237d7(0x474)]=function(_0x2ccfc2){const _0x5e54a8=_0x3237d7;let _0x4062d1=this[_0x5e54a8(0x71d)]();return _0x2ccfc2[_0x5e54a8(0xa00)](-_0x4062d1,_0x4062d1);},VisuMZ[_0x3237d7(0xa4)]['Game_Action_apply']=Game_Action[_0x3237d7(0x735)]['apply'],Game_Action['prototype'][_0x3237d7(0x7ae)]=function(_0x2e24f6){const _0x338685=_0x3237d7;this['applyBattleCoreJS'](_0x338685(0xc5),_0x2e24f6,0x0,!![]),VisuMZ[_0x338685(0xa4)][_0x338685(0xa9e)][_0x338685(0x4db)](this,_0x2e24f6),this['applyBattleCoreJS'](_0x338685(0xaa7),_0x2e24f6,this[_0x338685(0x562)]||0x0,!![]),this[_0x338685(0x7a7)](_0x2e24f6);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x4f0)]=function(_0x43774d,_0x24cb3e,_0x5aa7c9,_0x1cecf4){const _0x3dc276=_0x3237d7;if(this[_0x3dc276(0x736)]||this['_tempActor'])return;_0x5aa7c9=_0x5aa7c9||0x0;const _0x47d7ac=_0x5aa7c9,_0x3ea4c7=VisuMZ['BattleCore'][_0x3dc276(0x98d)][_0x3dc276(0x87c)],_0x43f1f7=_0x43774d['format']('');if(_0x3ea4c7[_0x43f1f7]){if('gGulk'===_0x3dc276(0x4d4)){_0x5aa7c9=_0x3ea4c7[_0x43f1f7][_0x3dc276(0x4db)](this,_0x5aa7c9,_0x24cb3e);if(_0x1cecf4)_0x5aa7c9=_0x47d7ac;}else this[_0x3dc276(0x519)](_0x398ef8,_0x3db68d,_0x879290);}let _0x4181a4=VisuMZ['BattleCore'][_0x3dc276(0x17e)](this[_0x3dc276(0x7be)](),_0x43774d[_0x3dc276(0x117)](''));if(VisuMZ[_0x3dc276(0xa4)]['JS'][_0x4181a4]){if('VyMHk'!==_0x3dc276(0x4d7)){_0x5aa7c9=VisuMZ[_0x3dc276(0xa4)]['JS'][_0x4181a4][_0x3dc276(0x4db)](this,this[_0x3dc276(0x67f)](),_0x24cb3e,this[_0x3dc276(0x7be)](),_0x5aa7c9);if(_0x1cecf4)_0x5aa7c9=_0x47d7ac;}else{this[_0x3dc276(0x694)]['visible']=_0x972bab[_0x3dc276(0xb53)]();const _0x3cd7e6=_0x1719ac[_0x3dc276(0x5f9)]();if(_0x3cd7e6===this[_0x3dc276(0x694)][_0x3dc276(0x5f9)])return;this['_borderPortraitSprite'][_0x3dc276(0x5f9)]=_0x3cd7e6||this[_0x3dc276(0x694)][_0x3dc276(0x5f9)];if(!_0x3cd7e6)return;else{if(_0x3cd7e6[_0x3dc276(0x9a0)]()===''){this[_0x3dc276(0x694)][_0x3dc276(0x651)]=_0x20176e[_0x3dc276(0x66f)];return;}else{const _0x180144=_0x548413[_0x3dc276(0x108)](_0x3cd7e6[_0x3dc276(0x9a0)]());_0x180144['addLoadListener'](this[_0x3dc276(0x204)]['bind'](this,_0x180144));}}}}for(const _0x2d6a80 of this['subject']()[_0x3dc276(0x2d6)]()){if('FftcG'===_0x3dc276(0x577)){if(!_0x2d6a80)continue;_0x4181a4=VisuMZ[_0x3dc276(0xa4)][_0x3dc276(0x17e)](_0x2d6a80,_0x43774d[_0x3dc276(0x117)](_0x3dc276(0x60e)));if(VisuMZ[_0x3dc276(0xa4)]['JS'][_0x4181a4]){_0x5aa7c9=VisuMZ[_0x3dc276(0xa4)]['JS'][_0x4181a4][_0x3dc276(0x4db)](this,this[_0x3dc276(0x67f)](),_0x24cb3e,_0x2d6a80,_0x5aa7c9);if(_0x1cecf4)_0x5aa7c9=_0x47d7ac;}}else return _0x50a550[_0x3dc276(0x7ff)]()[_0x3dc276(0x921)](_0x1d478e=>_0x1d478e!==_0x368d3c);}for(const _0x133809 of _0x24cb3e[_0x3dc276(0x2d6)]()){if(!_0x133809)continue;_0x4181a4=VisuMZ['BattleCore'][_0x3dc276(0x17e)](_0x133809,_0x43774d['format'](_0x3dc276(0x5e5)));if(VisuMZ[_0x3dc276(0xa4)]['JS'][_0x4181a4]){if('OQLWa'!==_0x3dc276(0x6bd)){if(!this[_0x3dc276(0x820)])return;if(!this[_0x3dc276(0x34a)])return;const _0xb12c26=_0x395169[_0x3dc276(0xa4)]['Settings'][_0x3dc276(0x3c0)],_0x380c34=this['_hpGaugeSprite'];_0x380c34[_0x3dc276(0x6ad)]=this['isVisualHpGaugeDisplayed']();const _0x4417d0=_0xb12c26[_0x3dc276(0x252)],_0x587bb3=_0xb12c26[_0x3dc276(0x57b)];_0x380c34['x']=_0x4417d0,_0x380c34['x']+=this[_0x3dc276(0x820)][_0x3dc276(0x330)](),_0x380c34['y']=-this[_0x3dc276(0x766)]+_0x587bb3,_0x380c34['y']+=this['_battler'][_0x3dc276(0x41e)](),_0x116b94[_0x3dc276(0x4b2)]&&_0x1eea98[_0x3dc276(0x2a7)][_0x3dc276(0x314)]&&(_0x380c34['x']+=this['x'],_0x380c34['y']+=this['y']);}else{_0x5aa7c9=VisuMZ[_0x3dc276(0xa4)]['JS'][_0x4181a4]['call'](this,this[_0x3dc276(0x67f)](),_0x24cb3e,_0x133809,_0x5aa7c9);if(_0x1cecf4)_0x5aa7c9=_0x47d7ac;}}}return _0x5aa7c9;},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x51e)]=function(_0x575fe1){const _0x34fd80=_0x3237d7,_0x27970d=this['_totalValue']||0x0,_0x50daed=VisuMZ['BattleCore']['Settings'][_0x34fd80(0x87c)],_0x1b4bdf=_0x575fe1[_0x34fd80(0x117)]('');_0x50daed[_0x1b4bdf]&&_0x50daed[_0x1b4bdf][_0x34fd80(0x4db)](this,_0x27970d);let _0x51f3ec=VisuMZ[_0x34fd80(0xa4)][_0x34fd80(0x17e)](this[_0x34fd80(0x7be)](),_0x575fe1);if(VisuMZ[_0x34fd80(0xa4)]['JS'][_0x51f3ec]){if(_0x34fd80(0x103)!==_0x34fd80(0x103)){let _0x1440e1=_0x4320de[_0x34fd80(0xa4)][_0x34fd80(0x60b)][_0x34fd80(0x4db)](this);const _0x78d988=_0x2c22a5[_0x34fd80(0xa4)]['Settings'];if(_0x78d988[_0x34fd80(0x811)]['AddOption']&&_0x78d988['AutoBattle'][_0x34fd80(0x89d)])_0x1440e1+=0x2;if(_0x78d988[_0x34fd80(0x3c0)][_0x34fd80(0xafc)]&&_0x78d988[_0x34fd80(0x3c0)][_0x34fd80(0x89d)])_0x1440e1+=0x1;return _0x1440e1;}else VisuMZ[_0x34fd80(0xa4)]['JS'][_0x51f3ec][_0x34fd80(0x4db)](this,this[_0x34fd80(0x67f)](),this[_0x34fd80(0x67f)](),this[_0x34fd80(0x7be)](),_0x27970d);}for(const _0x38ae99 of this[_0x34fd80(0x67f)]()[_0x34fd80(0x2d6)]()){if(!_0x38ae99)continue;_0x51f3ec=VisuMZ[_0x34fd80(0xa4)]['createKeyJS'](_0x38ae99,_0x575fe1),VisuMZ[_0x34fd80(0xa4)]['JS'][_0x51f3ec]&&(_0x34fd80(0x56b)===_0x34fd80(0xa2e)?_0x51821b[_0x34fd80(0xa4)][_0x34fd80(0x76d)][_0x34fd80(0x4db)](this):VisuMZ[_0x34fd80(0xa4)]['JS'][_0x51f3ec][_0x34fd80(0x4db)](this,this['subject'](),this[_0x34fd80(0x67f)](),_0x38ae99,_0x27970d));}},Game_Action[_0x3237d7(0x735)][_0x3237d7(0xd9)]=function(){const _0x1e9328=_0x3237d7;return VisuMZ[_0x1e9328(0xa4)][_0x1e9328(0x98d)][_0x1e9328(0x87c)][_0x1e9328(0xdc)][_0x1e9328(0x4db)](this);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x10d)]=function(){const _0x5e8db0=_0x3237d7;return VisuMZ[_0x5e8db0(0xa4)][_0x5e8db0(0x98d)][_0x5e8db0(0x87c)][_0x5e8db0(0x3bf)];},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x745)]=function(){const _0x438335=_0x3237d7;return this[_0x438335(0x7be)]()[_0x438335(0x4fe)][_0x438335(0x453)](/<JS TARGETS>/i);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x685)]=function(){const _0x5eab40=_0x3237d7;if(!this[_0x5eab40(0x97d)]&&this[_0x5eab40(0x67f)]()[_0x5eab40(0x88b)]())return![];if(this[_0x5eab40(0x745)]())return!![];return typeof this['item']()[_0x5eab40(0xa89)]===_0x5eab40(0x951);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x299)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0x630)],Game_Action[_0x3237d7(0x735)][_0x3237d7(0x630)]=function(){const _0x31cc85=_0x3237d7;return this[_0x31cc85(0x685)]()&&!this[_0x31cc85(0x745)]()?'QdiUl'!=='xxVFl'?this[_0x31cc85(0x53d)]():this['maxItems']():VisuMZ[_0x31cc85(0xa4)]['Game_Action_isForOpponent'][_0x31cc85(0x4db)](this);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x53d)]=function(){const _0x45800a=_0x3237d7,_0x92cd7=this[_0x45800a(0x7be)]()[_0x45800a(0xa89)];return _0x92cd7['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x196)]=Game_Action[_0x3237d7(0x735)]['isForFriend'],Game_Action['prototype']['isForFriend']=function(){const _0x1a311a=_0x3237d7;return this[_0x1a311a(0x685)]()&&!this['isCustomBattleScope']()?this[_0x1a311a(0xaf5)]():VisuMZ[_0x1a311a(0xa4)][_0x1a311a(0x196)][_0x1a311a(0x4db)](this);},Game_Action['prototype'][_0x3237d7(0xaf5)]=function(){const _0x3345c7=_0x3237d7,_0x16564b=this[_0x3345c7(0x7be)]()[_0x3345c7(0xa89)];return _0x16564b[_0x3345c7(0x453)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x700)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0x4c0)],Game_Action['prototype']['isForRandom']=function(){const _0x22cc1a=_0x3237d7;return this['isBattleCoreTargetScope']()&&!this[_0x22cc1a(0x745)]()?this[_0x22cc1a(0x40d)]():VisuMZ[_0x22cc1a(0xa4)][_0x22cc1a(0x700)][_0x22cc1a(0x4db)](this);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x40d)]=function(){const _0x36093d=_0x3237d7,_0x2e94a9=this[_0x36093d(0x7be)]()[_0x36093d(0xa89)];return _0x2e94a9['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x3237d7(0xa4)]['Game_Action_needsSelection']=Game_Action[_0x3237d7(0x735)][_0x3237d7(0xa81)],Game_Action[_0x3237d7(0x735)]['needsSelection']=function(){const _0x4f6660=_0x3237d7;return this['isBattleCoreTargetScope']()&&!this[_0x4f6660(0x745)]()?this[_0x4f6660(0x3d2)]():VisuMZ['BattleCore'][_0x4f6660(0x310)][_0x4f6660(0x4db)](this);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x3d2)]=function(){const _0x41d6be=_0x3237d7,_0x56055b=this['item']()[_0x41d6be(0xa89)];if(_0x56055b[_0x41d6be(0x453)](/RANDOM/i))return![];if(_0x56055b['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x56055b[_0x41d6be(0x453)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x41d6be(0xa4)][_0x41d6be(0x310)]['call'](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x511)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0x3fe)],Game_Action[_0x3237d7(0x735)][_0x3237d7(0x3fe)]=function(){const _0x2cedee=_0x3237d7;let _0x368011=[];if(this[_0x2cedee(0x685)]())_0x368011=this[_0x2cedee(0x738)]();else{if('mxDKP'!==_0x2cedee(0xa77))_0x368011=VisuMZ[_0x2cedee(0xa4)][_0x2cedee(0x511)]['call'](this);else{const _0x1b763a=_0x39422d[_0x2cedee(0x14f)],_0x11bdcb='autoBattleAtStart';this[_0x2cedee(0x557)](_0x1b763a,_0x11bdcb);}}return _0x368011=this[_0x2cedee(0x198)](_0x368011),_0x368011;},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x738)]=function(){const _0x4c826c=_0x3237d7;let _0x1fcc85=[];const _0x70e819=String(this[_0x4c826c(0x7be)]()[_0x4c826c(0xa89)]),_0x3374b8=VisuMZ[_0x4c826c(0xa4)][_0x4c826c(0x17e)](this[_0x4c826c(0x7be)](),'Targets');if(VisuMZ[_0x4c826c(0xa4)]['JS'][_0x3374b8]){_0x1fcc85=VisuMZ[_0x4c826c(0xa4)][_0x4c826c(0x511)][_0x4c826c(0x4db)](this);const _0x1cb8ba=VisuMZ['BattleCore'][_0x4c826c(0x17e)](this[_0x4c826c(0x7be)](),_0x4c826c(0x30e));return _0x1fcc85=VisuMZ['BattleCore']['JS'][_0x1cb8ba]['call'](this,this[_0x4c826c(0x67f)](),_0x1fcc85),this[_0x4c826c(0x37f)](_0x1fcc85);}if(_0x70e819['match'](/(\d+) RANDOM ANY/i)){let _0x838222=Number(RegExp['$1']);while(_0x838222--){if(_0x4c826c(0x4b3)!==_0x4c826c(0x26f)){const _0x3be710=Math['randomInt'](0x2)===0x0?this[_0x4c826c(0x26c)]():this[_0x4c826c(0x889)]();_0x1fcc85[_0x4c826c(0x857)](_0x3be710[_0x4c826c(0xb0e)]());}else _0x3260ae=_0x2f4e0d[_0x4c826c(0x169)](_0x3876d5[_0x4c826c(0x37e)](_0x5d35a3));}return this['repeatTargets'](_0x1fcc85);}if(_0x70e819[_0x4c826c(0x453)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x49cacd=Number(RegExp['$1']);while(_0x49cacd--){'vfXXJ'===_0x4c826c(0x2c8)?(this[_0x4c826c(0x2a8)]['push'](_0x368b17),this[_0x4c826c(0xaa6)](),this[_0x4c826c(0x4a1)]()):_0x1fcc85[_0x4c826c(0x857)](this[_0x4c826c(0x26c)]()[_0x4c826c(0xb0e)]());}return this[_0x4c826c(0x37f)](_0x1fcc85);}if(_0x70e819[_0x4c826c(0x453)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x4c826c(0xa13)!==_0x4c826c(0xa13))return![];else{let _0x523076=Number(RegExp['$1']);while(_0x523076--){_0x1fcc85[_0x4c826c(0x857)](this['friendsUnit']()['trueRandomTarget']());}return this[_0x4c826c(0x37f)](_0x1fcc85);}}if(_0x70e819[_0x4c826c(0x453)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x4c826c(0x609)!==_0x4c826c(0x7d3)?(_0x1fcc85[_0x4c826c(0x857)](...this['friendsUnit']()[_0x4c826c(0x7ff)]()[_0x4c826c(0x921)](_0x407f7e=>_0x407f7e!==this['subject']())),this[_0x4c826c(0x37f)](_0x1fcc85)):_0x48344b['prototype']['isOkEnabled'][_0x4c826c(0x4db)](this)&&this['isActionSelectionValid']();return VisuMZ[_0x4c826c(0xa4)]['Game_Action_makeTargets'][_0x4c826c(0x4db)](this);},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x6a4)]=function(_0x12dcff){const _0x4836b2=_0x3237d7,_0x533963=[];for(let _0x389c24=0x0;_0x389c24<this[_0x4836b2(0x1d4)]();_0x389c24++){_0x533963[_0x4836b2(0x857)](_0x12dcff[_0x4836b2(0xb0e)]());}return _0x533963;},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x198)]=function(_0x5dd555){const _0x5e4c72=_0x3237d7;if(!this[_0x5e4c72(0x7be)]())return _0x5dd555;const _0x5064d4=this[_0x5e4c72(0x7be)]()[_0x5e4c72(0x4fe)];if(_0x5064d4[_0x5e4c72(0x453)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x5e4c72(0x322)===_0x5e4c72(0x322))_0x5dd555[_0x5e4c72(0x28b)](this['subject']());else return this[_0x5e4c72(0x139)]()&&this[_0x5e4c72(0x139)]()[_0x5e4c72(0x7be)]()&&!this[_0x5e4c72(0x139)]()[_0x5e4c72(0x2f8)]();}return _0x5dd555;},VisuMZ['BattleCore'][_0x3237d7(0xa2d)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0x7f3)],Game_Action['prototype'][_0x3237d7(0x7f3)]=function(_0x480bb9,_0x2b7fa2){const _0x4e2bbd=_0x3237d7;VisuMZ[_0x4e2bbd(0xa4)][_0x4e2bbd(0xa2d)][_0x4e2bbd(0x4db)](this,_0x480bb9,_0x2b7fa2);if(!_0x480bb9['isImmortal']())return;for(const _0x44ef62 of this[_0x4e2bbd(0x67f)]()[_0x4e2bbd(0x9c2)]()){if(_0x44ef62===_0x480bb9[_0x4e2bbd(0x97b)]()){if(_0x4e2bbd(0x4d1)!=='lbGsu'){let _0x5032b4=_0x2b7fa2[_0x4e2bbd(0x391)];_0x5032b4*=_0x480bb9[_0x4e2bbd(0x17d)](_0x44ef62),_0x5032b4*=this['subject']()['attackStatesRate'](_0x44ef62),_0x5032b4*=this['lukEffectRate'](_0x480bb9),Math[_0x4e2bbd(0x79e)]()<_0x5032b4&&(_0x480bb9[_0x4e2bbd(0x3c7)]=!![],this[_0x4e2bbd(0x98e)](_0x480bb9));}else{if(this[_0x4e2bbd(0x40f)]())_0xbe7cb5[_0x4e2bbd(0xa4)][_0x4e2bbd(0x73c)][_0x4e2bbd(0x4db)](this);}}}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xae2)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0xa55)],Game_Action[_0x3237d7(0x735)][_0x3237d7(0xa55)]=function(_0x19af16,_0xcb8c11){const _0x58aa62=_0x3237d7;VisuMZ[_0x58aa62(0xa4)][_0x58aa62(0xae2)][_0x58aa62(0x4db)](this,_0x19af16,_0xcb8c11);if(!_0x19af16[_0x58aa62(0x486)]())return;if(_0xcb8c11[_0x58aa62(0xb50)]!==_0x19af16[_0x58aa62(0x97b)]())return;let _0x573bb0=_0xcb8c11['value1'];!this[_0x58aa62(0x40a)]()&&(_0x573bb0*=_0x19af16[_0x58aa62(0x17d)](_0xcb8c11['dataId']),_0x573bb0*=this[_0x58aa62(0x710)](_0x19af16)),Math[_0x58aa62(0x79e)]()<_0x573bb0&&(_0x19af16[_0x58aa62(0x3c7)]=!![],this[_0x58aa62(0x98e)](_0x19af16));},VisuMZ[_0x3237d7(0xa4)]['Game_Action_applyGlobal']=Game_Action[_0x3237d7(0x735)][_0x3237d7(0x3ab)],Game_Action[_0x3237d7(0x735)]['applyGlobal']=function(){const _0xafce3=_0x3237d7;VisuMZ['BattleCore'][_0xafce3(0x534)]['call'](this),this[_0xafce3(0x1c7)](),this[_0xafce3(0x298)]();},Game_Action[_0x3237d7(0x735)][_0x3237d7(0x1c7)]=function(){const _0x1a6917=_0x3237d7;if(!SceneManager[_0x1a6917(0x5cb)]())return;const _0x588267=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x56d83a=this[_0x1a6917(0x7be)]()[_0x1a6917(0x4fe)][_0x1a6917(0x453)](_0x588267);if(_0x56d83a)for(const _0x5b6ee8 of _0x56d83a){if(!_0x5b6ee8)continue;_0x5b6ee8['match'](_0x588267);const _0x256c5c=String(RegExp['$1'])[_0x1a6917(0x2cf)](',')['map'](_0x3aa2d6=>String(_0x3aa2d6)[_0x1a6917(0x194)]()),_0x4a237f=_0x256c5c[_0x1a6917(0x1e0)](_0xf1e2fc=>DataManager[_0x1a6917(0x66c)](_0xf1e2fc));for(const _0x238cd3 of _0x4a237f){if(_0x1a6917(0x882)!==_0x1a6917(0x1c3)){const _0x2de966=$dataCommonEvents[_0x238cd3];_0x2de966&&(_0x1a6917(0x5d2)!==_0x1a6917(0x5d2)?(this[_0x1a6917(0x694)]['x']=0x0,this[_0x1a6917(0x4de)]=_0x265870['ceil'](_0x53f47c[_0x1a6917(0xa28)]/0x2)):$gameTemp['reserveCommonEvent'](_0x238cd3));}else this['requestMotion'](_0x1a6917(0xa3e));}}},DataManager[_0x3237d7(0x66c)]=function(_0x220206){const _0x1b6ecf=_0x3237d7;_0x220206=_0x220206[_0x1b6ecf(0x566)]()['trim'](),this[_0x1b6ecf(0x683)]=this[_0x1b6ecf(0x683)]||{};if(this[_0x1b6ecf(0x683)][_0x220206])return this[_0x1b6ecf(0x683)][_0x220206];for(const _0x2a9b3a of $dataCommonEvents){if(!_0x2a9b3a)continue;let _0x5e106a=_0x2a9b3a[_0x1b6ecf(0x444)];_0x5e106a=_0x5e106a[_0x1b6ecf(0x268)](/\x1I\[(\d+)\]/gi,''),_0x5e106a=_0x5e106a[_0x1b6ecf(0x268)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x5e106a[_0x1b6ecf(0x566)]()[_0x1b6ecf(0x194)]()]=_0x2a9b3a['id'];}return this[_0x1b6ecf(0x683)][_0x220206]||0x0;},Game_Action['prototype'][_0x3237d7(0x298)]=function(){const _0x110cd9=_0x3237d7;if(!SceneManager[_0x110cd9(0x5cb)]())return;const _0x199f70=VisuMZ[_0x110cd9(0xa4)]['Settings'][_0x110cd9(0x87c)];_0x199f70['SwitchCritical']&&(_0x110cd9(0x39a)==='vtreW'?_0x19648f[_0x110cd9(0xa4)][_0x110cd9(0x627)][_0x110cd9(0x4db)](this,_0x1c3317):$gameSwitches[_0x110cd9(0x5a2)](_0x199f70[_0x110cd9(0xb45)],![])),_0x199f70[_0x110cd9(0x1bf)]&&$gameSwitches[_0x110cd9(0x5a2)](_0x199f70[_0x110cd9(0x1bf)],![]),_0x199f70[_0x110cd9(0x32f)]&&('VGnMv'===_0x110cd9(0x854)?this[_0x110cd9(0xb1)]='border':$gameVariables[_0x110cd9(0x5a2)](_0x199f70[_0x110cd9(0x32f)],0x0)),_0x199f70[_0x110cd9(0x443)]&&$gameVariables['setValue'](_0x199f70[_0x110cd9(0x443)],0x0);},Game_Action['prototype'][_0x3237d7(0x7a7)]=function(_0x5d31c4){const _0x33bdcf=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!_0x5d31c4)return;const _0x447234=_0x5d31c4[_0x33bdcf(0x634)](),_0x2dbfd7=VisuMZ[_0x33bdcf(0xa4)]['Settings']['Mechanics'];_0x2dbfd7[_0x33bdcf(0xb45)]&&_0x447234['critical']&&$gameSwitches[_0x33bdcf(0x5a2)](_0x2dbfd7[_0x33bdcf(0xb45)],!![]);_0x2dbfd7['SwitchMissEvade']&&(_0x447234['missed']||_0x447234[_0x33bdcf(0x2bb)])&&(_0x33bdcf(0x77f)!==_0x33bdcf(0x77f)?_0x5b247e[_0x33bdcf(0x17b)](_0x4b9de1[_0x33bdcf(0x86a)]||'',_0x27bb73[_0x33bdcf(0x654)]||0x0):$gameSwitches[_0x33bdcf(0x5a2)](_0x2dbfd7[_0x33bdcf(0x1bf)],!![]));if(_0x2dbfd7[_0x33bdcf(0x32f)]){if(_0x33bdcf(0xa65)!=='gClHX'){let _0xe70819=$gameVariables[_0x33bdcf(0x335)](_0x2dbfd7[_0x33bdcf(0x32f)]);_0x447234[_0x33bdcf(0x260)]>0x0&&(_0x33bdcf(0x470)===_0x33bdcf(0x9a7)?_0x4abca5['push'](_0x3491b4(_0x2b569f['$1'])):_0xe70819+=Math[_0x33bdcf(0x249)](_0x447234['hpDamage'])),$gameVariables['setValue'](_0x2dbfd7['VariableDmg'],_0xe70819);}else!_0x574818[_0x33bdcf(0x4ff)]()[_0x33bdcf(0x231)](this[_0x33bdcf(0x2be)])&&(this[_0x33bdcf(0x2be)]=null);}if(_0x2dbfd7[_0x33bdcf(0x443)]){if(_0x33bdcf(0x70c)!==_0x33bdcf(0x70c))_0x31f98e[_0x33bdcf(0xa4)]['ParseStateNotetags']&&_0x212a94['BattleCore'][_0x33bdcf(0x57c)][_0x33bdcf(0x4db)](this,_0x117b63),_0x1b9116[_0x33bdcf(0xa4)]['Parse_Notetags_TraitObjects'](_0x22692f);else{let _0x15bb1b=$gameVariables['value'](_0x2dbfd7[_0x33bdcf(0x443)]);if(_0x447234['hpDamage']<0x0){if('xcyuL'!=='xcyuL'){_0x94099e[_0x33bdcf(0x735)][_0x33bdcf(0x5d8)]['call'](this,_0x19ace9);if(this[_0x33bdcf(0x9f5)]())this[_0x33bdcf(0x652)](_0x12218a);}else _0x15bb1b+=Math['abs'](_0x447234[_0x33bdcf(0x260)]);}$gameVariables[_0x33bdcf(0x5a2)](_0x2dbfd7[_0x33bdcf(0x443)],_0x15bb1b);}}},VisuMZ[_0x3237d7(0xa4)]['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x96b)],Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x96b)]=function(){const _0x449208=_0x3237d7;VisuMZ[_0x449208(0xa4)]['Game_BattlerBase_initMembers'][_0x449208(0x4db)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x3237d7(0x735)]['initMembersBattleCore']=function(){const _0x3d89fc=_0x3237d7;this[_0x3d89fc(0x863)]=![];},VisuMZ['BattleCore']['Game_BattlerBase_refresh']=Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0xaa6)],Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0xaa6)]=function(){const _0x36f149=_0x3237d7;this[_0x36f149(0xa2)]={},VisuMZ['BattleCore'][_0x36f149(0x8e8)]['call'](this);},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x94e)]=function(_0xf8962c){const _0x497e4a=_0x3237d7;return this[_0x497e4a(0xa2)]=this[_0x497e4a(0xa2)]||{},this['_cache'][_0xf8962c]!==undefined;},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0xa83)]=function(){const _0x1c41cb=_0x3237d7;if(this[_0x1c41cb(0xa2)][_0x1c41cb(0xa83)]!==undefined)return this[_0x1c41cb(0xa2)][_0x1c41cb(0xa83)];const _0x4f298b=/<DAMAGE CAP:[ ](\d+)>/i,_0x21ba02=this[_0x1c41cb(0x2d6)]()['map'](_0x137424=>_0x137424&&_0x137424[_0x1c41cb(0x4fe)][_0x1c41cb(0x453)](_0x4f298b)?Number(RegExp['$1']):0x0);let _0x478a9d=_0x21ba02[_0x1c41cb(0x60c)]>0x0?Math[_0x1c41cb(0x2e0)](..._0x21ba02):0x0;if(_0x478a9d<=0x0)_0x478a9d=VisuMZ[_0x1c41cb(0xa4)][_0x1c41cb(0x98d)][_0x1c41cb(0x626)][_0x1c41cb(0x1cc)];return this[_0x1c41cb(0xa2)]['hardDamageCap']=_0x478a9d,this[_0x1c41cb(0xa2)][_0x1c41cb(0xa83)];},Game_BattlerBase[_0x3237d7(0x735)]['softDamageCapRate']=function(){const _0x7e59cb=_0x3237d7;if(this[_0x7e59cb(0xa2)][_0x7e59cb(0x3b0)]!==undefined)return this[_0x7e59cb(0xa2)][_0x7e59cb(0x3b0)];let _0x2c0ce6=VisuMZ['BattleCore']['Settings'][_0x7e59cb(0x626)][_0x7e59cb(0x1db)];const _0x25049b=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x11b8a0=this[_0x7e59cb(0x2d6)]()[_0x7e59cb(0x1e0)](_0x47151a=>_0x47151a&&_0x47151a[_0x7e59cb(0x4fe)][_0x7e59cb(0x453)](_0x25049b)?Number(RegExp['$1'])/0x64:0x0);return _0x2c0ce6=_0x11b8a0[_0x7e59cb(0x53f)]((_0x22fc21,_0x279ccf)=>_0x22fc21+_0x279ccf,_0x2c0ce6),this['_cache'][_0x7e59cb(0x3b0)]=_0x2c0ce6,this[_0x7e59cb(0xa2)][_0x7e59cb(0x3b0)][_0x7e59cb(0xa00)](0.01,0x1);},VisuMZ['BattleCore'][_0x3237d7(0x9b6)]=Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x1e8)],Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x1e8)]=function(){const _0xaaa6c=_0x3237d7;VisuMZ[_0xaaa6c(0xa4)][_0xaaa6c(0x9b6)][_0xaaa6c(0x4db)](this);if(SceneManager[_0xaaa6c(0x5cb)]()){if(_0xaaa6c(0x3de)===_0xaaa6c(0x390)){const _0x5e8e80=_0x4b7cf7[_0x4b1313];if(_0x5e8e80){if(_0x5e8e80[_0xaaa6c(0x4fe)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1a16bb=_0x407c89(_0x69e437['$1'])[_0xaaa6c(0x2cf)](/[\r\n]+/)[_0xaaa6c(0x28b)](''),_0x2e746f=this[_0xaaa6c(0x8c9)](_0x1a16bb);_0x305130=this['getEnemyIdWithName'](_0x2e746f)||_0x1ea5c8,_0x5b8263=_0x3c5cf9[_0xaaa6c(0x7d7)](_0x316415);}}return _0xcb133b;}else this['requestMotion'](_0xaaa6c(0x979));}},Game_BattlerBase[_0x3237d7(0x735)]['battler']=function(){const _0x3dc20b=_0x3237d7;if(!SceneManager[_0x3dc20b(0x5cb)]())return null;if(!SceneManager[_0x3dc20b(0x2a7)][_0x3dc20b(0x314)])return null;return SceneManager[_0x3dc20b(0x2a7)][_0x3dc20b(0x314)][_0x3dc20b(0x463)](this);},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x357)]=function(){const _0xead62d=_0x3237d7;return VisuMZ['BattleCore'][_0xead62d(0x98d)]['Actor'][_0xead62d(0x880)];},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x565)]=function(){const _0xdf1493=_0x3237d7;return VisuMZ[_0xdf1493(0xa4)]['Settings'][_0xdf1493(0x4da)][_0xdf1493(0x9f1)];},Game_BattlerBase['prototype'][_0x3237d7(0x44c)]=function(){const _0x5ba41c=_0x3237d7;if(this[_0x5ba41c(0x5ef)]&&this[_0x5ba41c(0x5ef)]()){if('XITUs'===_0x5ba41c(0x96c)){if(!_0x3f4741[_0x5ba41c(0x59e)]())return;const _0x521f3e=this['battler']();if(!_0x521f3e)return;if(_0x2da94b)this['setBattlerFacePoint'](_0x210955+_0x521f3e[_0x5ba41c(0x642)],_0xc2692f+_0x521f3e[_0x5ba41c(0x9ed)],![]);_0x5c971c+=_0x521f3e[_0x5ba41c(0x7e8)],_0x114baf+=_0x521f3e['_homeY'],_0x521f3e['startHomeMove'](_0x2c329f,_0x5c3a4b,_0x286ab4,_0x14deef),this[_0x5ba41c(0x792)]=_0xf0ab36,this[_0x5ba41c(0xac2)]=_0x3c048d;}else return VisuMZ['BattleCore'][_0x5ba41c(0x98d)][_0x5ba41c(0x4da)][_0x5ba41c(0xa24)];}else return VisuMZ[_0x5ba41c(0xa4)][_0x5ba41c(0x98d)]['Enemy']['Shadow'];},Game_BattlerBase[_0x3237d7(0x735)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x330)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x3237d7(0x41e)]=function(){return 0x0;},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x389)]=function(_0x2ba6f3){const _0x5b0ade=_0x3237d7;if(!_0x2ba6f3)return 0x0;let _0x5b06be=0x0;const _0x93a384=_0x2ba6f3[_0x5b0ade(0x4fe)];_0x93a384['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x5b06be+=Number(RegExp['$1']));if(_0x93a384[_0x5b0ade(0x453)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x5b0ade(0xb4d)!=='UoeNs'){if(!_0x5f0110)return![];return _0x4a1e7f[_0x5b0ade(0x26c)]()===this[_0x5b0ade(0x889)]();}else _0x5b06be+=Number(RegExp['$1']);}return _0x5b06be;},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x742)]=function(_0x9b3157){const _0x3cd503=_0x3237d7;if(!_0x9b3157)return 0x0;let _0x4ad590=0x0;const _0x3db97e=_0x9b3157[_0x3cd503(0x4fe)];return _0x3db97e[_0x3cd503(0x453)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x4ad590+=Number(RegExp['$1'])),_0x3db97e['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4ad590+=Number(RegExp['$2'])),_0x4ad590;},VisuMZ['BattleCore'][_0x3237d7(0x680)]=Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x824)],Game_BattlerBase[_0x3237d7(0x735)]['isStateResist']=function(_0x3627ec){const _0x254aa5=_0x3237d7;if(_0x3627ec===this[_0x254aa5(0x97b)]()&&this[_0x254aa5(0x486)]()){if(_0x254aa5(0x973)!==_0x254aa5(0x973))this[_0x254aa5(0x394)]();else return!![];}return VisuMZ[_0x254aa5(0xa4)][_0x254aa5(0x680)]['call'](this,_0x3627ec);},Game_BattlerBase['prototype']['isImmortal']=function(){const _0x2978d0=_0x3237d7;return this[_0x2978d0(0x863)];},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x47c)]=function(_0x17cf8c){_0x17cf8c?this['addImmortal']():this['removeImmortal']();},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x358)]=function(){const _0x3a368c=_0x3237d7;if(this[_0x3a368c(0x4a3)]())return;this[_0x3a368c(0x863)]=!![],this[_0x3a368c(0x3c7)]=![];},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x64e)]=function(){const _0x34e3a6=_0x3237d7,_0x346374=this[_0x34e3a6(0x101)]();this[_0x34e3a6(0x863)]=![],_0x346374&&this[_0x34e3a6(0x3c7)]&&this['die'](),this[_0x34e3a6(0x3c7)]=![],this['refresh'](),this[_0x34e3a6(0x4a3)]()&&_0x346374&&(this['performCollapse'](),this[_0x34e3a6(0x695)]());},VisuMZ['BattleCore'][_0x3237d7(0x420)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0x9e8)],Game_Action[_0x3237d7(0x735)][_0x3237d7(0x9e8)]=function(){const _0x40ec7b=_0x3237d7;return this[_0x40ec7b(0x7be)]()?_0x40ec7b(0x1b1)==='oBTJo'?VisuMZ[_0x40ec7b(0xa4)][_0x40ec7b(0x420)][_0x40ec7b(0x4db)](this):_0x166bce[_0x40ec7b(0x5cb)]()?_0x182df5['_scene'][_0x40ec7b(0x314)][_0x40ec7b(0x7c0)]:this[_0x40ec7b(0xb23)]:0x0;},VisuMZ['BattleCore'][_0x3237d7(0x279)]=Game_Action[_0x3237d7(0x735)][_0x3237d7(0xea)],Game_Action['prototype'][_0x3237d7(0xea)]=function(){const _0x180991=_0x3237d7;this[_0x180991(0x67f)]()&&this[_0x180991(0x67f)]()[_0x180991(0x1ba)]()?VisuMZ[_0x180991(0xa4)][_0x180991(0x279)]['call'](this):this[_0x180991(0x2d9)]();},VisuMZ['BattleCore'][_0x3237d7(0xe3)]=Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x1ba)],Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x1ba)]=function(){const _0x5a9c4c=_0x3237d7;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x5a9c4c(0xa4)][_0x5a9c4c(0xe3)]['call'](this);},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x777)]=function(){const _0x144d8c=_0x3237d7;for(const _0x5e8145 of this[_0x144d8c(0x2d6)]()){if('ApvxZ'!==_0x144d8c(0x600)){this[_0x144d8c(0x5b7)]=_0x5cf017;const _0x35d9dd=this[_0x144d8c(0x444)](),_0x5bf965=this['bitmapWidth'](),_0x29ad84=_0x17cc16[_0x144d8c(0x735)][_0x144d8c(0x46e)]();this[_0x144d8c(0x817)](),this[_0x144d8c(0x651)][_0x144d8c(0x2d9)](),this[_0x144d8c(0x651)][_0x144d8c(0x1ed)](_0x35d9dd,0x0,0x0,_0x5bf965,_0x29ad84,_0x144d8c(0x415));}else{if(!_0x5e8145)continue;if(_0x5e8145[_0x144d8c(0x4fe)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ[_0x3237d7(0xa4)]['Game_Action_setGuard']=Game_Action['prototype']['setGuard'],Game_Action[_0x3237d7(0x735)][_0x3237d7(0x8a5)]=function(){const _0xbaa706=_0x3237d7;this['subject']()[_0xbaa706(0x866)]()&&VisuMZ[_0xbaa706(0xa4)][_0xbaa706(0x4cc)][_0xbaa706(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x5d4)]=Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x866)],Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0x866)]=function(){const _0x53bd98=_0x3237d7;if(!this[_0x53bd98(0x3c2)]())return![];return VisuMZ[_0x53bd98(0xa4)][_0x53bd98(0x5d4)][_0x53bd98(0x4db)](this);},Game_BattlerBase[_0x3237d7(0x735)]['canGuardBattleCore']=function(){const _0xa706ca=_0x3237d7;for(const _0x363d5d of this[_0xa706ca(0x2d6)]()){if(_0xa706ca(0x36c)!==_0xa706ca(0x36c))this[_0xa706ca(0x85a)](_0xa706ca(0x960));else{if(!_0x363d5d)continue;if(_0x363d5d['note'][_0xa706ca(0x453)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0xacb)]=function(){const _0x49ad1d=_0x3237d7;for(const _0x43ac60 of this[_0x49ad1d(0x2d6)]()){if(_0x49ad1d(0x794)!=='xkYyE'){if(!_0x3f3cf8['isSceneBattle']())return;_0xca835d[_0x49ad1d(0x3d3)](_0x4176e0,_0x553f33);const _0x541936=_0x3ee691[_0x49ad1d(0x968)](),_0x205ad2=_0x22441a[_0x49ad1d(0x343)],_0x100b63=_0x4c11d1[_0x49ad1d(0xb5c)],_0x59ccc5=_0x1dac59[_0x49ad1d(0xabe)]?_0x4a7725[_0x49ad1d(0xabe)]['slice'](0x0):[],_0x2c5b07=_0x3ef895[_0x49ad1d(0x1cd)];if(!_0x541936||!_0x205ad2||!_0x100b63)return;if(!_0x205ad2[_0x49ad1d(0x7be)]())return;if(_0x152f22[_0x49ad1d(0x545)])_0x2c5b07[_0x49ad1d(0x5ad)](_0x100b63,_0x205ad2[_0x49ad1d(0x7be)]());_0x4c100e[_0x49ad1d(0x3f1)]&&_0x2c5b07[_0x49ad1d(0x857)](_0x49ad1d(0x8b4),_0x100b63,_0x59ccc5,!![]);if(_0x502dd0[_0x49ad1d(0x13c)])_0x2c5b07[_0x49ad1d(0x857)](_0x49ad1d(0x8be),_0x100b63,_0x205ad2);if(_0x33aac1[_0x49ad1d(0xb08)])_0x2c5b07[_0x49ad1d(0x857)](_0x49ad1d(0x962));if(_0x213676[_0x49ad1d(0x8bd)])_0x2c5b07['push'](_0x49ad1d(0x6fb),_0x100b63,_0x205ad2);if(_0x1f6322[_0x49ad1d(0x393)])_0x2c5b07[_0x49ad1d(0x857)](_0x49ad1d(0x9c5));_0x541936[_0x49ad1d(0x20e)](_0x49ad1d(0x7d6));}else{if(!_0x43ac60)continue;if(_0x43ac60[_0x49ad1d(0x4fe)][_0x49ad1d(0x453)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},Game_Battler[_0x3237d7(0x735)]['allowRandomSpeed']=function(){const _0x5e86b8=_0x3237d7;return VisuMZ[_0x5e86b8(0xa4)][_0x5e86b8(0x98d)]['Mechanics'][_0x5e86b8(0x3bf)];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x6ef)]=Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x212)],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x212)]=function(){const _0x3f4cef=_0x3237d7;if(SceneManager[_0x3f4cef(0x5cb)]()&&$gameTroop[_0x3f4cef(0x4d3)]()<=0x0)return;if(SceneManager[_0x3f4cef(0x5cb)]()&&BattleManager[_0x3f4cef(0x77b)]()&&this[_0x3f4cef(0x60a)]===Graphics[_0x3f4cef(0x9e3)])return;this[_0x3f4cef(0x60a)]=Graphics[_0x3f4cef(0x9e3)];SceneManager[_0x3f4cef(0x5cb)]()&&this[_0x3f4cef(0x9ea)]('PreRegenerateJS');VisuMZ['BattleCore'][_0x3f4cef(0x6ef)][_0x3f4cef(0x4db)](this);if(SceneManager['isSceneBattle']()){if('QoXPQ'===_0x3f4cef(0x8dd))this['regenerateAllBattleCore'](),this[_0x3f4cef(0x9ea)](_0x3f4cef(0x84b));else{if(!this[_0x3f4cef(0x7c0)])return;if(!this[_0x3f4cef(0x8ca)])return;const _0x5bdb9c=_0x20b59b[_0x3f4cef(0x4b2)]?this['_damageContainer']['x']:0x0,_0xa170dd=_0x18806a[_0x3f4cef(0x4b2)]?this['_damageContainer']['y']:0x0,_0x45878a=_0xc3758f[_0x3f4cef(0x255)]?this[_0x3f4cef(0x55b)]['x']:0x0,_0xd22418=_0x13caac[_0x3f4cef(0x255)]?this[_0x3f4cef(0x55b)]['y']:0x0;this[_0x3f4cef(0x8ca)]['x']=_0x5bdb9c+_0x45878a,this[_0x3f4cef(0x8ca)]['y']=_0xa170dd+_0xd22418;}}},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x215)]=function(){const _0x5a67d9=_0x3237d7;if(SceneManager['isSceneBattle']())for(const _0x578a12 of this['traitObjects']()){if(_0x5a67d9(0x885)===_0x5a67d9(0xe8))this[_0x5a67d9(0xa02)]['visible']=![];else{if(!_0x578a12)continue;this['onRegeneratePlayStateAnimation'](_0x578a12);}}},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x8a7)]=function(_0x2085a5){const _0x35201c=_0x3237d7;if(!Imported[_0x35201c(0x38d)])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x35201c(0x4a3)]())return;if(this['isHidden']())return;if(_0x2085a5[_0x35201c(0x4fe)][_0x35201c(0x453)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x10a105=Number(RegExp['$1']);$gameTemp[_0x35201c(0x90e)]([this],_0x10a105,![],![]);}},VisuMZ[_0x3237d7(0xa4)]['Game_Battler_startTpbTurn']=Game_Battler['prototype'][_0x3237d7(0x598)],Game_Battler['prototype'][_0x3237d7(0x598)]=function(){const _0x14b76b=_0x3237d7;this[_0x14b76b(0x9ea)]('PreStartTurnJS'),VisuMZ[_0x14b76b(0xa4)][_0x14b76b(0xc1)][_0x14b76b(0x4db)](this),this[_0x14b76b(0x9ea)](_0x14b76b(0x253));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x175)]=Game_Battler['prototype'][_0x3237d7(0x525)],Game_Battler[_0x3237d7(0x735)]['onTurnEnd']=function(){const _0x1a2320=_0x3237d7;this[_0x1a2320(0x9ea)]('PreEndTurnJS'),VisuMZ[_0x1a2320(0xa4)][_0x1a2320(0x175)][_0x1a2320(0x4db)](this),this['processBattleCoreJS'](_0x1a2320(0x663));},Game_Battler['prototype']['processBattleCoreJS']=function(_0x7ca1b3){const _0x307651=_0x3237d7;if(this[_0x307651(0x736)]||this[_0x307651(0x9e1)])return;const _0x39e4b8=VisuMZ['BattleCore'][_0x307651(0x98d)][_0x307651(0x87c)];if(_0x39e4b8[_0x7ca1b3])_0x39e4b8[_0x7ca1b3][_0x307651(0x4db)](this);for(const _0x248f66 of this['traitObjects']()){if(!_0x248f66)continue;key=VisuMZ[_0x307651(0xa4)][_0x307651(0x17e)](_0x248f66,_0x7ca1b3);if(VisuMZ['BattleCore']['JS'][key]){if('AZVof'!=='AZVof'){const _0x310b30=_0x422c33(_0x2e3f46['$1'])[_0x307651(0x2cf)](/[\r\n]+/)[_0x307651(0x28b)]('');_0x1c8f12[_0x307651(0x444)]=_0x32f00a[_0x307651(0x8c9)](_0x310b30);}else VisuMZ[_0x307651(0xa4)]['JS'][key][_0x307651(0x4db)](this,this,this,_0x248f66,0x0);}}},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0xa16)]=function(){const _0x5a5bc1=_0x3237d7;return VisuMZ[_0x5a5bc1(0xa4)][_0x5a5bc1(0x98d)][_0x5a5bc1(0x4da)][_0x5a5bc1(0x7d5)]||![];},Game_Battler['prototype'][_0x3237d7(0x2a2)]=function(){const _0x52a2a3=_0x3237d7;if(this[_0x52a2a3(0x79d)]()){if(this[_0x52a2a3(0xa16)]()){if('UViUl'!=='UViUl')this[_0x52a2a3(0x106)]=(this['_growX']*(_0x4c6fb6-0x1)+this['_targetGrowX'])/_0x1dfcb7,this[_0x52a2a3(0x659)]=(this[_0x52a2a3(0x659)]*(_0x1c473c-0x1)+this['_targetGrowY'])/_0x25d049;else{if(this[_0x52a2a3(0x7ca)][_0x52a2a3(0x6e4)](_0x18c731=>_0x18c731[_0x52a2a3(0x7be)]()&&_0x18c731[_0x52a2a3(0x2f8)]())){if(_0x52a2a3(0x5b5)==='sgvnQ')return!![];else this[_0x52a2a3(0x9a5)]=_0x3fb7e0['autoBattleUseSkills'];}}}else{if(this[_0x52a2a3(0x7ca)][_0x52a2a3(0x6e4)](_0x15dbfa=>_0x15dbfa[_0x52a2a3(0x7be)]()&&_0x15dbfa['isMagicSkill']())){if(_0x52a2a3(0x2cb)===_0x52a2a3(0x927)){this[_0x52a2a3(0xa28)]=_0x1d58b6[_0x52a2a3(0xa28)],this[_0x52a2a3(0x766)]=_0x919935['height'];const _0x4492c0=_0x2b832c[_0x52a2a3(0x9c4)](0x1,this[_0x52a2a3(0xa28)]/this[_0x52a2a3(0x651)]['width']),_0x501dbd=_0x188f72['min'](0x1,this[_0x52a2a3(0x766)]/this[_0x52a2a3(0x651)]['height']),_0x1047c8=_0x4dfc08[_0x52a2a3(0x2e0)](_0x4492c0,_0x501dbd);this[_0x52a2a3(0x845)]['x']=_0x1047c8,this[_0x52a2a3(0x845)]['y']=_0x1047c8,this['x']=(_0x6ba523[_0x52a2a3(0xa28)]-this['width'])/0x2,this['y']=_0x2c19f7[_0x52a2a3(0x766)]-this[_0x52a2a3(0x766)];}else return!![];}}}if(BattleManager['isTpb']()&&this[_0x52a2a3(0x66a)]===_0x52a2a3(0x378)){if(_0x52a2a3(0x538)!==_0x52a2a3(0x538))this[_0x52a2a3(0x856)](_0x52a2a3(0x543));else{if(this[_0x52a2a3(0xa16)]()){if(_0x52a2a3(0x49a)!==_0x52a2a3(0x49a)){if(_0x386d36[_0x52a2a3(0x417)]()['angleDuration']>0x0)return!![];this[_0x52a2a3(0x40c)]='';}else return this[_0x52a2a3(0x139)]()&&this['currentAction']()[_0x52a2a3(0x7be)]()&&this['currentAction']()[_0x52a2a3(0x2f8)]();}else return this['currentAction']()&&this[_0x52a2a3(0x139)]()[_0x52a2a3(0x7be)]()&&this['currentAction']()[_0x52a2a3(0x18c)]();}}return![];},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x37b)]=function(){const _0x5a360e=_0x3237d7;if(BattleManager[_0x5a360e(0x77b)]()&&this[_0x5a360e(0x66a)]===_0x5a360e(0x378)){if(this[_0x5a360e(0xa16)]())return this[_0x5a360e(0x139)]()&&this[_0x5a360e(0x139)]()[_0x5a360e(0x7be)]()&&!this[_0x5a360e(0x139)]()[_0x5a360e(0x2f8)]();else{if(_0x5a360e(0x31f)===_0x5a360e(0x5ab))_0x41aa96[_0x5a360e(0x998)]=_0xb26f0f(_0x4588e2['$1'])['toLowerCase']()[_0x5a360e(0x194)]();else return this[_0x5a360e(0x139)]()&&this[_0x5a360e(0x139)]()[_0x5a360e(0x7be)]()&&!this[_0x5a360e(0x139)]()['isMagicSkill']();}}return![];},VisuMZ['BattleCore'][_0x3237d7(0x1c0)]=Game_Battler[_0x3237d7(0x735)]['clearDamagePopup'],Game_Battler[_0x3237d7(0x735)]['clearDamagePopup']=function(){const _0x5341d2=_0x3237d7;VisuMZ[_0x5341d2(0xa4)]['Game_Battler_clearDamagePopup']['call'](this),this[_0x5341d2(0xe7)]=[];},Game_Battler['prototype'][_0x3237d7(0x1a4)]=function(){const _0x15a6d4=_0x3237d7;if(!this[_0x15a6d4(0xe7)])this[_0x15a6d4(0x586)]();return this[_0x15a6d4(0xe7)]['length']>0x0;},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x954)]=function(){const _0x191a29=_0x3237d7;if(!SceneManager[_0x191a29(0x5cb)]())return;if(!this['_damagePopupArray'])this[_0x191a29(0x586)]();this[_0x191a29(0x9ec)]();const _0x4dc42b=this[_0x191a29(0x1d5)]();if(_0x4dc42b)_0x4dc42b[_0x191a29(0x961)]();},Game_Battler['prototype'][_0x3237d7(0x9ec)]=function(){const _0x554d4b=_0x3237d7,_0x40f551=this[_0x554d4b(0x634)]();if(_0x40f551[_0x554d4b(0x5d0)]||_0x40f551['evaded']){if(_0x554d4b(0x3a9)==='yqVTL')this[_0x554d4b(0x4dd)]++;else{const _0x24cce8=JsonEx[_0x554d4b(0xa88)](_0x40f551);_0x24cce8['hpAffected']=![],_0x24cce8[_0x554d4b(0x266)]=0x0,this[_0x554d4b(0xe7)]['push'](_0x24cce8);}}if(_0x40f551[_0x554d4b(0x9d2)]){const _0x2c2b9a=JsonEx[_0x554d4b(0xa88)](_0x40f551);_0x2c2b9a[_0x554d4b(0x5d0)]=![],_0x2c2b9a['evaded']=![],_0x2c2b9a[_0x554d4b(0x266)]=0x0,this['_damagePopupArray'][_0x554d4b(0x857)](_0x2c2b9a);}if(_0x40f551[_0x554d4b(0x266)]!==0x0){if(_0x554d4b(0x748)!==_0x554d4b(0x748)){if(!_0x43831d[_0x554d4b(0x5cb)]())return;_0x3eb5bd['ConvertParams'](_0x3d9909,_0x57d9bb);const _0x3b0552=_0x4129c9[_0x554d4b(0x968)](),_0x39c45c=_0x20cd2a[_0x554d4b(0x343)],_0x4f5e6d=_0x259ddd[_0x554d4b(0xb5c)],_0x3b2485=_0x49928f[_0x554d4b(0x5e8)](_0x2a9513[_0x554d4b(0x30e)]),_0x5c9f60=_0x5e1c97[_0x554d4b(0x87a)],_0xf8d195=_0x11f887['_logWindow'];if(!_0x3b0552||!_0x39c45c||!_0x4f5e6d)return;if(!_0x39c45c[_0x554d4b(0x7be)]())return;let _0xbe352e=_0x39c45c[_0x554d4b(0x7be)]()['animationId'];if(_0xbe352e<0x0)_0xbe352e=_0x4f5e6d[_0x554d4b(0xa5a)]();_0x23ca26[_0x554d4b(0xb60)](_0x3b2485,_0xbe352e,_0x5c9f60),_0x11d476[_0x554d4b(0x393)]&&_0x3b0552[_0x554d4b(0x20e)](_0x554d4b(0x785));}else{const _0x4da810=JsonEx[_0x554d4b(0xa88)](_0x40f551);_0x4da810[_0x554d4b(0x5d0)]=![],_0x4da810[_0x554d4b(0x2bb)]=![],_0x4da810[_0x554d4b(0x9d2)]=![],this[_0x554d4b(0xe7)][_0x554d4b(0x857)](_0x4da810);}}},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x368)]=function(){const _0x1d4f02=_0x3237d7;if(!this[_0x1d4f02(0xe7)])this[_0x1d4f02(0x586)]();return VisuMZ['BattleCore'][_0x1d4f02(0x98d)][_0x1d4f02(0x626)][_0x1d4f02(0x4f2)]?this[_0x1d4f02(0xe7)][_0x1d4f02(0xa12)]():this['_damagePopupArray'][_0x1d4f02(0x180)]();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x76f)]=function(_0x162a9b,_0x4a5607){const _0x545c94=_0x3237d7;if(!SceneManager['isSceneBattle']())return;if(!this[_0x545c94(0x1d5)]())return;if(_0x162a9b['length']<=0x0)return;_0x4a5607=_0x4a5607||{},_0x4a5607['textColor']=_0x4a5607[_0x545c94(0x2da)]||_0x545c94(0x31a),_0x4a5607[_0x545c94(0x878)]=_0x4a5607[_0x545c94(0x878)]||[0x0,0x0,0x0,0x0],_0x4a5607[_0x545c94(0x1f0)]=_0x4a5607[_0x545c94(0x1f0)]||0x0,this[_0x545c94(0x1d5)]()['setupTextPopup'](_0x162a9b,_0x4a5607);},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x3b1)]=function(_0x11c747,_0x4844dc,_0x5ba39c){const _0x9d73a4=_0x3237d7;if(!SceneManager[_0x9d73a4(0x5cb)]())return;if(!this[_0x9d73a4(0x1d5)]())return;if(_0x4844dc['length']<=0x0)return;_0x5ba39c=_0x5ba39c||{},_0x5ba39c[_0x9d73a4(0x2da)]=_0x5ba39c[_0x9d73a4(0x2da)]||_0x9d73a4(0x31a),_0x5ba39c[_0x9d73a4(0x878)]=_0x5ba39c[_0x9d73a4(0x878)]||[0x0,0x0,0x0,0x0],_0x5ba39c['flashDuration']=_0x5ba39c['flashDuration']||0x0,this[_0x9d73a4(0x1d5)]()[_0x9d73a4(0x3b1)](_0x11c747,_0x4844dc,_0x5ba39c);},Game_Battler[_0x3237d7(0x735)]['notFocusValid']=function(){const _0x59a15f=_0x3237d7;if(this['isHidden']())return![];if(this['isAlive']()&&this[_0x59a15f(0x821)]())return!![];if(this[_0x59a15f(0x8f2)]()&&this[_0x59a15f(0x9f5)]()){if('zZYpv'!==_0x59a15f(0x671)){if(!_0x585b41)return 0x0;let _0x73e74e=0x0;const _0x107fc9=_0x14ae55['note'];return _0x107fc9[_0x59a15f(0x453)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x73e74e+=_0x4b9070(_0x5dd388['$1'])),_0x107fc9[_0x59a15f(0x453)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x73e74e+=_0x22473c(_0x4af199['$1'])),_0x73e74e;}else{if(this[_0x59a15f(0x4a3)]()&&this[_0x59a15f(0x40f)]())return![];}}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x705)]=Game_Battler['prototype']['clearMotion'],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x152)]=function(){const _0x3acd00=_0x3237d7;VisuMZ[_0x3acd00(0xa4)][_0x3acd00(0x705)][_0x3acd00(0x4db)](this),this[_0x3acd00(0x692)]();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x85e)]=function(){return!![];},Game_Battler['prototype']['isBattlerGrounded']=function(){return![];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x8ed)]=Game_Battler['prototype'][_0x3237d7(0x4e3)],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x4e3)]=function(_0x1561a0){const _0x58a201=_0x3237d7;VisuMZ[_0x58a201(0xa4)][_0x58a201(0x8ed)]['call'](this,_0x1561a0),this[_0x58a201(0x9dd)](_0x1561a0);},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x9dd)]=function(_0x17d17a){const _0x772893=_0x3237d7;this[_0x772893(0x92a)](![]),this[_0x772893(0x792)]=undefined,this[_0x772893(0xac2)]=undefined;},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x250)]=Game_Battler['prototype']['onBattleEnd'],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x120)]=function(){const _0x5e5ea0=_0x3237d7;VisuMZ['BattleCore'][_0x5e5ea0(0x250)]['call'](this),this['onBattleEndBattleCore']();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x5e2)]=function(){const _0x947db5=_0x3237d7;this[_0x947db5(0x792)]=undefined,this[_0x947db5(0xac2)]=undefined;},VisuMZ[_0x3237d7(0xa4)]['Game_Battler_performActionStart']=Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x8be)],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x8be)]=function(_0x5b5880){const _0x4da6db=_0x3237d7;VisuMZ[_0x4da6db(0xa4)][_0x4da6db(0x2e1)][_0x4da6db(0x4db)](this,_0x5b5880);if(!_0x5b5880['isGuard']()){const _0x879dc5=this[_0x4da6db(0x1d5)]();if(_0x879dc5){if(_0x4da6db(0x727)!=='xHIls'){const _0x6e97cd=this[_0x4da6db(0x444)](),_0x44941e=this[_0x4da6db(0x9dc)](),_0x59567e=this[_0x4da6db(0x134)]();this[_0x4da6db(0x817)](),this['bitmap'][_0x4da6db(0x2d9)](),this[_0x4da6db(0x651)][_0x4da6db(0x505)](_0x6e97cd,0x0,0x0,_0x44941e,_0x59567e,_0x4da6db(0x34d));}else _0x879dc5[_0x4da6db(0xaa5)]();}}this[_0x4da6db(0x92a)](![]);},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0xb38)]=function(){const _0x5afb7f=_0x3237d7,_0x43fdbd=this[_0x5afb7f(0x6b9)];this[_0x5afb7f(0x6b9)]=![];if(BattleManager['isActiveTpb']()&&this[_0x5afb7f(0xb53)]()){if(_0x5afb7f(0x868)!=='wMxGe')_0x33867d[_0x5afb7f(0xa4)][_0x5afb7f(0x1f1)][_0x5afb7f(0x4db)](this,_0x343471),this[_0x5afb7f(0x4a1)]();else{const _0x57e86d=this[_0x5afb7f(0x1d5)]();if(_0x57e86d&&_0x43fdbd)_0x57e86d[_0x5afb7f(0xaa5)]();return;}}const _0x16e946=this[_0x5afb7f(0x1d5)]();if(_0x16e946)_0x16e946['stepBack']();this['setBattlerFlip'](![]),this[_0x5afb7f(0x695)]();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x652)]=function(_0x1d5ef4){const _0x2b434a=_0x3237d7;if(_0x1d5ef4[_0x2b434a(0xa0d)]())this['performAttack']();else{if(_0x1d5ef4['isGuard']()){if(_0x2b434a(0x709)!==_0x2b434a(0xb24))this[_0x2b434a(0x85a)](_0x2b434a(0x77d));else{_0x371ef7=_0x417f99||'',_0x10cde4=_0x1a8788||'';_0x4a6c2c===''&&_0x109c0e===''&&(_0x591692=this[_0x2b434a(0xb62)][_0x2b434a(0x1dc)](),_0x4052ec=this['_back2Sprite'][_0x2b434a(0x58c)]());const _0x11054d=_0x17eed9[_0x2b434a(0x8e4)](_0x460a1e),_0x3106ac=_0x5dea1b[_0x2b434a(0x485)](_0x44df95);_0x11054d[_0x2b434a(0x8fc)](this[_0x2b434a(0x107)][_0x2b434a(0x114)](this,this['_back1Sprite'],this[_0x2b434a(0x3b7)],_0x11054d,_0x3106ac));}}else{if(_0x1d5ef4[_0x2b434a(0x2f8)]())this[_0x2b434a(0x85a)]('spell');else{if(_0x1d5ef4[_0x2b434a(0x3e6)]()){if('zGUSr'==='zGUSr'){if(_0x1d5ef4[_0x2b434a(0x7be)]()[_0x2b434a(0xb49)][_0x2b434a(0x2a5)]>0x0){if(_0x2b434a(0x662)!==_0x2b434a(0x662))return _0x328129['BattleCore']['Settings'][_0x2b434a(0x754)][_0x2b434a(0xa24)];else this[_0x2b434a(0x3e8)]();}else this[_0x2b434a(0x85a)](_0x2b434a(0x8b2));}else return![];}else _0x1d5ef4[_0x2b434a(0xa74)]()&&this[_0x2b434a(0x85a)](_0x2b434a(0x7be));}}}},Game_Battler['prototype'][_0x3237d7(0x7e2)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x943)]=function(){const _0x52a66f=_0x3237d7,_0x415241=this[_0x52a66f(0x7e2)]();return _0x415241?_0x415241['weaponImageId']:0x0;},Game_Battler[_0x3237d7(0x735)]['performSubstitute']=function(_0x46550a){const _0x47750b=_0x3237d7;if(!$gameSystem[_0x47750b(0x59e)]())return;const _0x551642=this['battler'](),_0x5c1a24=_0x46550a[_0x47750b(0x1d5)]();if(!_0x551642||!_0x5c1a24)return;const _0x266808=_0x5c1a24['_baseX'],_0x492197=_0x5c1a24[_0x47750b(0x9ed)];this[_0x47750b(0x8ff)](_0x266808,_0x492197,0x0,![],_0x47750b(0xc6),-0x1),_0x551642[_0x47750b(0x62e)]();const _0x4f6cb1=VisuMZ[_0x47750b(0xa4)][_0x47750b(0x98d)][_0x47750b(0x9f9)];let _0x55ce8e=(_0x5c1a24[_0x47750b(0xa28)]+_0x551642[_0x47750b(0xa28)])/0x2;_0x55ce8e*=this[_0x47750b(0x5ef)]()?0x1:-0x1;let _0x2a0ec0=_0x4f6cb1['StepDistanceY']*(this[_0x47750b(0x5ef)]()?0x1:-0x1);_0x46550a[_0x47750b(0x819)](_0x55ce8e,_0x2a0ec0,0x0,![],_0x47750b(0xc6)),_0x5c1a24['updatePosition']();},Game_Battler['prototype'][_0x3237d7(0x85a)]=function(_0xc4e7b4){const _0x2d2cbf=_0x3237d7;if(SceneManager['isSceneBattle']()){const _0x1b4588=this[_0x2d2cbf(0x1d5)]();_0x1b4588&&(_0x1b4588[_0x2d2cbf(0x158)](_0xc4e7b4),[_0x2d2cbf(0x275),_0x2d2cbf(0xa3e),_0x2d2cbf(0x960)]['includes'](_0xc4e7b4)&&this[_0x2d2cbf(0x69d)]());}this[_0x2d2cbf(0x692)]();},Game_Battler[_0x3237d7(0x735)]['performWeaponAnimation']=function(){},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x85f)]=function(_0x443432){const _0x594371=_0x3237d7;if(SceneManager['isSceneBattle']()){if(_0x594371(0x95a)===_0x594371(0x95a)){const _0x382fb5=this[_0x594371(0x1d5)]();if(_0x382fb5)_0x382fb5[_0x594371(0x92)](_0x443432);}else{if(!_0x2a13d1['isSceneBattle']())return;const _0x59585c=this[_0x594371(0x1d5)]();if(!_0x59585c)return;let _0x1fd2a5=this['isActor']()?_0x59585c['_weaponSprite']:_0x59585c['_svBattlerSprite']['_weaponSprite'];_0x1fd2a5&&_0x1fd2a5[_0x594371(0x56c)](0x0);}}},Game_Battler['prototype']['startAttackWeaponAnimation']=function(){const _0x3e0681=_0x3237d7;if(SceneManager[_0x3e0681(0x5cb)]()){const _0x45a4af=this[_0x3e0681(0x943)]();this[_0x3e0681(0x85f)](_0x45a4af);}},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x6fb)]=function(_0x139743,_0x355a7c){const _0x2ed70b=_0x3237d7;if(!_0x139743)return;if(!_0x139743[_0x2ed70b(0x7be)]())return;if(_0x139743[_0x2ed70b(0xa0d)]())return;if(_0x139743[_0x2ed70b(0x7d1)]())return;if(_0x139743['isItem']())return;let _0x171bf2=0x0;const _0x3d00a3=VisuMZ[_0x2ed70b(0xa4)][_0x2ed70b(0x98d)][_0x2ed70b(0x9f9)],_0x2b90a2=_0x139743['item']()[_0x2ed70b(0x4fe)];if(_0x2b90a2[_0x2ed70b(0x453)](/<CAST ANIMATION: (\d+)>/i)){if(_0x2ed70b(0xab0)!==_0x2ed70b(0x702))_0x171bf2=Number(RegExp['$1']);else{if(_0x3ca35e>_0x31ea55[_0x2ed70b(0x642)])_0x2f8f9e=!![];if(_0x3a1a23<_0x342a04['_baseX'])_0x56e563=![];}}else{if(_0x2b90a2[_0x2ed70b(0x453)](/<NO CAST ANIMATION>/i)){if('MPBdp'!==_0x2ed70b(0x56e))return;else this[_0x2ed70b(0x191)]();}else{if(_0x139743[_0x2ed70b(0x40a)]())_0x171bf2=_0x3d00a3[_0x2ed70b(0x95b)];else{if(_0x139743[_0x2ed70b(0xa73)]())_0x2ed70b(0xb3b)!=='xxHxc'?this['_stateSprite']['visible']=![]:_0x171bf2=_0x3d00a3[_0x2ed70b(0x5f8)];else _0x139743[_0x2ed70b(0x2f8)]()&&(_0x2ed70b(0xb58)!==_0x2ed70b(0xb58)?this[_0x2ed70b(0x695)]():_0x171bf2=_0x3d00a3[_0x2ed70b(0x8ec)]);}}}_0x171bf2>0x0&&$gameTemp['requestAnimation']([this],_0x171bf2,!!_0x355a7c);},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x6f3)]=function(){const _0x5728cd=_0x3237d7;SoundManager['playReflection']();let _0x39302e=VisuMZ[_0x5728cd(0xa4)]['Settings']['ActionSequence'][_0x5728cd(0x798)];_0x39302e>0x0&&(Imported[_0x5728cd(0x38d)]?$gameTemp[_0x5728cd(0x90e)]([this],_0x39302e):$gameTemp[_0x5728cd(0xb60)]([this],_0x39302e));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x70b)]=Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x71b)],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x71b)]=function(){const _0x3c7146=_0x3237d7;VisuMZ[_0x3c7146(0xa4)]['Game_Battler_performDamage'][_0x3c7146(0x4db)](this),this[_0x3c7146(0x13d)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xa6f)]=Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x26b)],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x26b)]=function(){const _0x2b5882=_0x3237d7;VisuMZ[_0x2b5882(0xa4)][_0x2b5882(0xa6f)][_0x2b5882(0x4db)](this),this[_0x2b5882(0x13d)]();},VisuMZ[_0x3237d7(0xa4)]['Game_Battler_performEvasion']=Game_Battler['prototype']['performEvasion'],Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x170)]=function(){const _0x3f4cf1=_0x3237d7;VisuMZ[_0x3f4cf1(0xa4)]['Game_Battler_performEvasion'][_0x3f4cf1(0x4db)](this),this[_0x3f4cf1(0x13d)]();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x13d)]=function(){const _0x2f309b=_0x3237d7;if(!$gameSystem[_0x2f309b(0x59e)]())return;if(this['_flinched'])return;this[_0x2f309b(0x6b9)]=!![];const _0x55e674=this[_0x2f309b(0x1d5)]();if(_0x55e674)_0x55e674['stepFlinch']();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x695)]=function(){const _0x2df787=_0x3237d7;if(this['isDead']()&&this[_0x2df787(0x87d)]!==_0x2df787(0x979)){if(_0x2df787(0x8af)===_0x2df787(0x28e)){if(this[_0x2df787(0x40f)]())_0x417ae3['BattleCore'][_0x2df787(0x8d6)]['call'](this);}else{this[_0x2df787(0x85a)](_0x2df787(0x979));return;}}if(this['isDead']()&&this['_motionType']==='dead')return;if(!!this[_0x2df787(0x217)])return;if(this[_0x2df787(0x8f2)]()){if(_0x2df787(0x9ee)!=='PLRfl'){if(!this[_0x2df787(0x16f)]()&&this!==BattleManager[_0x2df787(0xb5c)]){if(this[_0x2df787(0x1d5)]())this[_0x2df787(0x1d5)]()[_0x2df787(0x537)]();}this[_0x2df787(0x692)]();return;}else _0x53751e[_0x2df787(0x735)][_0x2df787(0xbb)][_0x2df787(0x4db)](this,_0x6229a7),this['setBackgroundType'](this[_0x2df787(0x9ad)]()),this[_0x2df787(0xaa6)]();}if(this[_0x2df787(0x87d)]===_0x2df787(0xb6))return;if(this['_motionType']===_0x2df787(0x11c)&&!BattleManager[_0x2df787(0xb53)]())return;if(this[_0x2df787(0x87d)]==='guard'&&!BattleManager[_0x2df787(0xb53)]())return;this[_0x2df787(0x152)]();if(this[_0x2df787(0x1d5)]()&&BattleManager[_0x2df787(0xb53)]()){if(_0x2df787(0x370)!==_0x2df787(0x370))return _0x246e1b[_0x2df787(0xa4)]['Settings'][_0x2df787(0x4da)][_0x2df787(0xb7)];else{this[_0x2df787(0x1d5)]()[_0x2df787(0x537)](),this[_0x2df787(0x692)]();return;}}},Game_Enemy[_0x3237d7(0x735)]['isDuringNonLoopingMotion']=function(){const _0x24f288=_0x3237d7;if(!this[_0x24f288(0x9f5)]())return![];const _0x4a0ad1=this['battler']();if(!_0x4a0ad1)return![];const _0x11b2ef=_0x4a0ad1[_0x24f288(0xace)];if(!_0x11b2ef)return![];const _0x43c660=_0x11b2ef[_0x24f288(0x4cf)];return _0x43c660&&!_0x43c660[_0x24f288(0x334)];},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0xa85)]=function(){return this['_isBattlerFlipped'];},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x92a)]=function(_0x1c171a){const _0xfc4f19=_0x3237d7;if(!$gameSystem[_0xfc4f19(0x59e)]())return;this[_0xfc4f19(0x360)]=_0x1c171a;const _0x34f874=this['battler']();if(_0x34f874)_0x34f874[_0xfc4f19(0x3b2)]();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x18b)]=function(_0x134808,_0x2834f4,_0x4cdb30){const _0x117566=_0x3237d7;if(!$gameSystem[_0x117566(0x59e)]())return;const _0x27dee5=this['battler']();if(!_0x27dee5)return;if(_0x134808===_0x27dee5[_0x117566(0x642)])return;let _0x34c302=![];if(this['isActor']()){if(_0x117566(0xa0a)!==_0x117566(0xce)){if(_0x134808>_0x27dee5['_baseX'])_0x34c302=!![];if(_0x134808<_0x27dee5['_baseX'])_0x34c302=![];}else{if(!this[_0x117566(0x7be)]())return _0x119893;const _0x2af4b4=this[_0x117566(0x7be)]()[_0x117566(0x4fe)];return _0x2af4b4['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0xde16de[_0x117566(0x28b)](this['subject']()),_0x8d42e6;}}else{if(this['isEnemy']()){if(_0x134808>_0x27dee5[_0x117566(0x642)])_0x34c302=![];if(_0x134808<_0x27dee5['_baseX'])_0x34c302=!![];}};this[_0x117566(0x92a)](_0x4cdb30?!_0x34c302:_0x34c302),_0x27dee5[_0x117566(0x3b2)]();},Game_Battler['prototype'][_0x3237d7(0x819)]=function(_0x252537,_0x49cae9,_0x34d1b2,_0xf44de6,_0x3f4b0a){const _0x486520=_0x3237d7;if(!$gameSystem[_0x486520(0x59e)]())return;const _0x1e3823=this[_0x486520(0x1d5)]();if(!_0x1e3823)return;if(_0xf44de6)this[_0x486520(0x18b)](_0x252537+_0x1e3823[_0x486520(0x642)],_0x49cae9+_0x1e3823[_0x486520(0x9ed)],![]);_0x252537+=_0x1e3823[_0x486520(0x642)]-_0x1e3823['_homeX'],_0x49cae9+=_0x1e3823[_0x486520(0x9ed)]-_0x1e3823[_0x486520(0x3f3)],_0x1e3823[_0x486520(0x835)](_0x252537,_0x49cae9,_0x34d1b2);if(Imported[_0x486520(0x38d)])_0x1e3823[_0x486520(0x8c1)](_0x3f4b0a||'Linear');},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x8ff)]=function(_0x107292,_0x87413d,_0x1b8ce9,_0x22494a,_0x592317,_0x2c0d12){const _0x1c6e42=_0x3237d7;if(!$gameSystem[_0x1c6e42(0x59e)]())return;const _0x18bae3=this['battler']();if(!_0x18bae3)return;_0x2c0d12=_0x2c0d12||0x0;if(_0x2c0d12>0x0){if(_0x18bae3[_0x1c6e42(0x642)]>_0x107292)_0x107292+=_0x18bae3['width']/0x2+_0x2c0d12;if(_0x18bae3[_0x1c6e42(0x642)]<_0x107292)_0x107292-=_0x18bae3[_0x1c6e42(0xa28)]/0x2+_0x2c0d12;}if(_0x22494a)this[_0x1c6e42(0x18b)](_0x107292,_0x87413d,![]);_0x107292-=_0x18bae3[_0x1c6e42(0x7e8)],_0x87413d-=_0x18bae3[_0x1c6e42(0x3f3)],_0x18bae3[_0x1c6e42(0x835)](_0x107292,_0x87413d,_0x1b8ce9);if(Imported['VisuMZ_0_CoreEngine'])_0x18bae3[_0x1c6e42(0x8c1)](_0x592317||_0x1c6e42(0xc6));},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x341)]=function(_0x4a0727,_0x1873c0,_0x354b42,_0x4bb8a3,_0x375a79){const _0x13ea4f=_0x3237d7;if(!$gameSystem[_0x13ea4f(0x59e)]())return;const _0x70de14=this['battler']();if(!_0x70de14)return;if(_0x4bb8a3)this[_0x13ea4f(0x18b)](_0x4a0727+_0x70de14[_0x13ea4f(0x642)],_0x1873c0+_0x70de14['_baseY'],![]);_0x4a0727+=_0x70de14[_0x13ea4f(0x7e8)],_0x1873c0+=_0x70de14[_0x13ea4f(0x3f3)],_0x70de14['startHomeMove'](_0x4a0727,_0x1873c0,_0x354b42,_0x375a79),this['_forcedHomeX']=_0x4a0727,this[_0x13ea4f(0xac2)]=_0x1873c0;},Game_Battler['prototype'][_0x3237d7(0x895)]=function(_0x3408,_0x3f753a,_0x48f26e,_0x3553e2,_0x87906f,_0x35dee0){const _0xc4fb99=_0x3237d7;if(!$gameSystem['isSideView']())return;const _0x3a5abc=this['battler']();if(!_0x3a5abc)return;_0x35dee0=_0x35dee0||0x0;if(_0x35dee0>0x0){if(_0x3a5abc['_baseX']>_0x3408)_0x3408+=_0x3a5abc['width']/0x2+_0x35dee0;if(_0x3a5abc[_0xc4fb99(0x642)]<_0x3408)_0x3408-=_0x3a5abc[_0xc4fb99(0xa28)]/0x2+_0x35dee0;}if(_0x3553e2)this[_0xc4fb99(0x18b)](_0x3408,_0x3f753a,![]);_0x3a5abc[_0xc4fb99(0x8d2)](_0x3408,_0x3f753a,_0x48f26e,_0x87906f),this[_0xc4fb99(0x792)]=_0x3408,this[_0xc4fb99(0xac2)]=_0x3f753a;},Game_Battler['prototype'][_0x3237d7(0x12f)]=function(_0x2504af,_0xb00cce,_0x16ee9e){const _0x459817=_0x3237d7;if(!$gameSystem[_0x459817(0x59e)]())return;const _0x4fbe13=this['battler']();if(!_0x4fbe13)return;_0x4fbe13['startFloat'](_0x2504af,_0xb00cce,_0x16ee9e);},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0xb20)]=function(_0x2dd2e0,_0x20887b){const _0x40bb8e=_0x3237d7;if(!$gameSystem[_0x40bb8e(0x59e)]())return;const _0x927f69=this[_0x40bb8e(0x1d5)]();if(!_0x927f69)return;_0x927f69[_0x40bb8e(0x6d7)](_0x2dd2e0,_0x20887b);},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x82a)]=function(_0xa1ba8a,_0x690ee8,_0x2634a4,_0x541f3d){const _0x52b3f0=_0x3237d7;if(!$gameSystem['isSideView']())return;const _0x557778=this[_0x52b3f0(0x1d5)]();if(!_0x557778)return;_0x557778[_0x52b3f0(0xa86)](_0xa1ba8a,_0x690ee8,_0x2634a4,_0x541f3d);},Game_Battler['prototype']['skewBattler']=function(_0x3f0bf1,_0x1fe56d,_0x354615,_0x3f7a66){const _0x1e4047=_0x3237d7;if(!$gameSystem[_0x1e4047(0x59e)]())return;const _0x5aa805=this[_0x1e4047(0x1d5)]();if(!_0x5aa805)return;if(this[_0x1e4047(0x5ef)]()){if(_0x1e4047(0x4e0)===_0x1e4047(0x256)){if(this['isHidden']())return![];if(this[_0x1e4047(0x101)]()&&this['isAppeared']())return!![];if(this[_0x1e4047(0x8f2)]()&&this[_0x1e4047(0x9f5)]()){if(this[_0x1e4047(0x4a3)]()&&this['allowCollapse']())return![];}else{if(this[_0x1e4047(0x4a3)]())return![];}return!![];}else _0x3f0bf1*=-0x1,_0x1fe56d*=-0x1;}_0x5aa805['startSkew'](_0x3f0bf1,_0x1fe56d,_0x354615,_0x3f7a66);},Game_Battler[_0x3237d7(0x735)]['growBattler']=function(_0xdec4dd,_0x522e68,_0x2dac59,_0x32f38f){const _0x11f381=_0x3237d7;if(!$gameSystem[_0x11f381(0x59e)]())return;const _0x542f=this[_0x11f381(0x1d5)]();if(!_0x542f)return;_0x542f[_0x11f381(0x8c3)](_0xdec4dd,_0x522e68,_0x2dac59,_0x32f38f);},Game_Battler['prototype'][_0x3237d7(0x168)]=function(_0x142953,_0x4f6e8e,_0xd06b52){const _0x17a9f2=_0x3237d7;if(!$gameSystem[_0x17a9f2(0x59e)]())return;const _0xa2576=this['battler']();if(!_0xa2576)return;_0xa2576['startOpacity'](_0x142953,_0x4f6e8e,_0xd06b52);},Game_Battler['prototype'][_0x3237d7(0x692)]=function(){const _0x2792a0=_0x3237d7,_0x40d8fd=!!this[_0x2792a0(0x217)];this[_0x2792a0(0x217)]=undefined;if(_0x40d8fd){if(_0x2792a0(0xaa)!==_0x2792a0(0xaa)){const _0xf950a7=this[_0x2792a0(0x965)](_0x2ad8b9),_0x5ce61f=this['commandName'](_0x1edf6d),_0x5c93a4=this['textSizeEx'](_0x5ce61f)[_0x2792a0(0xa28)];this['changePaintOpacity'](this[_0x2792a0(0x459)](_0x544062));const _0x29658d=this[_0x2792a0(0x465)]();if(_0x29658d===_0x2792a0(0xad0))this[_0x2792a0(0x83c)](_0x5ce61f,_0xf950a7['x']+_0xf950a7[_0x2792a0(0xa28)]-_0x5c93a4,_0xf950a7['y'],_0x5c93a4);else{if(_0x29658d===_0x2792a0(0x415)){const _0xf514f6=_0xf950a7['x']+_0xa35578['floor']((_0xf950a7[_0x2792a0(0xa28)]-_0x5c93a4)/0x2);this[_0x2792a0(0x83c)](_0x5ce61f,_0xf514f6,_0xf950a7['y'],_0x5c93a4);}else this['drawTextEx'](_0x5ce61f,_0xf950a7['x'],_0xf950a7['y'],_0x5c93a4);}}else this['requestMotionRefresh'](),this[_0x2792a0(0x7e9)]();}},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x7e9)]=function(){const _0x5bc5a5=_0x3237d7;if(!SceneManager[_0x5bc5a5(0x5cb)]())return;const _0x2dbebb=this[_0x5bc5a5(0x1d5)]();if(!_0x2dbebb)return;let _0x2a471c=this[_0x5bc5a5(0x5ef)]()?_0x2dbebb['_weaponSprite']:_0x2dbebb[_0x5bc5a5(0xace)]['_weaponSprite'];_0x2a471c&&_0x2a471c[_0x5bc5a5(0x56c)](0x0);},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x27c)]=function(_0x3fadee,_0xaff795,_0x11a3ba){const _0x1761ce=_0x3237d7;if(this[_0x1761ce(0x8f2)]()&&!this[_0x1761ce(0x9f5)]())return;let _0x58622e=0x0,_0x42da46=0x0;if(_0x3fadee[_0x1761ce(0x453)](/ATTACK[ ](\d+)/i)){if(_0x1761ce(0x597)!==_0x1761ce(0x945))_0x42da46=Number(RegExp['$1']),_0x42da46--;else{this[_0x1761ce(0x651)][_0x1761ce(0x2d9)]();const _0x1c5f58=this[_0x1761ce(0x9a1)]();!_0x280dbc(_0x1c5f58)&&this[_0x1761ce(0x282)]();}}if(this['isActor']()){const _0x5a76d1=this[_0x1761ce(0x8cf)]();_0x58622e=_0x5a76d1[_0x42da46]?_0x5a76d1[_0x42da46][_0x1761ce(0x839)]:0x0;}else this['isEnemy']()&&(_0x58622e=this[_0x1761ce(0x43a)]()[_0x1761ce(0x839)]||0x0);const _0x41c599=$dataSystem[_0x1761ce(0x8f3)][_0x58622e];_0x3fadee[_0x1761ce(0x453)](/attack/i)&&(_0x3fadee=[_0x1761ce(0xa3e),_0x1761ce(0x275),_0x1761ce(0x960)][_0x41c599['type']]||_0x1761ce(0x275)),this[_0x1761ce(0x217)]={'motionType':_0x3fadee,'weaponImageId':_0xaff795?_0x41c599[_0x1761ce(0x3ed)]:0x0,'pattern':_0x11a3ba};},Game_Battler['prototype'][_0x3237d7(0xa35)]=function(_0x3e729f){const _0x221d8a=_0x3237d7;if(!_0x3e729f)return![];return _0x3e729f[_0x221d8a(0x889)]()===this[_0x221d8a(0x889)]();},Game_Battler['prototype'][_0x3237d7(0x765)]=function(_0x5f094a){const _0x3c9202=_0x3237d7;if(!_0x5f094a)return![];return _0x5f094a['opponentsUnit']()===this[_0x3c9202(0x889)]();},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x272)]=function(){return![];},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x272)]=function(){const _0x39fe7d=_0x3237d7;return this[_0x39fe7d(0x846)]()[_0x39fe7d(0x453)](/\$/i);},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x272)]=function(){const _0x475da0=_0x3237d7;return this['hasSvBattler']()&&this[_0x475da0(0x905)]()[_0x475da0(0x453)](/\$/i);},VisuMZ[_0x3237d7(0xa4)]['Game_Actor_setup']=Game_Actor[_0x3237d7(0x735)]['setup'],Game_Actor['prototype'][_0x3237d7(0x56c)]=function(_0x4df550){const _0x1b565b=_0x3237d7;VisuMZ[_0x1b565b(0xa4)][_0x1b565b(0xa44)]['call'](this,_0x4df550),this[_0x1b565b(0x9b8)]();},Game_Actor['prototype'][_0x3237d7(0x9b8)]=function(){const _0x2f04f1=_0x3237d7;this[_0x2f04f1(0x42a)]='',this[_0x2f04f1(0x5f9)]()&&this['actor']()[_0x2f04f1(0x4fe)][_0x2f04f1(0x453)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor['prototype']['getBattlePortraitFilename']=function(){const _0x3348e7=_0x3237d7;if(this['getBattlePortrait']()!=='')return this[_0x3348e7(0x3af)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x3348e7(0x1ec)]()!=='')return _0x3348e7(0x492)!=='ABOPp'?_0x41bc65(_0x490e84['$1']):this[_0x3348e7(0x1ec)]();}return'';},Game_Actor[_0x3237d7(0x735)]['getBattlePortrait']=function(){const _0xae92e2=_0x3237d7;if(this[_0xae92e2(0x42a)]===undefined)this[_0xae92e2(0x9b8)]();return this[_0xae92e2(0x42a)];},Game_Actor[_0x3237d7(0x735)]['setBattlePortrait']=function(_0x59e785){const _0x3160c7=_0x3237d7;if(this[_0x3160c7(0x42a)]===undefined)this[_0x3160c7(0x9b8)]();this[_0x3160c7(0x42a)]=_0x59e785;if(SceneManager[_0x3160c7(0x5cb)]()&&$gameParty[_0x3160c7(0x4ff)]()[_0x3160c7(0x231)](this)){if('uzrHH'==='uzrHH'){const _0x2da323=SceneManager[_0x3160c7(0x2a7)][_0x3160c7(0x364)];if(_0x2da323)_0x2da323[_0x3160c7(0x209)](this);}else _0x2e55c1[_0x3160c7(0x4fe)]+=_0x3160c7(0xa7b);}},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0xa06)]=function(){return!![];},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x203)]=function(){const _0x140765=_0x3237d7;if(!this[_0x140765(0x88b)]()&&BattleManager[_0x140765(0x62a)])return!![];return Game_Battler[_0x140765(0x735)][_0x140765(0x203)][_0x140765(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x9f6)]=Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x26d)],Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x26d)]=function(){const _0x362f75=_0x3237d7;if(BattleManager[_0x362f75(0x62a)]&&!ConfigManager[_0x362f75(0x9a5)])return this[_0x362f75(0x762)]();else{return VisuMZ[_0x362f75(0xa4)][_0x362f75(0x9f6)][_0x362f75(0x4db)](this);;}},Game_Actor[_0x3237d7(0x735)]['makeActionListAutoAttack']=function(){const _0x591182=_0x3237d7,_0x2988ef=[],_0x345afa=new Game_Action(this);return _0x345afa[_0x591182(0xea)](),_0x2988ef[_0x591182(0x857)](_0x345afa),_0x2988ef;},Game_Actor[_0x3237d7(0x735)]['battleCommands']=function(){const _0x386e2e=_0x3237d7;if(this['currentClass']()[_0x386e2e(0x4fe)][_0x386e2e(0x453)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])[_0x386e2e(0x2cf)](/[\r\n]+/);else{if(_0x386e2e(0x4c3)===_0x386e2e(0x4c3))return VisuMZ[_0x386e2e(0xa4)][_0x386e2e(0x98d)][_0x386e2e(0x4c5)]['BattleCmdList'];else _0x14d5f9[_0x386e2e(0x857)](_0x386e2e(0x22d),_0x1be013,_0xa59688);}},Game_Actor[_0x3237d7(0x735)]['svBattlerAnchorX']=function(){const _0xb4d8e9=_0x3237d7;if(this['_cache'][_0xb4d8e9(0x669)]!==undefined)return this[_0xb4d8e9(0xa2)]['svAnchorX'];return this[_0xb4d8e9(0x5f9)]()[_0xb4d8e9(0x4fe)][_0xb4d8e9(0x453)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0xb4d8e9(0x669)]=eval(RegExp['$1']),this[_0xb4d8e9(0xa2)][_0xb4d8e9(0x384)]=eval(RegExp['$2'])):_0xb4d8e9(0x6d0)===_0xb4d8e9(0x526)?this[_0xb4d8e9(0x4c9)]():this['_cache']['svAnchorX']=Game_Battler[_0xb4d8e9(0x735)][_0xb4d8e9(0x357)][_0xb4d8e9(0x4db)](this),this['_cache']['svAnchorX'];},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x565)]=function(){const _0x571d89=_0x3237d7;if(this[_0x571d89(0xa2)][_0x571d89(0x384)]!==undefined)return this[_0x571d89(0xa2)][_0x571d89(0x384)];if(this['actor']()[_0x571d89(0x4fe)][_0x571d89(0x453)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0x571d89(0xa2)]['svAnchorY']=eval(RegExp['$2']);else{if('EKnKx'!==_0x571d89(0x6ec))this[_0x571d89(0xa2)]['svAnchorY']=Game_Battler[_0x571d89(0x735)][_0x571d89(0x565)][_0x571d89(0x4db)](this);else{return;this['_effectsContainer']&&(this[_0x571d89(0xa4a)]['x']=this['x'],this[_0x571d89(0xa4a)]['y']=this['y']),this[_0x571d89(0x7c0)]&&(this[_0x571d89(0x7c0)]['x']=this['x'],this[_0x571d89(0x7c0)]['y']=this['y']);}}return this['_cache']['svAnchorY'];},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x44c)]=function(){const _0x514883=_0x3237d7;if(this[_0x514883(0xa2)][_0x514883(0x7c2)]!==undefined)return this[_0x514883(0xa2)]['svShadow'];if(this['actor']()[_0x514883(0x4fe)][_0x514883(0x453)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x514883(0xa2)][_0x514883(0x7c2)]=!![];else this['actor']()[_0x514883(0x4fe)][_0x514883(0x453)](/<SIDEVIEW HIDE SHADOW>/i)?_0x514883(0xb19)===_0x514883(0xb19)?this[_0x514883(0xa2)]['svShadow']=![]:this[_0x514883(0x574)]():this['_cache'][_0x514883(0x7c2)]=Game_Battler[_0x514883(0x735)][_0x514883(0x44c)][_0x514883(0x4db)](this);return this[_0x514883(0xa2)]['svShadow'];},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x8ab)]=function(){const _0x4152bb=_0x3237d7;return VisuMZ[_0x4152bb(0xa4)]['Settings'][_0x4152bb(0x4da)][_0x4152bb(0xb7)];},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x69d)]=function(){const _0x4cf9d8=_0x3237d7,_0x417b07=this[_0x4cf9d8(0x8cf)](),_0x33c819=_0x417b07[0x0]?_0x417b07[0x0][_0x4cf9d8(0x839)]:0x0,_0x47061d=$dataSystem['attackMotions'][_0x33c819];_0x47061d&&(_0x4cf9d8(0x903)===_0x4cf9d8(0x924)?(_0x271bc3['BattleCore']['ParseItemNotetags']&&_0x181721['BattleCore'][_0x4cf9d8(0x6f1)]['call'](this,_0x2057f4),_0x5ee7dc[_0x4cf9d8(0xa4)][_0x4cf9d8(0x9ff)](_0x5bd229),_0x579483[_0x4cf9d8(0xa4)][_0x4cf9d8(0xad1)](_0x3e1326)):this['startWeaponAnimation'](_0x47061d[_0x4cf9d8(0x3ed)]));},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x5d8)]=function(_0x1ec58f){const _0x42148f=_0x3237d7;Game_Battler[_0x42148f(0x735)][_0x42148f(0x5d8)][_0x42148f(0x4db)](this,_0x1ec58f),this['performActionMotions'](_0x1ec58f);},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x7e2)]=function(){const _0x4f351e=_0x3237d7,_0x1f6ec8=this[_0x4f351e(0x8cf)](),_0x3e5afd=_0x1f6ec8[0x0]?_0x1f6ec8[0x0][_0x4f351e(0x839)]:0x0;return $dataSystem['attackMotions'][_0x3e5afd];},Game_Actor[_0x3237d7(0x735)]['attackAnimationIdSlot']=function(_0x56cdfe){const _0x5ac5c5=_0x3237d7;_0x56cdfe=_0x56cdfe||0x1,_0x56cdfe--;const _0x2850a6=this[_0x5ac5c5(0x8cf)]();return _0x2850a6[_0x56cdfe]?_0x2850a6[_0x56cdfe][_0x5ac5c5(0x6bf)]:0x0;},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x464)]=function(_0x3a0ebf){const _0x36a725=_0x3237d7;_0x3a0ebf=_0x3a0ebf||0x1,_0x3a0ebf--;const _0x167c4b=this[_0x36a725(0x8cf)](),_0xf18c9a=_0x167c4b[_0x3a0ebf]?_0x167c4b[_0x3a0ebf]['wtypeId']:0x0;return $dataSystem[_0x36a725(0x8f3)][_0xf18c9a];},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x333)]=function(_0x2e3405){const _0x12f4a5=_0x3237d7;_0x2e3405=_0x2e3405||0x1,_0x2e3405--;const _0x152e9b=this[_0x12f4a5(0x8cf)](),_0xc25f9b=_0x152e9b[_0x2e3405]?_0x152e9b[_0x2e3405][_0x12f4a5(0x839)]:0x0,_0x23ac05=$dataSystem[_0x12f4a5(0x8f3)][_0xc25f9b];if(_0x23ac05){if(_0x23ac05['type']===0x0)this['requestMotion'](_0x12f4a5(0xa3e));else{if(_0x23ac05[_0x12f4a5(0x2a5)]===0x1)this[_0x12f4a5(0x85a)](_0x12f4a5(0x275));else _0x23ac05[_0x12f4a5(0x2a5)]===0x2&&this[_0x12f4a5(0x85a)](_0x12f4a5(0x960));}this['startWeaponAnimation'](_0x23ac05['weaponImageId']);}},Game_Battler[_0x3237d7(0x735)][_0x3237d7(0x4c4)]=function(_0xe0d288){const _0x332fbe=_0x3237d7;this['_activeWeaponSlot']=_0xe0d288||0x0,this[_0x332fbe(0xa2)]={};},Game_Battler['prototype'][_0x3237d7(0x9fc)]=function(){const _0x5601b0=_0x3237d7;this[_0x5601b0(0xa2a)]=this[_0x5601b0(0xa2a)]||0x0,this[_0x5601b0(0xa2a)]++,this[_0x5601b0(0xa2)]={};},Game_Battler['prototype']['clearActiveWeaponSlot']=function(){const _0xf5d964=_0x3237d7;this[_0xf5d964(0xa2a)]=undefined,this[_0xf5d964(0xa2)]={};},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x25a)]=Game_Actor['prototype']['equips'],Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x2dc)]=function(){const _0x44c5a2=_0x3237d7;let _0x1e9cac=VisuMZ['BattleCore'][_0x44c5a2(0x25a)][_0x44c5a2(0x4db)](this);if(this[_0x44c5a2(0x317)])return _0x1e9cac;if(this['_activeWeaponSlot']!==undefined){if(_0x44c5a2(0x749)!==_0x44c5a2(0x749)){const _0x5323e0=this['result']();if(_0x5323e0[_0x44c5a2(0x5d0)]||_0x5323e0[_0x44c5a2(0x2bb)]){const _0x5cba5b=_0x32565e[_0x44c5a2(0xa88)](_0x5323e0);_0x5cba5b[_0x44c5a2(0x9d2)]=![],_0x5cba5b[_0x44c5a2(0x266)]=0x0,this[_0x44c5a2(0xe7)][_0x44c5a2(0x857)](_0x5cba5b);}if(_0x5323e0['hpAffected']){const _0x577154=_0x43d116[_0x44c5a2(0xa88)](_0x5323e0);_0x577154['missed']=![],_0x577154['evaded']=![],_0x577154[_0x44c5a2(0x266)]=0x0,this['_damagePopupArray'][_0x44c5a2(0x857)](_0x577154);}if(_0x5323e0['mpDamage']!==0x0){const _0x3f059b=_0x46837f[_0x44c5a2(0xa88)](_0x5323e0);_0x3f059b[_0x44c5a2(0x5d0)]=![],_0x3f059b[_0x44c5a2(0x2bb)]=![],_0x3f059b[_0x44c5a2(0x9d2)]=![],this[_0x44c5a2(0xe7)][_0x44c5a2(0x857)](_0x3f059b);}}else{this[_0x44c5a2(0x317)]=!![];const _0x5ca2ab=this[_0x44c5a2(0x39d)]();for(let _0x531cd1=0x0;_0x531cd1<_0x5ca2ab[_0x44c5a2(0x60c)];_0x531cd1++){if(_0x44c5a2(0x171)===_0x44c5a2(0x171)){if(_0x5ca2ab[_0x531cd1]===0x1&&this[_0x44c5a2(0xa2a)]!==_0x531cd1){if('WWuXD'===_0x44c5a2(0x6e3))_0x1e9cac[_0x531cd1]=null;else return this[_0x44c5a2(0x43a)]()[_0x44c5a2(0x444)]!=='';}}else this[_0x44c5a2(0x53c)]=null,_0x104f32[_0x44c5a2(0xa4)][_0x44c5a2(0x704)]['call'](this,_0x376c98);}this[_0x44c5a2(0x317)]=undefined;}}return _0x1e9cac;},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x61f)]=function(_0x3b19d9){const _0x2837b5=_0x3237d7;return _0x3b19d9[_0x2837b5(0x5ef)]()?_0x3b19d9[_0x2837b5(0x8cf)]()['length']||0x1:0x1;},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x22d)]=function(_0x3936b5,_0x1568e6){const _0x17ad60=_0x3237d7;_0x3936b5&&_0x3936b5['isActor']()&&(_0x17ad60(0x85c)==='itvdg'?_0x3936b5[_0x17ad60(0x4c4)](_0x1568e6):_0x5c56a3[_0x17ad60(0x5c1)]=![]),this[_0x17ad60(0x4a1)]();},Window_BattleLog['prototype']['clearActiveWeaponSet']=function(_0x2fee52){const _0x1a8759=_0x3237d7;_0x2fee52&&_0x2fee52['isActor']()&&(_0x1a8759(0x728)===_0x1a8759(0x728)?_0x2fee52[_0x1a8759(0x772)]():this[_0x1a8759(0x85a)](_0x1a8759(0x275))),this[_0x1a8759(0x4a1)]();},Game_Actor[_0x3237d7(0x735)]['battleUIOffsetX']=function(){const _0x3ac5c3=_0x3237d7;let _0x436d7d='battleUIOffsetX';if(this[_0x3ac5c3(0x94e)](_0x436d7d))return this[_0x3ac5c3(0xa2)][_0x436d7d];return this['_cache'][_0x436d7d]=this[_0x3ac5c3(0x389)](this[_0x3ac5c3(0x5f9)]()),this[_0x3ac5c3(0xa2)][_0x436d7d];},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0x41e)]=function(){const _0x525aee=_0x3237d7;let _0x35b58e='battleUIOffsetY';if(this[_0x525aee(0x94e)](_0x35b58e))return this['_cache'][_0x35b58e];return this[_0x525aee(0xa2)][_0x35b58e]=this[_0x525aee(0x742)](this[_0x525aee(0x5f9)]()),this[_0x525aee(0xa2)][_0x35b58e];},VisuMZ[_0x3237d7(0xa4)]['Game_Enemy_setup']=Game_Enemy[_0x3237d7(0x735)]['setup'],Game_Enemy[_0x3237d7(0x735)]['setup']=function(_0x1556b9,_0x24496d,_0x2c3e28){const _0x48fb82=_0x3237d7;_0x1556b9=DataManager['swapEnemyIDs'](_0x1556b9),VisuMZ['BattleCore'][_0x48fb82(0x5d5)][_0x48fb82(0x4db)](this,_0x1556b9,_0x24496d,_0x2c3e28),Imported[_0x48fb82(0xa47)]&&this[_0x48fb82(0xa20)](),this[_0x48fb82(0x41a)](),this[_0x48fb82(0xb2d)](),Imported[_0x48fb82(0xa47)]&&this[_0x48fb82(0x58a)]();},Game_Enemy['prototype'][_0x3237d7(0x41a)]=function(){const _0x414763=_0x3237d7,_0x4a07e7=VisuMZ[_0x414763(0xa4)][_0x414763(0x98d)][_0x414763(0x754)];this[_0x414763(0x327)]=_0x4a07e7[_0x414763(0xac4)],this[_0x414763(0xb3)]={};},Game_Enemy[_0x3237d7(0x735)]['setupBattleCoreData']=function(){const _0x307c8d=_0x3237d7,_0x27ac27=VisuMZ['BattleCore'][_0x307c8d(0x98d)][_0x307c8d(0x754)],_0x55ffe1=this[_0x307c8d(0x9df)]()[_0x307c8d(0x4fe)];this[_0x307c8d(0xb3)]={'name':'','wtypeId':_0x27ac27[_0x307c8d(0x293)],'collapse':_0x27ac27['AllowCollapse'],'motionIdle':_0x27ac27[_0x307c8d(0x13f)],'width':_0x27ac27['Width']||0x40,'height':_0x27ac27[_0x307c8d(0x8ee)]||0x40,'anchorX':_0x27ac27[_0x307c8d(0x880)]||0x0,'anchorY':_0x27ac27[_0x307c8d(0x9f1)]||0x0,'shadow':_0x27ac27['Shadow']};_0x55ffe1[_0x307c8d(0x453)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x307c8d(0x327)]=Number(RegExp['$1']));const _0x3a8a82=this[_0x307c8d(0xb3)];if(_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW BATTLER: (.*)>/i))_0x3a8a82['name']=String(RegExp['$1']);else{if(_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x5e666c=String(RegExp['$1'])[_0x307c8d(0x2cf)](/[\r\n]+/)['remove']('');_0x3a8a82['name']=DataManager[_0x307c8d(0x8c9)](_0x5e666c);}}_0x55ffe1['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&('zNmOq'!==_0x307c8d(0x6f4)?_0x5acfb8=_0x306774['GroupDigits'](_0x1d3bd3):(_0x3a8a82[_0x307c8d(0x372)]=eval(RegExp['$1']),_0x3a8a82[_0x307c8d(0xa61)]=eval(RegExp['$2'])));if(_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW COLLAPSE>/i))_0x3a8a82[_0x307c8d(0x5c1)]=!![];else _0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x3a8a82[_0x307c8d(0x5c1)]=![]);if(_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW SHOW SHADOW>/i))_0x3a8a82[_0x307c8d(0x387)]=!![];else{if(_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x307c8d(0x2aa)!==_0x307c8d(0x2aa))return _0x1274df[_0x307c8d(0xa4)][_0x307c8d(0x98d)][_0x307c8d(0x811)][_0x307c8d(0x949)];else _0x3a8a82[_0x307c8d(0x387)]=![];}}if(_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x307c8d(0x33f)!==_0x307c8d(0x33f)?(this[_0x307c8d(0x631)](),this[_0x307c8d(0x7ce)]=null,this[_0x307c8d(0x711)]=![]):_0x3a8a82[_0x307c8d(0x998)]=String(RegExp['$1'])[_0x307c8d(0x165)]()['trim']();else{if(_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x307c8d(0x6f0)===_0x307c8d(0xaad))return 0x0;else{const _0x43d368=String(RegExp['$1'])[_0x307c8d(0x2cf)](/[\r\n]+/)['remove']('');_0x3a8a82['motionIdle']=DataManager[_0x307c8d(0x8c9)](_0x43d368);}}}_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x3a8a82[_0x307c8d(0xa28)]=Number(RegExp['$1']),_0x3a8a82['height']=Number(RegExp['$2']));if(_0x55ffe1[_0x307c8d(0x453)](/<SIDEVIEW WEAPON: (.*)>/i))_0x3a8a82['wtypeId']=DataManager[_0x307c8d(0xa5d)](RegExp['$1']);else{if(_0x55ffe1['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if('TrGLa'!==_0x307c8d(0x8d0))_0x4eb324[_0x307c8d(0x85a)](_0x108fc3);else{const _0x368ae9=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x307c8d(0x28b)](''),_0xe501df=DataManager[_0x307c8d(0x8c9)](_0x368ae9);_0x3a8a82[_0x307c8d(0x839)]=DataManager['getWtypeIdWithName'](_0xe501df);}}}if(Imported[_0x307c8d(0xa47)]){const _0xb2a6f6=this[_0x307c8d(0x86f)]();for(const _0xb3c79d of _0xb2a6f6){const _0x6f9ff0=this['traitSet'](_0xb3c79d)['Name'][_0x307c8d(0x566)]()['trim'](),_0x5a3d1b=_0xb3c79d[_0x307c8d(0x566)]()[_0x307c8d(0x194)]();if(_0x55ffe1[_0x307c8d(0x453)](VisuMZ[_0x307c8d(0xaf7)]['RegExp']['SvBattlerSolo-%1-%2'[_0x307c8d(0x117)](_0x5a3d1b,_0x6f9ff0)]))_0x3a8a82[_0x307c8d(0x444)]=String(RegExp['$1']);else{if(_0x55ffe1['match'](VisuMZ[_0x307c8d(0xaf7)]['RegExp'][_0x307c8d(0x2c5)[_0x307c8d(0x117)](_0x5a3d1b,_0x6f9ff0)])){const _0x48874f=String(RegExp['$1'])[_0x307c8d(0x2cf)](/[\r\n]+/)[_0x307c8d(0x28b)]('');_0x3a8a82[_0x307c8d(0x444)]=DataManager[_0x307c8d(0x8c9)](_0x48874f);}}if(_0x55ffe1[_0x307c8d(0x453)](VisuMZ[_0x307c8d(0xaf7)][_0x307c8d(0x8d4)][_0x307c8d(0xa04)[_0x307c8d(0x117)](_0x5a3d1b,_0x6f9ff0)]))_0x3a8a82[_0x307c8d(0x839)]=DataManager[_0x307c8d(0xa5d)](RegExp['$1']);else{if(_0x55ffe1[_0x307c8d(0x453)](VisuMZ['ElementStatusCore']['RegExp'][_0x307c8d(0x4a2)[_0x307c8d(0x117)](_0x5a3d1b,_0x6f9ff0)])){if(_0x307c8d(0x130)!==_0x307c8d(0x560)){const _0x39b12a=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x307c8d(0x28b)](''),_0x4db4dc=DataManager[_0x307c8d(0x8c9)](_0x39b12a);_0x3a8a82['wtypeId']=DataManager['getWtypeIdWithName'](_0x4db4dc);}else{if(!_0x5d4dc0[_0x307c8d(0x735)][_0x307c8d(0x7d9)][_0x307c8d(0x4db)](this,_0x2f219e))return!![];if(!_0x1d27e8['prototype']['checkShowHideSwitchNotetags'][_0x307c8d(0x4db)](this,_0x3e2e4c))return!![];if(!_0x103dbd[_0x307c8d(0x735)][_0x307c8d(0x7fa)][_0x307c8d(0x4db)](this,_0x7cdc6c))return!![];return![];}}}if(_0x55ffe1['match'](VisuMZ[_0x307c8d(0xaf7)][_0x307c8d(0x8d4)][_0x307c8d(0x6f2)['format'](_0x5a3d1b,_0x6f9ff0)]))_0x307c8d(0x336)===_0x307c8d(0x969)?this[_0x307c8d(0x856)](_0x307c8d(0x77d)):_0x3a8a82[_0x307c8d(0x998)]=String(RegExp['$1'])['toLowerCase']()[_0x307c8d(0x194)]();else{if(_0x55ffe1[_0x307c8d(0x453)](VisuMZ[_0x307c8d(0xaf7)]['RegExp']['SvMotionIdleMass-%1-%2'[_0x307c8d(0x117)](_0x5a3d1b,_0x6f9ff0)])){const _0x4a4876=String(RegExp['$1'])[_0x307c8d(0x2cf)](/[\r\n]+/)[_0x307c8d(0x28b)]('');_0x3a8a82['motionIdle']=DataManager['processRandomizedData'](_0x4a4876);}}}}},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0xa5a)]=function(){const _0x1254a2=_0x3237d7;return this[_0x1254a2(0x327)]||0x0;},Game_Enemy[_0x3237d7(0x735)]['attackAnimationId2']=function(){const _0x46898a=_0x3237d7;return this[_0x46898a(0xa5a)]();},Game_Enemy['prototype'][_0x3237d7(0xab2)]=function(_0x307b0f){const _0x141fe7=_0x3237d7;return this[_0x141fe7(0xa5a)]();},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x85e)]=function(){const _0x3a2bd3=_0x3237d7;if(this[_0x3a2bd3(0x9df)]()['note'][_0x3a2bd3(0x453)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x3a2bd3(0x735)][_0x3a2bd3(0x85e)][_0x3a2bd3(0x4db)](this);},Game_Enemy[_0x3237d7(0x735)]['isBattlerGrounded']=function(){const _0x1a0072=_0x3237d7;if(this[_0x1a0072(0x9df)]()[_0x1a0072(0x4fe)][_0x1a0072(0x453)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype']['skills']=function(){const _0x475a8e=_0x3237d7,_0x2fe7b7=[];for(const _0x3d0d67 of this['enemy']()[_0x475a8e(0xacd)]){if(_0x475a8e(0x311)!==_0x475a8e(0x311))this[_0x475a8e(0x856)](_0x475a8e(0x6ca));else{const _0x1df3b3=$dataSkills[_0x3d0d67[_0x475a8e(0x4c2)]];if(_0x1df3b3&&!_0x2fe7b7['includes'](_0x1df3b3))_0x2fe7b7[_0x475a8e(0x857)](_0x1df3b3);}}return _0x2fe7b7;},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x330)]=function(){const _0x2cbc83=_0x3237d7;let _0x4c04fa='battleUIOffsetX';if(this[_0x2cbc83(0x94e)](_0x4c04fa))return this['_cache'][_0x4c04fa];return this['_cache'][_0x4c04fa]=this[_0x2cbc83(0x389)](this[_0x2cbc83(0x9df)]()),this['_cache'][_0x4c04fa];},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x41e)]=function(){const _0x169ebe=_0x3237d7;let _0x59b9ff=_0x169ebe(0x41e);if(this[_0x169ebe(0x94e)](_0x59b9ff))return this[_0x169ebe(0xa2)][_0x59b9ff];return this[_0x169ebe(0xa2)][_0x59b9ff]=this[_0x169ebe(0x742)](this[_0x169ebe(0x9df)]()),this['_cache'][_0x59b9ff];},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x43a)]=function(){const _0xbd4567=_0x3237d7;if(this[_0xbd4567(0xb3)]!==undefined)return this[_0xbd4567(0xb3)];return this['setupBattleCoreData'](),this[_0xbd4567(0xb3)];},Game_Enemy[_0x3237d7(0x735)]['hasSvBattler']=function(){const _0x1230a8=_0x3237d7;return this['svBattlerData']()[_0x1230a8(0x444)]!=='';},Game_Enemy[_0x3237d7(0x735)]['svBattlerName']=function(){const _0x164704=_0x3237d7;return this[_0x164704(0x43a)]()[_0x164704(0x444)];},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x8ab)]=function(){const _0x47ee7e=_0x3237d7;return this[_0x47ee7e(0x9f5)]()?VisuMZ[_0x47ee7e(0xa4)][_0x47ee7e(0x98d)][_0x47ee7e(0x4da)][_0x47ee7e(0xb7)]:VisuMZ['BattleCore'][_0x47ee7e(0x98d)]['Enemy'][_0x47ee7e(0xb7)];},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x5d8)]=function(_0x1f13cc){const _0xa540af=_0x3237d7;Game_Battler[_0xa540af(0x735)][_0xa540af(0x5d8)][_0xa540af(0x4db)](this,_0x1f13cc);if(this[_0xa540af(0x9f5)]())this[_0xa540af(0x652)](_0x1f13cc);},Game_Enemy['prototype'][_0x3237d7(0x3e8)]=function(){const _0x34511d=_0x3237d7,_0x45104a=this[_0x34511d(0x43a)]()[_0x34511d(0x839)]||0x0,_0x3a67c2=$dataSystem[_0x34511d(0x8f3)][_0x45104a];if(_0x3a67c2){if(_0x34511d(0x9c1)!==_0x34511d(0x9c1))this[_0x34511d(0x77b)]()&&this['_phase']===_0x34511d(0x8c0)&&(this[_0x34511d(0x7ce)]=null),_0x1a5e45[_0x34511d(0xa4)]['BattleManager_cancelActorInput']['call'](this);else{if(_0x3a67c2[_0x34511d(0x2a5)]===0x0)this[_0x34511d(0x85a)]('thrust');else{if(_0x3a67c2['type']===0x1)_0x34511d(0xb2f)!==_0x34511d(0xb2f)?_0x3d7a03=_0x1286c6['SideviewSelect']:this['requestMotion'](_0x34511d(0x275));else _0x3a67c2['type']===0x2&&this[_0x34511d(0x85a)](_0x34511d(0x960));}}}},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x69d)]=function(){const _0x3acbba=_0x3237d7,_0x56117a=this[_0x3acbba(0x43a)]()[_0x3acbba(0x839)]||0x0,_0x4f2010=$dataSystem['attackMotions'][_0x56117a];_0x4f2010&&this[_0x3acbba(0x85f)](_0x4f2010[_0x3acbba(0x3ed)]);},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x7e2)]=function(){const _0x5846d8=_0x3237d7,_0x2557b9=this[_0x5846d8(0x43a)]()[_0x5846d8(0x839)]||0x0;return $dataSystem[_0x5846d8(0x8f3)][_0x2557b9];},Game_Enemy['prototype'][_0x3237d7(0x464)]=function(_0xe84f6a){const _0xb37b33=_0x3237d7;return this[_0xb37b33(0x7e2)]();},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x71b)]=function(){const _0x29ddec=_0x3237d7;Game_Battler['prototype'][_0x29ddec(0x71b)][_0x29ddec(0x4db)](this),this[_0x29ddec(0xa06)]()&&this[_0x29ddec(0x9f5)]()&&this['requestMotion'](_0x29ddec(0xb49)),SoundManager['playEnemyDamage']();},Game_Enemy['prototype'][_0x3237d7(0x170)]=function(){const _0x8375c8=_0x3237d7;Game_Battler[_0x8375c8(0x735)][_0x8375c8(0x170)][_0x8375c8(0x4db)](this),this['requestMotion'](_0x8375c8(0x3a4));},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0xb0c)]=function(){const _0x46b3ce=_0x3237d7;Game_Battler['prototype'][_0x46b3ce(0xb0c)][_0x46b3ce(0x4db)](this),this[_0x46b3ce(0x85a)](_0x46b3ce(0x3a4));},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x1b2)]=function(){const _0x2e06c7=_0x3237d7;Game_Battler[_0x2e06c7(0x735)]['performCounter'][_0x2e06c7(0x4db)](this),this[_0x2e06c7(0x3e8)]();},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x40f)]=function(){const _0x32d212=_0x3237d7;if(this['hasSvBattler']()){if(_0x32d212(0xda)!==_0x32d212(0xda))this[_0x32d212(0x34a)][_0x32d212(0x6ad)]=![];else{if(this['collapseType']()>=0x1)return!![];return this[_0x32d212(0x43a)]()[_0x32d212(0x5c1)];}}else return'xtJKs'===_0x32d212(0xa4b)?this[_0x32d212(0xe7)]['pop']():!![];},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x357)]=function(){const _0x5cb2e4=_0x3237d7;return this[_0x5cb2e4(0x43a)]()[_0x5cb2e4(0x372)];},Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x565)]=function(){const _0x433ec9=_0x3237d7;return this[_0x433ec9(0x43a)]()['anchorY'];},Game_Enemy['prototype'][_0x3237d7(0x44c)]=function(){const _0x336dea=_0x3237d7;return this[_0x336dea(0x43a)]()[_0x336dea(0x387)];},VisuMZ['BattleCore']['Game_Enemy_transform']=Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x82b)],Game_Enemy[_0x3237d7(0x735)][_0x3237d7(0x82b)]=function(_0x12a706){const _0x10ec38=_0x3237d7;VisuMZ['BattleCore'][_0x10ec38(0xd4)]['call'](this,_0x12a706),this[_0x10ec38(0x41a)](),this[_0x10ec38(0xb2d)]();const _0x142e51=this['battler']();if(_0x142e51)_0x142e51[_0x10ec38(0x4e9)](this);},Game_Unit[_0x3237d7(0x735)]['processBattleCoreJS']=function(_0x4d7db8){const _0x20b349=_0x3237d7;for(const _0x3d6961 of this[_0x20b349(0x199)]()){if(_0x20b349(0x9bb)===_0x20b349(0x295))return _0x8363d9[_0x20b349(0xa4)][_0x20b349(0x98d)]['Actor']['AnchorX'];else{if(_0x3d6961)_0x3d6961[_0x20b349(0x9ea)](_0x4d7db8);}}},Game_Unit[_0x3237d7(0x735)][_0x3237d7(0xb0e)]=function(){const _0x32fe98=_0x3237d7,_0x2e90ab=this[_0x32fe98(0x7ff)]();return _0x2e90ab[Math['randomInt'](_0x2e90ab[_0x32fe98(0x60c)])];},VisuMZ['BattleCore'][_0x3237d7(0x8fd)]=Game_Party['prototype'][_0x3237d7(0x549)],Game_Party[_0x3237d7(0x735)][_0x3237d7(0x549)]=function(_0xb86225){const _0x327035=_0x3237d7;VisuMZ[_0x327035(0xa4)][_0x327035(0x8fd)][_0x327035(0x4db)](this,_0xb86225),BattleManager[_0x327035(0x28c)]();},VisuMZ[_0x3237d7(0xa4)]['Game_Party_removeActor']=Game_Party[_0x3237d7(0x735)][_0x3237d7(0x6a2)],Game_Party[_0x3237d7(0x735)][_0x3237d7(0x6a2)]=function(_0x256bf4){const _0xc2a1b6=_0x3237d7;VisuMZ[_0xc2a1b6(0xa4)][_0xc2a1b6(0x44e)]['call'](this,_0x256bf4),BattleManager['refreshStatusWindow']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x9db)]=Game_Troop[_0x3237d7(0x735)][_0x3237d7(0x56c)],Game_Troop[_0x3237d7(0x735)][_0x3237d7(0x56c)]=function(_0x43feb4){const _0x2df36e=_0x3237d7;$gameTemp[_0x2df36e(0x63a)](),$gameTemp[_0x2df36e(0xb05)](_0x43feb4),VisuMZ[_0x2df36e(0xa4)][_0x2df36e(0x9db)][_0x2df36e(0x4db)](this,_0x43feb4);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x1fc)]=Game_Troop[_0x3237d7(0x735)][_0x3237d7(0x1ea)],Game_Troop['prototype'][_0x3237d7(0x1ea)]=function(){const _0x4ad7eb=_0x3237d7;let _0x35ca2b=VisuMZ[_0x4ad7eb(0xa4)][_0x4ad7eb(0x1fc)]['call'](this);return this[_0x4ad7eb(0x320)]&&(_0x35ca2b*=this[_0x4ad7eb(0x320)]()),Math['ceil'](_0x35ca2b);},Game_Troop[_0x3237d7(0x735)][_0x3237d7(0x320)]=function(){return 0x1;},VisuMZ['BattleCore'][_0x3237d7(0x2d1)]=Game_Map[_0x3237d7(0x735)]['setupBattleback'],Game_Map[_0x3237d7(0x735)][_0x3237d7(0x528)]=function(){const _0x421a74=_0x3237d7;VisuMZ[_0x421a74(0xa4)]['Game_Map_setupBattleback'][_0x421a74(0x4db)](this),this[_0x421a74(0x440)]();},Game_Map[_0x3237d7(0x735)][_0x3237d7(0x440)]=function(){const _0x187fb4=_0x3237d7;this[_0x187fb4(0x8b7)]={},this[_0x187fb4(0x9e0)]={};if(!$dataMap)return;const _0x481246=$dataMap[_0x187fb4(0x4fe)];if(!_0x481246)return;const _0x2e96ac=_0x481246[_0x187fb4(0x453)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x2e96ac)for(const _0x376083 of _0x2e96ac){if(_0x187fb4(0x8df)!==_0x187fb4(0x68b)){_0x376083[_0x187fb4(0x453)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x4e9cfe=Number(RegExp['$1']),_0x326901=Number(RegExp['$2']),_0x50cee6=_0x326901===0x1?this['_regionBattleback1']:this[_0x187fb4(0x9e0)],_0x39a6de=String(RegExp['$3']);_0x50cee6[_0x4e9cfe]=_0x39a6de;}else{if(!_0x57558b)return![];return _0x36f787[_0x187fb4(0x1c9)]===0x0||_0x45b990[_0x187fb4(0x1c9)]===0x1;}}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x37c)]=Game_Map[_0x3237d7(0x735)][_0x3237d7(0x1dc)],Game_Map[_0x3237d7(0x735)][_0x3237d7(0x1dc)]=function(){const _0x39bfce=_0x3237d7;if(!BattleManager[_0x39bfce(0x6c8)]()){const _0x1c0106=$gamePlayer[_0x39bfce(0x982)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this['_regionBattleback1'][_0x1c0106]){if(_0x39bfce(0x6fa)!==_0x39bfce(0x573))return this[_0x39bfce(0x8b7)][_0x1c0106];else{let _0x5320b2=0x0;this[_0x39bfce(0x6a1)][_0x39bfce(0x60c)]>0x0&&(_0x5320b2=this['_baseLineStack'][this['_baseLineStack'][_0x39bfce(0x60c)]-0x1]),this[_0x39bfce(0x2a8)][_0x39bfce(0x60c)]>_0x5320b2?this[_0x39bfce(0x6ca)]():this[_0x39bfce(0x4a1)]();}}}return VisuMZ[_0x39bfce(0xa4)][_0x39bfce(0x37c)][_0x39bfce(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x3a2)]=Game_Map[_0x3237d7(0x735)][_0x3237d7(0x58c)],Game_Map['prototype']['battleback2Name']=function(){const _0x1385ac=_0x3237d7;if(!BattleManager[_0x1385ac(0x6c8)]()){const _0x2a6bad=$gamePlayer[_0x1385ac(0x982)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x1385ac(0x8b7)]&&this[_0x1385ac(0x9e0)][_0x2a6bad])return this[_0x1385ac(0x9e0)][_0x2a6bad];}return VisuMZ['BattleCore'][_0x1385ac(0x3a2)][_0x1385ac(0x4db)](this);},VisuMZ['BattleCore']['Game_Map_encounterList']=Game_Map[_0x3237d7(0x735)][_0x3237d7(0x6cb)],Game_Map[_0x3237d7(0x735)]['encounterList']=function(){const _0x3a5ae3=_0x3237d7;let _0x11b11b=JsonEx[_0x3a5ae3(0xa88)](VisuMZ[_0x3a5ae3(0xa4)][_0x3a5ae3(0x7fe)][_0x3a5ae3(0x4db)](this));return VisuMZ[_0x3a5ae3(0xa4)][_0x3a5ae3(0x480)](_0x11b11b);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x480)]=function(_0x499a99){const _0x34acdc=_0x3237d7;var _0x335cca,_0xb49dca,_0x6c69a1;for(_0x6c69a1=_0x499a99[_0x34acdc(0x60c)]-0x1;_0x6c69a1>0x0;_0x6c69a1--){_0x335cca=Math[_0x34acdc(0x521)](Math[_0x34acdc(0x79e)]()*(_0x6c69a1+0x1)),_0xb49dca=_0x499a99[_0x6c69a1],_0x499a99[_0x6c69a1]=_0x499a99[_0x335cca],_0x499a99[_0x335cca]=_0xb49dca;}return _0x499a99;},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x79a)]=Game_Interpreter[_0x3237d7(0x735)][_0x3237d7(0x658)],Game_Interpreter['prototype'][_0x3237d7(0x658)]=function(_0x36698d){const _0x22417f=_0x3237d7;return $gameTemp[_0x22417f(0x7e4)](this),VisuMZ[_0x22417f(0xa4)][_0x22417f(0x79a)][_0x22417f(0x4db)](this,_0x36698d);},VisuMZ['BattleCore'][_0x3237d7(0x513)]=Game_Interpreter[_0x3237d7(0x735)][_0x3237d7(0x864)],Game_Interpreter[_0x3237d7(0x735)]['updateWaitMode']=function(){const _0xfa9011=_0x3237d7;if(SceneManager[_0xfa9011(0x5cb)]()){if(_0xfa9011(0xa5e)==='hBCPw')_0x1d3e67[_0xfa9011(0x888)]();else switch(this['_waitMode']){case _0xfa9011(0x908):if(Imported[_0xfa9011(0x255)]){if($gameScreen[_0xfa9011(0x417)]()['angleDuration']>0x0)return!![];this[_0xfa9011(0x40c)]='';}break;case _0xfa9011(0x785):if(BattleManager[_0xfa9011(0x314)][_0xfa9011(0xb4)]())return!![];this[_0xfa9011(0x40c)]='';break;case _0xfa9011(0x636):if(Imported[_0xfa9011(0x255)]){if(_0xfa9011(0xb39)!==_0xfa9011(0xb39))_0x44dc54[_0xfa9011(0xa4)][_0xfa9011(0x98d)]['Enemy']['NameAttachStateIcon']&&(this[_0xfa9011(0x216)]=new _0x57037b(),this['addChild'](this[_0xfa9011(0x216)]));else{if($gameScreen[_0xfa9011(0x417)]()[_0xfa9011(0x54a)]>0x0)return!![];if($gameScreen[_0xfa9011(0x417)]()['cameraOffsetDuration']>0x0)return!![];this[_0xfa9011(0x40c)]='';}}break;case _0xfa9011(0x345):if(BattleManager[_0xfa9011(0x314)][_0xfa9011(0x8a4)]())return!![];this[_0xfa9011(0x40c)]='';break;case _0xfa9011(0x4fb):if(BattleManager[_0xfa9011(0x314)][_0xfa9011(0x699)]())return!![];this[_0xfa9011(0x40c)]='';break;case _0xfa9011(0xae8):if(BattleManager[_0xfa9011(0x314)][_0xfa9011(0x84a)]())return!![];this['_waitMode']='';break;case'battlelog':if(BattleManager[_0xfa9011(0x1cd)][_0xfa9011(0xa43)]())return!![];this[_0xfa9011(0x40c)]='';break;case'battleMove':if(BattleManager[_0xfa9011(0x314)][_0xfa9011(0x561)]())return!![];this[_0xfa9011(0x40c)]='';break;case'battleOpacity':if(BattleManager[_0xfa9011(0x314)][_0xfa9011(0x4d6)]())return!![];this[_0xfa9011(0x40c)]='';break;case'battleGrow':if(BattleManager[_0xfa9011(0x314)][_0xfa9011(0xc2)]())return!![];this[_0xfa9011(0x40c)]='';break;case _0xfa9011(0x94f):if(BattleManager[_0xfa9011(0x314)][_0xfa9011(0xa2f)]())return!![];this[_0xfa9011(0x40c)]='';break;case _0xfa9011(0x5ce):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager['_spriteset']['isAnyProjectilePresent']())return!![];this[_0xfa9011(0x40c)]='';}break;case _0xfa9011(0x75f):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0xfa9011(0x417)]()[_0xfa9011(0x18a)]>0x0)return!![];this[_0xfa9011(0x40c)]='';}break;case'battleSpin':if(BattleManager['_spriteset'][_0xfa9011(0x40b)]())return!![];this[_0xfa9011(0x40c)]='';break;case _0xfa9011(0x876):if(Imported[_0xfa9011(0x255)]){if($gameScreen[_0xfa9011(0x417)]()[_0xfa9011(0x7b8)]>0x0)return!![];this['_waitMode']='';}break;}}return VisuMZ[_0xfa9011(0xa4)][_0xfa9011(0x513)][_0xfa9011(0x4db)](this);},VisuMZ['BattleCore']['Game_Interpreter_command301']=Game_Interpreter[_0x3237d7(0x735)][_0x3237d7(0x78c)],Game_Interpreter[_0x3237d7(0x735)][_0x3237d7(0x78c)]=function(_0xcaa708){const _0x4780df=_0x3237d7;if(!$gameParty[_0x4780df(0x613)]())return this[_0x4780df(0x93b)](_0xcaa708);else{if('yUTGg'!==_0x4780df(0x6db)){this[_0x4780df(0x317)]=!![];const _0x6532d0=this[_0x4780df(0x39d)]();for(let _0x55b877=0x0;_0x55b877<_0x6532d0[_0x4780df(0x60c)];_0x55b877++){_0x6532d0[_0x55b877]===0x1&&this[_0x4780df(0xa2a)]!==_0x55b877&&(_0x1c4708[_0x55b877]=null);}this[_0x4780df(0x317)]=_0x567342;}else return VisuMZ[_0x4780df(0xa4)][_0x4780df(0x1c5)]['call'](this,_0xcaa708);}},Game_Interpreter[_0x3237d7(0x735)]['command3011']=function(_0x45ac59){const _0x3f6008=_0x3237d7;return VisuMZ[_0x3f6008(0xa4)]['Game_Interpreter_command301']['call'](this,_0x45ac59),BattleManager['setEventCallback'](_0x2dd411=>{const _0x184b3a=_0x3f6008;_0x184b3a(0x2f1)===_0x184b3a(0xa53)?(_0x311a9a-=this[_0x184b3a(0x4ba)],_0x4ae6f8-=this[_0x184b3a(0x7a4)]):this[_0x184b3a(0x160)][this['_indent']]=_0x2dd411;}),!![];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x77a)]=function(_0x2d77d8){const _0x51b97d=$dataCommonEvents[_0x2d77d8];if(!_0x51b97d)return![];if(_0x51b97d['list']['length']<=0x1)return![];return!![];},Game_Interpreter[_0x3237d7(0x735)][_0x3237d7(0x93b)]=function(_0x44d182){const _0x3c0956=_0x3237d7,_0x28c086=VisuMZ[_0x3c0956(0xa4)][_0x3c0956(0x98d)][_0x3c0956(0x87c)],_0x35d30a=_0x28c086[_0x3c0956(0x16b)],_0x1444b9=$dataCommonEvents[_0x35d30a];if(_0x1444b9&&VisuMZ[_0x3c0956(0xa4)][_0x3c0956(0x77a)](_0x35d30a)){const _0x566208=this[_0x3c0956(0x5a4)]()?this['_eventId']:0x0,_0x1f1852=_0x1444b9[_0x3c0956(0x5fc)];this['setupChild'](_0x1f1852,_0x566208),this[_0x3c0956(0x5a1)]=JsonEx[_0x3c0956(0xa88)](this[_0x3c0956(0x5a1)]);const _0x4e7052={'code':0xbc3,'indent':this[_0x3c0956(0x80a)],'parameters':JsonEx[_0x3c0956(0xa88)](_0x44d182)};return this[_0x3c0956(0x5a1)][_0x3c0956(0x4fd)](this[_0x3c0956(0x399)]+0x1,0x0,_0x4e7052),!![];}else return VisuMZ['BattleCore'][_0x3c0956(0x1c5)][_0x3c0956(0x4db)](this,_0x44d182);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x7b2)]=BattleManager[_0x3237d7(0x894)],BattleManager['onEncounter']=function(){const _0x5ae21f=_0x3237d7;VisuMZ['BattleCore'][_0x5ae21f(0x7b2)][_0x5ae21f(0x4db)](this),this[_0x5ae21f(0xae0)]();},BattleManager[_0x3237d7(0xae0)]=function(){const _0x2a8f56=_0x3237d7,_0xe02301=VisuMZ['BattleCore']['Settings'][_0x2a8f56(0x87c)],_0xfca5cf=_0xe02301['BattleStartEvent'];_0xfca5cf&&VisuMZ[_0x2a8f56(0xa4)][_0x2a8f56(0x77a)](_0xfca5cf)&&(_0x2a8f56(0x25c)===_0x2a8f56(0x25c)?(this[_0x2a8f56(0x3ae)]=!![],$gameTemp['reserveCommonEvent'](_0xe02301['BattleStartEvent']),$gameMap[_0x2a8f56(0x42f)](),$gameMap[_0x2a8f56(0x7f1)][_0x2a8f56(0xa22)]=!![]):(_0x5ade0e*=-0x1,_0x13c802*=-0x1)),_0xe02301[_0x2a8f56(0x7da)]>0x0&&(this['_canLose']=!![]);},VisuMZ['BattleCore']['Scene_Map_updateCallMenu']=Scene_Map[_0x3237d7(0x735)]['updateCallMenu'],Scene_Map[_0x3237d7(0x735)]['updateCallMenu']=function(){const _0x1d36b3=_0x3237d7;if(BattleManager[_0x1d36b3(0x3ae)])return;VisuMZ[_0x1d36b3(0xa4)]['Scene_Map_updateCallMenu'][_0x1d36b3(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)]['Scene_Map_launchBattle']=Scene_Map[_0x3237d7(0x735)][_0x3237d7(0x929)],Scene_Map[_0x3237d7(0x735)]['launchBattle']=function(){const _0xd9f8f0=_0x3237d7;if(BattleManager[_0xd9f8f0(0x3ae)]){if('jZAGA'!==_0xd9f8f0(0x225)){if(_0x47a257[_0xd9f8f0(0xa45)]&&_0x375285['isBattleTest']())return!![];if(this[_0xd9f8f0(0x820)][_0xd9f8f0(0x56d)])return![];return this['_battler']['hasBeenDefeatedBefore']();}else this[_0xd9f8f0(0x6e8)]();}else VisuMZ[_0xd9f8f0(0xa4)][_0xd9f8f0(0x476)]['call'](this);},Scene_Map[_0x3237d7(0x735)]['battleCorePreBattleCommonEvent']=function(){this['_active']=!![];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x3a0)]=SceneManager[_0x3237d7(0x850)],SceneManager[_0x3237d7(0x850)]=function(){const _0x45be91=_0x3237d7;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x45be91(0xa4)][_0x45be91(0x3a0)][_0x45be91(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)]['Game_Interpreter_terminate']=Game_Interpreter['prototype'][_0x3237d7(0x379)],Game_Interpreter[_0x3237d7(0x735)][_0x3237d7(0x379)]=function(){const _0x114d5b=_0x3237d7;VisuMZ[_0x114d5b(0xa4)]['Game_Interpreter_terminate']['call'](this),this[_0x114d5b(0xa22)]&&(this[_0x114d5b(0xa22)]=undefined,SceneManager['_scene']['battleCoreResumeLaunchBattle']());},Scene_Map[_0x3237d7(0x735)][_0x3237d7(0x2d8)]=function(){BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this['stop']();},VisuMZ['BattleCore'][_0x3237d7(0x1d9)]=Scene_Map['prototype']['initialize'],Scene_Map[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(){const _0x96d2d7=_0x3237d7;VisuMZ['BattleCore']['Scene_Map_initializeAfter'][_0x96d2d7(0x4db)](this),BattleManager[_0x96d2d7(0x3f9)]&&(this[_0x96d2d7(0x832)]=!![],BattleManager[_0x96d2d7(0x3f9)]=undefined);},VisuMZ[_0x3237d7(0xa4)]['Scene_Map_initialize']=Scene_Map['prototype']['initialize'],Scene_Map['prototype'][_0x3237d7(0xbb)]=function(){const _0x2fcb6e=_0x3237d7;VisuMZ[_0x2fcb6e(0xa4)]['Scene_Map_initialize'][_0x2fcb6e(0x4db)](this),$gameTemp[_0x2fcb6e(0x63a)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x6b2)]=Scene_ItemBase[_0x3237d7(0x735)][_0x3237d7(0x174)],Scene_ItemBase[_0x3237d7(0x735)][_0x3237d7(0x174)]=function(){const _0x1ec58c=_0x3237d7;VisuMZ[_0x1ec58c(0xa4)][_0x1ec58c(0x6b2)]['call'](this);if(this[_0x1ec58c(0x7be)]()[_0x1ec58c(0x4fe)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x1ec58c(0x639)!=='xFBdv')this['_activeWeaponSlot']=_0x46fc24,this['_cache']={};else return;}this['item']()[_0x1ec58c(0x4fe)][_0x1ec58c(0x453)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x1ec58c(0x238)]=[]),DataManager[_0x1ec58c(0x4f6)](this[_0x1ec58c(0x7be)]())&&($gameTemp[_0x1ec58c(0x238)]=[]);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x60b)]=Scene_Options['prototype']['maxCommands'],Scene_Options[_0x3237d7(0x735)][_0x3237d7(0x75a)]=function(){const _0x3cc839=_0x3237d7;let _0x4c3c17=VisuMZ[_0x3cc839(0xa4)][_0x3cc839(0x60b)][_0x3cc839(0x4db)](this);const _0x5c0d89=VisuMZ['BattleCore'][_0x3cc839(0x98d)];if(_0x5c0d89[_0x3cc839(0x811)]['AddOption']&&_0x5c0d89[_0x3cc839(0x811)][_0x3cc839(0x89d)])_0x4c3c17+=0x2;if(_0x5c0d89[_0x3cc839(0x3c0)][_0x3cc839(0xafc)]&&_0x5c0d89[_0x3cc839(0x3c0)][_0x3cc839(0x89d)])_0x4c3c17+=0x1;return _0x4c3c17;},VisuMZ[_0x3237d7(0xa4)]['Scene_Battle_initialize']=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xbb)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(){const _0x4d5072=_0x3237d7;VisuMZ[_0x4d5072(0xa4)][_0x4d5072(0xe2)][_0x4d5072(0x4db)](this),this[_0x4d5072(0x809)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x723)]=Scene_Battle['prototype'][_0x3237d7(0x7fc)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x7fc)]=function(){const _0x3ae534=_0x3237d7;if(SceneManager[_0x3ae534(0x5a8)]()){if(_0x3ae534(0xa71)!=='JOisj'){Scene_Message[_0x3ae534(0x735)][_0x3ae534(0x7fc)][_0x3ae534(0x4db)](this);this[_0x3ae534(0x314)]&&(_0x3ae534(0x1b4)!==_0x3ae534(0x1b4)?this[_0x3ae534(0x898)]['x']=-this[_0x3ae534(0x898)]['width']-0x4:this[_0x3ae534(0x314)]['update']());if(BattleManager[_0x3ae534(0x2be)]){if(_0x3ae534(0x104)!=='cqfLD')BattleManager[_0x3ae534(0x3ec)]();else{if(!_0x206e89[_0x3ae534(0x5cb)]())return;_0x468c26['ConvertParams'](_0x43798c,_0x1c5661);const _0xbeb69b=_0x2289f0['_action'];if(!_0xbeb69b)return;let _0x48cae0=_0x2047b9[_0x3ae534(0x665)];_0xbeb69b['setCustomDamageFormula'](_0x48cae0);}}}else _0xe7675c['BattleCore'][_0x3ae534(0xa44)]['call'](this,_0x1f63eb),this[_0x3ae534(0x9b8)]();}else _0x3ae534(0x6ff)!==_0x3ae534(0x4df)?(VisuMZ['BattleCore']['Scene_Battle_start'][_0x3ae534(0x4db)](this),$gameTroop['onBattleStartOnceParallels']()):this[_0x3ae534(0x4f3)](_0xd94382,_0xc72375,_0x5e8657);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x6fc)]=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x2db)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x2db)]=function(){const _0x1db12d=_0x3237d7;SceneManager[_0x1db12d(0x9fa)]()?Scene_Message[_0x1db12d(0x735)][_0x1db12d(0x2db)][_0x1db12d(0x4db)](this):VisuMZ['BattleCore']['Scene_Battle_stop']['call'](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x38a)]=Scene_Battle[_0x3237d7(0x735)]['terminate'],Scene_Battle[_0x3237d7(0x735)]['terminate']=function(){const _0x53c12f=_0x3237d7;if(SceneManager[_0x53c12f(0x9fa)]()){if(_0x53c12f(0x678)===_0x53c12f(0x678))Scene_Message[_0x53c12f(0x735)][_0x53c12f(0x379)]['call'](this);else{if(!this[_0x53c12f(0x7c0)])return;if(!_0x39396d)return;if(!_0xc52e16)return;const _0x176d15=this[_0x53c12f(0x901)](_0x493a0a['index']());_0x176d15['x']+=_0x176d15[_0x53c12f(0xa28)]/0x2+this[_0x53c12f(0x386)],_0xd32d01['x']=_0x176d15['x'],_0x428a54['y']=_0x176d15['y'],this[_0x53c12f(0x7c0)][_0x53c12f(0x70d)](_0x2dfff4);}}else VisuMZ[_0x53c12f(0xa4)][_0x53c12f(0x38a)][_0x53c12f(0x4db)](this);this[_0x53c12f(0x809)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x5e6)]=function(){const _0x4edbc3=_0x3237d7;if(ConfigManager[_0x4edbc3(0x529)]&&ConfigManager[_0x4edbc3(0x93c)]!==undefined)return ConfigManager[_0x4edbc3(0x93c)];else{if(this[_0x4edbc3(0x457)]()===_0x4edbc3(0xa93)){if('nSEsY'===_0x4edbc3(0x69a))return![];else _0x41abb0[_0x4edbc3(0x735)][_0x4edbc3(0x71b)]['call'](this),this['isSpriteVisible']()&&this[_0x4edbc3(0x9f5)]()&&this['requestMotion'](_0x4edbc3(0xb49)),_0x3f99b3[_0x4edbc3(0x54c)]();}else{return Scene_Message[_0x4edbc3(0x735)][_0x4edbc3(0x5e6)]['call'](this);;}}},VisuMZ[_0x3237d7(0xa4)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x5ed)],Scene_Battle['prototype'][_0x3237d7(0x5ed)]=function(){const _0x40db7f=_0x3237d7;this[_0x40db7f(0x1da)](),VisuMZ[_0x40db7f(0xa4)][_0x40db7f(0x239)][_0x40db7f(0x4db)](this),this[_0x40db7f(0x782)]();},VisuMZ[_0x3237d7(0xa4)]['Scene_Battle_createCancelButton']=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x7af)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x7af)]=function(){const _0x2f775e=_0x3237d7;VisuMZ['BattleCore'][_0x2f775e(0x62d)][_0x2f775e(0x4db)](this),this[_0x2f775e(0x457)]()===_0x2f775e(0xa93)&&this[_0x2f775e(0xf3)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x91d)]=function(_0x557df5){const _0x11b589=_0x3237d7;_0x557df5?_0x11b589(0x29e)===_0x11b589(0x29e)?(this['_windowLayer']['x']=(Graphics['width']-Graphics[_0x11b589(0x63d)])/0x2,this[_0x11b589(0x548)]['y']=(Graphics[_0x11b589(0x766)]-Graphics[_0x11b589(0x747)])/0x2):(this['performCollapse'](),this[_0x11b589(0x695)]()):_0x11b589(0x847)!=='VZhPf'?(this[_0x11b589(0x548)]['x']=Graphics[_0x11b589(0xa28)]*0xa,this[_0x11b589(0x548)]['y']=Graphics['height']*0xa):(_0x4bcc29['BattleCore']['Sprite_Battler_update'][_0x11b589(0x4db)](this),!this[_0x11b589(0x820)]&&this[_0x11b589(0x34a)]&&(this[_0x11b589(0x34a)][_0x11b589(0x6ad)]=![]));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x1f5)]=Scene_Battle[_0x3237d7(0x735)]['selectNextCommand'],Scene_Battle['prototype'][_0x3237d7(0x4c9)]=function(){const _0x17390f=_0x3237d7,_0x219a3b=BattleManager[_0x17390f(0x5f9)]();VisuMZ[_0x17390f(0xa4)][_0x17390f(0x1f5)][_0x17390f(0x4db)](this);if(_0x219a3b){if(_0x17390f(0x9b2)!==_0x17390f(0xaa4)){if(_0x219a3b===BattleManager[_0x17390f(0x5f9)]())return;if(_0x219a3b===BattleManager[_0x17390f(0xb5c)])return;if(_0x219a3b['battler']())_0x219a3b[_0x17390f(0x1d5)]()[_0x17390f(0x533)]();}else this[_0x17390f(0x2a3)]();}},VisuMZ[_0x3237d7(0xa4)]['Scene_Battle_selectPreviousCommand']=Scene_Battle['prototype'][_0x3237d7(0xaf0)],Scene_Battle['prototype'][_0x3237d7(0xaf0)]=function(){const _0xc63295=_0x3237d7,_0x567614=BattleManager[_0xc63295(0x5f9)]();if(_0x567614&&_0x567614[_0xc63295(0x1d5)])_0x567614[_0xc63295(0x1d5)]()[_0xc63295(0x533)]();VisuMZ[_0xc63295(0xa4)]['Scene_Battle_selectPreviousCommand']['call'](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xa52)]=Scene_Battle[_0x3237d7(0x735)]['logWindowRect'],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x308)]=function(){const _0x282ef1=_0x3237d7;if(VisuMZ['BattleCore'][_0x282ef1(0x98d)][_0x282ef1(0x10b)][_0x282ef1(0x5df)])return VisuMZ[_0x282ef1(0xa4)]['Settings'][_0x282ef1(0x10b)][_0x282ef1(0x5df)][_0x282ef1(0x4db)](this);return VisuMZ[_0x282ef1(0xa4)]['Scene_Battle_logWindowRect'][_0x282ef1(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x7f2)]=Scene_Battle['prototype'][_0x3237d7(0x793)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x793)]=function(){const _0x92631b=_0x3237d7;VisuMZ[_0x92631b(0xa4)]['Scene_Battle_createPartyCommandWindow'][_0x92631b(0x4db)](this),this[_0x92631b(0x224)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x224)]=function(){const _0x20273b=_0x3237d7,_0x3ab9cc=this[_0x20273b(0x14c)];_0x3ab9cc[_0x20273b(0x804)]('autoBattle',this[_0x20273b(0x3cc)][_0x20273b(0x114)](this)),_0x3ab9cc[_0x20273b(0x804)](_0x20273b(0xac5),this[_0x20273b(0x428)][_0x20273b(0x114)](this));const _0x53c983=this[_0x20273b(0x457)]();switch(_0x53c983){case'xp':case _0x20273b(0x195):return this[_0x20273b(0x14c)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x3cc)]=function(){const _0xad0d93=_0x3237d7;BattleManager['_autoBattle']=!![],$gameParty['makeActions'](),this[_0xad0d93(0x4c9)]();if(BattleManager[_0xad0d93(0x77b)]()){if(_0xad0d93(0x701)===_0xad0d93(0x81e)){this[_0xad0d93(0xa15)]=this['enemy']()[_0xad0d93(0x444)]();const _0x59c04f=this[_0xad0d93(0xb29)](this[_0xad0d93(0xa15)])[_0xad0d93(0xa28)],_0x39d518=_0x413ae6[_0xad0d93(0x222)]((this[_0xad0d93(0x541)]-_0x59c04f)/0x2);this[_0xad0d93(0x83c)](this[_0xad0d93(0xa15)],_0x39d518,0x0,_0x59c04f+0x8);}else BattleManager[_0xad0d93(0x711)]=![];}},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x428)]=function(){const _0x3cf83a=_0x3237d7;this[_0x3cf83a(0x302)]()?(this[_0x3cf83a(0x6b6)]=!![],this['_logWindow'][_0x3cf83a(0x857)](_0x3cf83a(0x43b),VisuMZ[_0x3cf83a(0xa4)][_0x3cf83a(0x98d)][_0x3cf83a(0x661)][_0x3cf83a(0x958)])):this[_0x3cf83a(0x394)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x302)]=function(){const _0x202fa6=_0x3237d7;return BattleManager[_0x202fa6(0xaf6)]();},Scene_Battle[_0x3237d7(0x735)]['callOptions']=function(){const _0x5c31fa=_0x3237d7;this['_callSceneOptions']=![],this[_0x5c31fa(0x314)][_0x5c31fa(0x4dc)](),this[_0x5c31fa(0x548)][_0x5c31fa(0x6ad)]=![];if(BattleManager['isBattleTest']())($dataSystem[_0x5c31fa(0x1dc)]||$dataSystem['battleback2Name'])&&SceneManager[_0x5c31fa(0x14e)]();else($gameMap[_0x5c31fa(0x1dc)]()||$gameMap['battleback2Name']())&&SceneManager[_0x5c31fa(0x14e)]();SceneManager[_0x5c31fa(0x857)](Scene_Options),BattleManager[_0x5c31fa(0x77b)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager['actor']());},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x3db)]=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x9b1)],Scene_Battle[_0x3237d7(0x735)]['updateBattleProcess']=function(){const _0x32b7cf=_0x3237d7;VisuMZ[_0x32b7cf(0xa4)][_0x32b7cf(0x3db)]['call'](this);if(this[_0x32b7cf(0x6b6)]&&!BattleManager[_0x32b7cf(0xb5c)])this[_0x32b7cf(0x394)]();},VisuMZ['BattleCore']['Scene_Battle_update']=Scene_Battle[_0x3237d7(0x735)]['update'],Scene_Battle[_0x3237d7(0x735)]['update']=function(){const _0x1802c8=_0x3237d7;VisuMZ[_0x1802c8(0xa4)]['Scene_Battle_update']['call'](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x782)]=function(){const _0x150f89=_0x3237d7,_0x247c1c=this[_0x150f89(0x9e)]();this[_0x150f89(0x489)]=new Window_AutoBattleCancel(_0x247c1c),this[_0x150f89(0x489)][_0x150f89(0x181)](),this[_0x150f89(0x70d)](this[_0x150f89(0x489)]);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x9e)]=function(){const _0xa3bc00=_0x3237d7;return VisuMZ[_0xa3bc00(0xa4)][_0xa3bc00(0x98d)][_0xa3bc00(0x811)][_0xa3bc00(0x145)]['call'](this);},Scene_Battle[_0x3237d7(0x735)]['clearOnceParallelInterpreters']=function(){const _0x451308=_0x3237d7;this[_0x451308(0x2d2)]=[];},Scene_Battle[_0x3237d7(0x735)]['updateOnceParallelInterpreters']=function(){const _0x44412e=_0x3237d7;if(!this[_0x44412e(0x2d2)])return;for(const _0x35310a of this[_0x44412e(0x2d2)]){if(_0x44412e(0x2b8)!==_0x44412e(0x2b8))return _0x31f02e[_0x44412e(0x735)][_0x44412e(0x57f)]();else _0x35310a&&('UQvOK'!=='gRmMl'?_0x35310a[_0x44412e(0x4dc)]():(this['processBattleCoreJS'](_0x44412e(0x65c)),_0x1c1961[_0x44412e(0x314)][_0x44412e(0x7f6)](),_0x2b9fc6[_0x44412e(0xa4)][_0x44412e(0x95)][_0x44412e(0x4db)](this),this['processPostBattleCommonEvents'](_0x44412e(0x8f0))));}},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x498)]=function(_0x445dea){const _0x26b6fb=_0x3237d7,_0x74f4cc=$dataCommonEvents[_0x445dea];if(!_0x74f4cc)return;const _0x314749=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x314749),_0x314749[_0x26b6fb(0x38e)](_0x445dea);},Scene_Battle['prototype'][_0x3237d7(0xb11)]=function(_0x3448fa){const _0xd38df2=_0x3237d7;this[_0xd38df2(0x2d2)]=this['_onceParallelInterpreters']||[],this[_0xd38df2(0x2d2)]['push'](_0x3448fa);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xac9)]=function(_0x5e78b8){const _0x2a5b8a=_0x3237d7;this[_0x2a5b8a(0x2d2)]=this[_0x2a5b8a(0x2d2)]||[],this[_0x2a5b8a(0x2d2)][_0x2a5b8a(0x28b)](_0x5e78b8);},Game_Troop[_0x3237d7(0x735)]['onBattleStartOnceParallels']=function(){const _0x78e126=_0x3237d7;for(const _0x299d3c of this['troop']()[_0x78e126(0x1fa)]){if(_0x78e126(0x834)!==_0x78e126(0x834))_0x50e28a[_0x78e126(0xa4)][_0x78e126(0x8f4)][_0x78e126(0x4db)](this,_0x2f8c12),this[_0x78e126(0x4a1)]();else{if(!this['doesPageHaveOnceParallelStart'](_0x299d3c))continue;SceneManager[_0x78e126(0x2a7)][_0x78e126(0x90c)](_0x299d3c);}}},Game_Troop[_0x3237d7(0x735)]['doesPageHaveOnceParallelStart']=function(_0xfbaa35){const _0x1c8430=_0x3237d7;if(!_0xfbaa35)return;for(const _0x1dfce7 of _0xfbaa35[_0x1c8430(0x5fc)]){if([0x6c,0x198][_0x1c8430(0x231)](_0x1dfce7[_0x1c8430(0xb3c)])){if(_0x1c8430(0x286)!=='cZadU'){if(!_0x15eb8e['isSceneBattle']())return null;if(!_0x43eb48[_0x1c8430(0x2a7)][_0x1c8430(0x314)])return null;return _0x37639b['_scene']['_spriteset'][_0x1c8430(0x463)](this);}else{const _0x327559=_0x1dfce7[_0x1c8430(0x149)][0x0];if(_0x327559[_0x1c8430(0x453)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x90c)]=function(_0x48d1c2){const _0x4adaa2=_0x3237d7;if(!_0x48d1c2)return;const _0x2b9d5a=new Game_BattleOnceParallelInterpreter();this[_0x4adaa2(0xb11)](_0x2b9d5a),_0x2b9d5a[_0x4adaa2(0x5a7)](_0x48d1c2);};function _0x1574(){const _0x5eb522=['Game_Action_itemEffectAddNormalState','textAlign','currentSymbol','FQPSF','mZGnP','DistanceY','battleJump','isTpbCharged','displayType','_backAttachmentSprite','Game_Battler_performEvasion','makeHpDamageText','AHzMw','createDamageSprite','selectPreviousCommand','AnimationID','Sprite_SvEnemy','isAlwaysHidden','weatherType','isForFriendBattleCore','isActiveTpb','ElementStatusCore','move','PrswC','sfLeF','isAnyProjectilePresent','AddOption','StepDistanceY','isClicked','ActSeq_Impact_ZoomBlurPoint','waitForJump','rhzAj','FyrgW','onGrowEnd','ARRAYEVAL','applyForcedGameTroopSettingsBattleCore','FaceAway','createActionSequenceProjectile','WaitForMovement','%1StartBattleJS','slices','gENng','performMagicEvasion','nXemw','trueRandomTarget','ActSeq_Mechanics_BreakShieldChange','_angleEasing','addOnceParallelInterpreter','drawItemImageListStyle','zvawW','registerDefeatedEnemy','onEnemyCancel','Scene_Battle_onActorCancel','drawEnemyName','startTurn','bXxYv','battlerShadowScaleY','WlOOO','fGfkj','addChildToUiContainer','_frame','IconSet','jumpBattler','changeBattlebacks','drawIcon','parent','nbbAV','Scene_Battle_startActorCommandSelection','lmQYA','actorCommandSingleSkill','_flashDuration','textSizeEx','getBattlePortraitOffsetY','Sprite_Enemy_update','autoSelect','setupBattleCoreData','xDwuH','LjBbl','TimeScale','LCrKv','_enemy','_effectDuration','isNonSubmenuCancel','displayBuffs','ghQyz','freezeFrame','performActionEndMembers','fCwqM','rOMzf','xxHxc','code','iconIndex','bTdpc','animationWait','ScaleX','PopupPosition','DbStH','ActSeq_Horror_Clear','forceEscapeSprite','SwitchCritical','PostStartActionJS','arPenRate','JS\x20%1START\x20TURN','damage','helpAreaBottom','VisuMZ_4_CombatLog','createAttachmentSprites','UoeNs','RJYmT','createCommandNameWindow','dataId','UDVri','updatePointAnimations','isInputting','updateJump','FlinchDistanceX','ActSeq_Motion_RefreshMotion','EhsTm','Wfjec','XvGDf','Game_BattlerBase_eraseState','1:1','_subject','XPSpriteYLocation','actor%1-portrait','PreApplyJS','requestAnimation','effects','_back1Sprite','command283','_lineHeight','Sprite_Battler_initMembers','_stypeIDs','addedStateObjects','ActSeq_BattleLog_PushBaseLine','ActSeq_Movement_FaceTarget','ActSeq_Target_RandTarget','HelpEscape','Window_PartyCommand_initialize','forceWeaponAnimation','_updateCursorFilterArea','Window_BattleEnemy_show','BattleManager_onEscapeSuccess','refreshCursor','Window_Options_statusText','custom','DigitGroupingDamageSprites','_actionInputIndex','isOpen','battleGrow','Wave','autoBattleWindowRect','focus','PortraitScaleBorderStyle','_motionSpeed','_cache','linkSprite','BattleCore','IOVZp','usePremadeActionSequence','JcMXy','isOptionsCommandEnabled','updateOpacity','DQqRb','MZFOT','Sprite_Battler_update','applyGuard','cWlyl','OffsetAdjust','adjustPosition_ScaleDown','_forcedBattleLayout','oVPkl','_svBattlerData','isAnimationPlaying','canEscape','victory','SmoothImage','_totalValue','ARRAYJSON','addGuardCommand','initialize','UNTITLED','addSkillCommands','missle','_stateSprite','ResetOffset','Game_Battler_startTpbTurn','isAnyoneGrowing','actionSplicePoint','dimColor2','PreApply%1JS','Linear','updateHelp','UgZPf','battleCommands','ActSeq_Animation_AttackAnimation','Parse_Notetags_TraitObjects','fZqHq','adjustFlippedBattlefield','BnQfk','loadSystem','BxzGw','selectNextActor','createDistortionSprite','JS\x20%1REGENERATE','Game_Enemy_transform','glitch','magicSkills','GycLR','Window_ItemList_maxCols','speed','LoBwV','fnordRemovedStates','CalcActionSpeedJS','dead\x20battlers','mainSpriteScaleY','GMPXp','ijPqo','BattleDefeatJS','Scene_Battle_initialize','Game_BattlerBase_canAttack','registerCommand','Spriteset_Battle_updateActors','damageFlat','_damagePopupArray','QZkmI','ActSeq_Weapon_ClearActiveWeapon','setAttack','ShowPortraits','_lastAction','autoBattleStyle','Window_Options_addGeneralOptions','LrDub','ActionEndUpdate','DamageFlat','GUARD','repositionCancelButtonBorderStyle','applyEasing','Window_BattleLog_performDamage','IgxYi','critical','checkSceneBattleTransitionable','mmp','_displayBattleCoreTransitionErrorMsg','GdzTU','updateHpGaugePosition','_growWholeDuration','calcWindowHeight','onSelectAction','guardSkillId','isAlive','aDiHE','AhODa','GihUq','WaitForAngle','_growX','updateBattlebackBitmap1','loadPicture','kyTtj','gaugeX','BattleLog','createChildSprite','allowRandomSpeed','_angleWholeDuration','BattleManager_initMembers','exit','BHnUO','+%1','customDamageFormula','bind','GYxQh','placeTimeGauge','format','_cursorSprite','jjfKe','xiQwy','MP_Flat','escape','ucUSU','isForAll','setFullActionsPTB','onBattleEnd','hweMz','coreEngineRepositionEnemies','DigitGrouping','VarianceFormulaJS','ovLli','getSkillIdWithName','BattleManager_startInput','isBreakStunned','setupShockwaveImpactFilter','isTickBased','initBattleCore','ActSeq_Skew_WaitForSkew','_tpbNeedsPartyCommand','WQtIJ','floatBattler','NzHMv','ActSeq_Set_FinishAction','dYJaM','smooth','bitmapHeight','removeStatesAuto','adjustPosition_1for1','_actorWindow','pointY','currentAction','ActSeq_Projectile_Picture','MIN_SAFE_INTEGER','ActionStart','performFlinch','ReflectPlayback','MotionIdle','FEEsB','Intensity','BIWHu','reverse','FMgqs','AutoBattleRect','_preemptive','_phase','UvCFp','parameters','updateGrow','displayAddedStates','_partyCommandWindow','displayCurrentState','snapForBackground','autoBattleStart','Game_Temp_requestAnimation','updateVisibility','clearMotion','tYCkX','movement','ActSeq_BattleLog_UI','isBattlerGrounded','_battlerContainer','forceMotion','_forcedBattlers','isOptionsCommandAdded','initMembersBattleCore','_actionBattlers','StatusWindowAttachmentBackOffsetX','formula','resetBreakShield','_branch','StatusWindowAttachmentFrontOffsetX','zXEsf','_angleRevertOnFinish','DamageDisplay','toLowerCase','displayActionResults','DEF','changeBattlerOpacity','concat','ActSeq_Animation_ActionAnimation','BattleStartEvent','updateStaticSvBattlerFrames','BindCommonEventKeysForObj','PreRegenerateJS','isDuringNonLoopingMotion','performEvasion','RfmFc','process_VisuMZ_BattleCore_BaseTroops','VisuMZ_3_BoostAction','applyItem','Game_Battler_onTurnEnd','parse','alterBreakShield','ActSeq_Element_ForceElements','StatusWindowAttachmentBackOffsetY','MotionFrameWait','addTextToCombatLog','iconWidth','stateRate','createKeyJS','adjustPosition_ScaleToFit','pop','hide','gzXmW','_duration','bNzsw','updateSkew','CLFoI','skills','WaitForScale','commandEscape','skewDuration','setBattlerFacePoint','isMagicSkill','SkewY','DNyUb','addAutoBattleCommands','BattleManager_startBattle','addPartyCommand','icon','isMoving','trim','portrait','Game_Action_isForFriend','724686mCfpNt','applyTargetFilters','members','JumpToLabel','_battlerHue','ASbDa','updateForceAction','rKsTI','PrioritySortActors','_commonEventKey','Window_BattleLog_performSubstitute','randomInt','createEnemies','isDamagePopupRequested','lineRect','Sprite_Actor_setBattler','yAEdo','ejHHm','ActSeq_Movement_WaitForSkew','addEscapeCommand','gajif','canMove','addSkillTypeCommand','FlashDuration','ActSeq_Mechanics_AddBuffDebuff','_shadowSprite','oBTJo','performCounter','XPActorDefaultHeight','XcIaF','265AqfnPM','endAnimation','refreshDimmerBitmap','BattleManager_startAction','ShowCurrentState','canAttack','gwfrp','updateFrame','onBattleStartOnceParallels','ActSeq_Horror_NoiseCreate','SwitchMissEvade','Game_Battler_clearDamagePopup','removeDamageSprite','makeAutoBattleActions','eXRFE','updatePositionBattleCore','Game_Interpreter_command301','dcXQa','applyGlobalCommonEventNotetags','DistanceAdjust','occasion','xnXCS','xfYVL','DefaultHardCap','_logWindow','OyzZn','ActSeq_Zoom_Reset','isFrameVisible','ParseActorNotetags','gjuvm','alive\x20friends\x20not\x20target','numTargets','battler','gKsFW','IJRDK','Item-%1-%2','Scene_Map_initializeAfter','createEnemyNameContainer','DefaultSoftCap','battleback1Name','onActorOk','windowPadding','KmVxN','map','contentsOpacity','jump','_skewWholeDuration','_actor','Duration','ActSeq_Horror_GlitchCreate','gainHalfActionsPTB','die','onEscapeFailure','expTotal','zsaai','getMenuImage','drawText','mainSpriteWidth','setSTBExploited','flashDuration','Window_BattleLog_performCollapse','faceRect','MpGaugeOffsetY','nameY','Scene_Battle_selectNextCommand','HXmcY','BattleManager_selectNextCommand','BattleManager_updatePhase','extraHeight','pages','FsObA','Game_Troop_expTotal','skillItemWindowRectMiddle','removeState','drawSkillCost','all\x20targets','ActSeq_Impact_ShockwaveCenterTargets','Scene_Party','isAutoBattle','processBorderActor','_targetSkewY','JS\x20%1END\x20ACTION','_additionalSprites','addAnimationSpriteToContainer','refreshActorPortrait','_flashColor','iconHeight','Sprite_Battleback_adjustPosition','createHpGaugeSprite','setWaitMode','CnMHI','XMQXx','HvZMU','regenerateAll','rVCIx','StartTurnMsg','regenerateAllBattleCore','_stateIconSprite','_freezeMotionData','isBattleRefreshRequested','_lastPluginCommandInterpreter','createAnimationSprite','CXHsX','mainSpriteHeight','EqYrp','createBattleFieldContainer','Actor-%1-%2','createAnimationContainer','isForFriend','round','autoBattle','createPartyCommandWindowBattleCore','jZAGA','WaitForCamera','command236','isForOne','udLLd','chant','isSTB','createMainSprite','setActiveWeaponSet','battleMove','idXOI','HsxLN','includes','displayCritical','BhooR','LastSelected','BattleManager_checkSubstitute','setSvBattlerSprite','PreDamageJS','_commonEventQueue','Scene_Battle_createAllWindows','eHTju','isSkipPartyCommandWindow','createDigits','canAddSkillCommand','hitFlat','Sprite_Battler_isMoving','Sprite_Actor_update','Filename','Reveal','BattleLayout','HpGaugeOffsetX','isAnimationShownOnBattlePortrait','_reflectionTarget','requestPointAnimation','applyCritical','abs','setupMotionBlurImpactFilter','USZTv','IMfLd','ScaleDown','setBattlePortrait','addBattleCoreAutoBattleStyleCommand','Game_Battler_onBattleEnd','damageOffsetY','OffsetX','PostStartTurnJS','ShowSubstitute','VisuMZ_3_ActSeqCamera','IjeJH','gXrrg','commandStyleCheck','hkMuC','Game_Actor_equips','EyeBN','xwcEq','ext','inHomePosition','setBattleSkew','hpDamage','EnableSoftCap','xrrkC','_weaponImageId','angle','NameLegacy','mpDamage','canAlterActionCostPTB','replace','StateIconOffsetY','ActionAnimation','performMiss','opponentsUnit','makeActionList','YgypA','eGfOh','XbfTM','uDCPk','hasStaticSvBattler','ParseArmorNotetags','commandNameWindowDrawBackground','swing','AutoMeleeAoE','kNNFj','PRE-','Game_Action_setAttack','forceSelect','isTriggered','freezeMotion','TextAlign','isSideButtonLayout','optDisplayTp','pow','alive\x20friends','drawGauge','isPartyTpbInputtable','ActSeq_Target_NextTarget','extraPositionX','cZadU','Window_BattleStatus_drawItemImage','_createDamageContainer','context','AddHpGaugeOption','remove','refreshStatusWindow','_effectType','IKeYn','_currentAngle','MotionSpeed','ActSeq_Angle_Reset','alive\x20actors\x20not\x20user','WtypeId','isJumping','ORUxG','displayEvasion','adjustPosition','resetResultSwitches','Game_Action_isForOpponent','createContents','ArRedFlat','ShnDL','process_VisuMZ_BattleCore_PreBattleCommonEvent','cZxIr','ActSeq_Mechanics_PtbFullHalfAction','setupRgbSplitImpactFilter','alive\x20enemies','isChanting','autoSelectPriority','ParseSkillNotetags','type','waitForEffect','_scene','_lines','ActSeq_Mechanics_PtbConvert','tByWX','rLFDX','cancelTargetSelectionVisibility','nKMOq','GKCXN','_canLose','VisuMZ_3_ActSeqProjectiles','NameAlwaysSelectOnly','actorCommandEscape','isTeamBased','CopyCombatLog','hpRWO','cFZAF','btAAi','OxLOE','drawItemStatusXPStyle','getItemDamageAmountLabelOriginal','evaded','onSkewEnd','eajjY','_tpbSceneChangeCacheActor','JFAjM','Window_BattleLog_displayFailure','partyCommandWindowRect','createTroopNote','VisuMZ_2_BattleSystemATB','addBuff','SvBattlerMass-%1-%2','LfDKY','removedStateObjects','DOjrw','blqQB','Scene_Battle_windowAreaHeight','NIUfk','alterPriority','commandStyle','ShowAddedBuff','split','vetAo','Game_Map_setupBattleback','_onceParallelInterpreters','TpbGaugeOffsetX','setHome','setupWeaponAnimation','traitObjects','ysDwD','battleCoreResumeLaunchBattle','clear','textColor','stop','equips','alive\x20opponents\x20not\x20target','LcqYS','Debuffs','max','Game_Battler_performActionStart','ActSeq_Mechanics_WaitForEffect','WaitForEffect','process_VisuMZ_BattleCore_CommonEventKeys','Sprite_Actor_moveToStartPosition','ActSeq_Horror_GlitchRemove','_animation','_opacityEasing','hpDamageFmt','waitForOpacity','createHelpWindow','skillItemWindowRectBorderStyle','BackColor','Scene_Battle_helpWindowRect','StepDuration','Strength','sSOCA','_jumpWholeDuration','changeCtbCastTime','udkHn','Sprite_Enemy_setHue','setBattleCameraOffset','forceAction','isMagical','setBattlerMotionTrailData','_animationContainer','_skillIDs','noise','kCrRa','_helpWindow','dimColor1','refreshBattlerMotions','HelpSkillType','isQueueOptionsMenu','loadSvEnemy','IWtZv','createCommandVisibleJS','ActSeq_Motion_ClearFreezeFrame','updateStateSprite','logWindowRect','CoreEngine','createStateIconSprite','motionSpeed','PhQvh','gradientFillRect','Targets','Sprite_Actor_initMembers','Game_Action_needsSelection','eOvpj','battleCoreTpbMainPhase','orime','_spriteset','yaypp','4477290dnLJYw','_tempEquipCheck','Targets2','loadWindowskin','#ffffff','GfwHV','MDF','message4','pfosM','Vdswt','expRate','_baseTexture','RmSDU','ActSeq_Movement_WaitForScale','process_VisuMZ_BattleCore_TraitObject_Notetags','front\x20base','setActorHome','_attackAnimationId','pwLFV','_skillWindow','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','moveToStartPosition','vPzSV','PostDamageAsUserJS','ActSeq_DB_DragonbonesTimeScale','VariableDmg','battleUIOffsetX','DKKfL','AutoBattleOK','performAttackSlot','loop','value','hZlDY','ActSeq_Movement_HomeMoveToPoint','LFsYH','_dimmerSprite','walk','isBattleFlipped','updateRefresh','Point','YqPKl','fGWeL','SPctC','moveBattlerHomeDistance','_distortionSprite','_action','createBattleField','battleEffect','Spriteset_Battle_createLowerLayer','displayAffectedStatus','mpHealingFmt','#%1','_hpGaugeSprite','attack','performMoveToTargets','left','SlotID','displayFailure','DualWield','ActSeq_Mechanics_TextPopup','XPActorCommandLines','spriteId','_homeWholeDuration','maxCols','dead\x20opponents','svBattlerAnchorX','addImmortal','BaseTroopIDs','_targetGrowX','updateCustomActionSequence','mrZhK','VUjlV','tJZMO','getChildIndex','_isBattlerFlipped','Victory','HufjH','isOkEnabled','_statusWindow','CgQPi','Window_BattleLog_pushBaseLine','AutoMeleeSolo','getNextDamagePopup','waitCount','checkSubstitute','helpWindowRect','mJKxh','_ptbActionCost','WaitForZoom','unchanged','qNqKJ','_borderPortraitDuration','anchorX','showNormalAnimation','sZKgo','ActSeq_Mechanics_DeathBreak','MsYZl','stbGainInstant','casting','terminate','worldTransform','isCharging','Game_Map_battleback1Name','ActSeq_Mechanics_CtbOrder','ConvertActionSequenceTarget','repeatTargets','BattleEndEvent','NameOffsetY','ngUeh','updateStateIconSprite','svAnchorY','sideview_ui','padding','shadow','ShowFacesListStyle','createBattleUIOffsetX','Scene_Battle_terminate','lMqUT','cameraClamp','VisuMZ_0_CoreEngine','setCommonEvent','Scene_Battle_startEnemySelection','jkaHj','value1','updateStyleOpacity','WaitForAnimation','callOptions','isDisplayEmergedEnemies','processDefeat','PostApplyAsUserJS','wsmTw','_index','kcLiz','command339','HmkFd','equipSlots','Game_Action_executeDamage','resize','SceneManager_isSceneChanging','XTEUZ','Game_Map_battleback2Name','updateBossCollapse','evade','addChildAt','updateEffectContainers','VVByq','vkyYe','uJQii','bBkzD','applyGlobal','BindCommonEventKeysForGroup','Window_BattleLog_displayCritical','_battleCoreBattleStartEvent','getBattlePortrait','softDamageCap','setupIconTextPopup','updateFlip','Yggbi','displayMpDamage','Sprite_Battler_updatePosition','emerge','_back2Sprite','bWPvF','JnYaB','JtlGK','ActSeq_Motion_WaitMotionFrame','Window_BattleLog_displayMpDamage','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','_opacityDuration','AllowRandomSpeed','HpGauge','onFloatEnd','canGuardBattleCore','substitute','NGTDr','getItemDamageAmountLabelBattleCore','ActSeq_Movement_MoveToPoint','_deathStateApplied','turnOrderChangeOTB','isBattleSys','_commandNameWindow','neAUV','commandAutoBattle','_linkedSprite','_escapeRatio','ActSeq_Mechanics_BoostPointsChange','CgdHS','_wtypeIDs','needsSelectionBattleCore','ConvertParams','isActing','startActorSelection','moveToStartPositionBattleCore','surprise','MAXMP','Window_BattleLog_performAction','isMeleeSingleTargetAction','Scene_Battle_updateBattleProcess','setupBattleCore','CommandAddOptions','AlZig','ULQDT','Window_BattleLog_performRecovery','MOTIONS','applyData','JfGrH','lxYkq','battleSpin','isSkill','MAT','performAttack','setActionState','updateAttachedSprites','ActSeq_Set_WholeActionSet','revertTpbCachedActor','weaponImageId','createEffectActionSet','prepareBorderActor','setFrame','ApplyImmortal','BgQXN','_homeY','PreStartTurnJS','JSON','ParseWeaponNotetags','clearWeaponAnimation','+%1\x20MP','_battleCoreBattleResumeAfter','zXOnb','sortDamageSprites','targetObjects','VisuMZ_2_BattleSystemETB','makeTargets','ActSeq_Movement_HomeReset','_jumpMaxHeight','rIEts','setHue','_updateClientArea','ceil','VisuMZ_2_HorrorEffects','destroyDamageSprite','VJGIO','_targetHomeX','_angleDuration','isCertainHit','isAnyoneSpinning','_waitMode','isForRandomBattleCore','invokeAction','allowCollapse','JS\x20ESCAPE\x20FAILURE','XmeDy','skewBattler','adjustPosition_ScaleUp','MmcrJ','center','destroy','battleCameraData','Opacity','Buffs','clearBattleCoreData','playCancel','BXzvc','ActionCenteredName','battleUIOffsetY','battleStatusWindowAnimationContainer','Game_Action_numRepeats','removeHorrorEffect','XArgR','ShowMissEvasion','battleOpacity','ActSeq_Movement_FaceDirection','MrrFu','_floatWholeDuration','commandOptions','\x20to\x20%1\x20midbattle.','_battlePortrait','_defeatedEnemies','applyVariance','WaitForFloat','_shake','updateInterpreter','StatusWindowSkinHide','VisuMZ_2_PartySystem','drawItemImage','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','vjWHl','BravePoints','FsDeW','dqWyG','CmdIconEscape','battleDisplayText','svBattlerData','addText','alive\x20battlers\x20not\x20target','ForceRandom','aCIka','windowskin','setupBattlebackBattleCore','DamageRate','Sprite_Weapon_loadBitmap','VariableHeal','name','delay','addCustomCommands','BpglV','_enemyNameContainer','dkXJv','BunjA','ukanN','svBattlerShadowVisible','reslr','Game_Party_removeActor','%1EndTurnJS','EnableDamageCap','createActorCommandWindowBattleCore','getFullActionsPTB','match','Scene_Battle_itemWindowRect','addSingleSkillCommand','ActSeq_Movement_BattleStep','battleLayoutStyle','_flipScaleX','isCommandEnabled','getSkillTypes','redraw','ARRAYSTRUCT','showAnimation','WLwUJ','ChargeRate','gainBravePoints','base','ActSeq_Movement_Opacity','findTargetSprite','getAttackMotionSlot','itemTextAlign','repositionEnemiesByResolution','maxLines','setupActionSet','magicReflection','maxBattleMembers','addSingleSkillCommands','gainMp','ActionSkillMsg2','lineHeight','Eaaso','hhIiP','Window_BattleLog_popupDamage','HelpItem','AlphaFilter','applyHardDamageCap','_targetIndex','Scene_Map_launchBattle','PreEndBattleJS','ActSeq_BattleLog_PopBaseLine','WaitCount','isCustomActionSequence','gainCurrentActionsETB','setImmortal','ActSeq_Impact_MotionBlurScreen','EscapeFailureJS','itemHeight','ShuffleArray','qQSsq','toString','setupZoomBlurImpactFilter','statusWindowRectDefaultStyle','loadBattleback2','isImmortal','updateActors','text','_autoBattleWindow','partyCommandWindowRectDefaultStyle','setHorrorEffectSettings','popBaseLine','Actions','isStatusAffected','PgrNj','ActSeq_Camera_FocusTarget','Doogc','ABOPp','Scene_Battle_commandFight','scFJs','Window_BattleLog_performEvasion','Class-%1-%2','PostApplyAsTargetJS','playOnceParallelInterpreter','rUWiw','kAMJf','effect','isCancelled','Scene_Battle_skillWindowRect','position','addAttackCommand','NameAlwaysVisible','callNextMethod','SvWeaponMass-%1-%2','isDead','iIvjz','GzNJa','_shadowScaleY','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','JS\x20%1END\x20TURN','mainFontSize','oQznr','createShadowSprite','WmdwY','Sprite_Battler_damageOffsetX','PostEndActionJS','Frame','collapseType','WaitForNewLine','ANTI_TINT_UI','kvwae','battleCommandIcon','WaitForJump','omrGi','EVAL','CriticalDmgRate','getStypeIdWithName','_floatHeight','_requestRefresh','getDamageStyle','Rate','Scene_Battle_createActorCommandWindow','SKILLS','isForRandom','krSYs','skillId','eHFZR','setActiveWeaponSlot','ActorCmd','Scene_Boot_onDatabaseLoaded','_dragonbonesSpriteContainer','JS\x20BATTLE\x20DEFEAT','selectNextCommand','RdDan','drawItemImageXPStyle','Game_Action_setGuard','Battleback','sHvHd','_motion','updateSpin','mLnLI','Sprite_Enemy_setBattler','turnCount','gGulk','setBattleCameraTargets','isAnyoneChangingOpacity','HmzPe','version','displayTpDamage','Actor','call','update','_pattern','_borderPortraitTargetX','fYjLZ','lfxpI','Sprite_Enemy_createStateIconSprite','damageRate','onBattleStart','EmergeText','OwJzz','_actorSprites','Armor-%1-%2','ARRAYFUNC','setBattler','_frontAttachmentSprite','_growEasing','TkGMY','WQSPd','_targetAngle','pattern','applyBattleCoreJS','clearRect','NewPopupBottom','autoMeleeMultiTargetActionSet','isAutoBattleCommandAdded','FullActions','checkAutoCustomActionSequenceNotetagEffect','AUiNL','ActSeq_Mechanics_StbExtraAction','physical','indexOf','battleFloat','Mudkr','splice','note','battleMembers','showHelpWindow','ActSeq_Camera_Offset','setCursorRect','WsXAa','gfDyP','drawTextTopAligned','oWZNW','MotionType','getColor','isAutoBattleCommandEnabled','TJIBh','tWdRT','JTVfE','Sprite_Animation_targetSpritePosition','Exploiter','CriticalColor','UuzEG','Game_Action_makeTargets','GuardFormulaJS','Game_Interpreter_updateWaitMode','isIncludedInEnemyWindow','ForceDeath','processRefresh','LIvPH','createInnerPortrait','targetActionSet','hitRate','preemptive','applyArmorModifiers','default','actionBattleCoreJS','Sprite_Battler_startMove','addDebuff','floor','ShowHide','maxItems','_updateFilterArea','onTurnEnd','Zttvy','_jumpDuration','setupBattleback','uiMenuStyle','Amp','_checkOn','ALL\x20SKILLS','ESCAPE','ArPenRate','damageOffsetX','_methods','Mute','znkfj','stepBack','Game_Action_applyGlobal','wXenQ','Window_BattleLog_clear','refreshMotion','FBFHC','textWidth','HpGaugeOffsetY','updateAttachmentSprites','_lastEnemy','isForOpponentBattleCore','createBorderStylePortraitSprite','reduce','dLFJQ','innerWidth','PWeRP','sleep','_iconIndex','DisplayAction','_itemWindow','changeCtbChargeTime','_windowLayer','addActor','cameraDuration','ConfigManager_applyData','playEnemyDamage','_offsetY','ActSeq_Horror_TVCreate','sliceMax','priority','Variable','TP_Rate','onMoveEnd','useItem','ActSeq_Mechanics_ArmorPenetration','abnormal','addCommand','IconStypeNorm','Sprite_Actor_updateShadow','okButtonText','_battleField','BattleManager_processVictory','_animationCount','ClearBattleLog','_enemyID','eRLXZ','isAnyoneMoving','_executedValue','isCTB','attackSkillId','svBattlerAnchorY','toUpperCase','oSGJm','sdUGk','Cpnmh','isSpinning','hbWVg','setup','_visualHpGauge_JustDied','LjFTo','Ogkwh','cxzKr','WxoGt','Sprite_Actor_updateFrame','JNmpx','endAction','rsJXQ','_homeEasing','FftcG','EPjhK','KRUgr','createEmptyBitmap','OffsetY','ParseStateNotetags','yZYUg','SaQgQ','isFlipped','_motionCount','onDisabledPartyCommandSelection','XPmtr','CheckSkillCommandShowSwitches','DWDzW','DTB','clearDamagePopup','HP_Rate','ActSeq_Impact_ShockwaveEachTargets','setBattleAngle','recoverAll','UjvRv','battleback2Name','Enemy-%1-%2','StyleOFF','buffRemove','Xzrkn','WOozr','createEnemyNames','ActSeq_Element_Clear','ActSeq_Movement_WaitForMovement','isHidden','TpbActiveChangeEnabled','gbxLk','startTpbTurn','%1StartTurnJS','_targetHomeY','visualHpGauge','Window_BattleLog_update','useDigitGrouping','isSideView','skillWindowRect','FaceDirection','_list','setValue','startAction','isOnCurrentMap','onJumpEnd','KBdhF','setTroopPage','isPreviousSceneBattleTransitionable','isBTB','updateFloat','oPMGm','WaitForSpin','displayAction','VariableID','iJwMJ','displayChangedStates','displayReflection','callOkHandler','sVTwB','sAhrw','sgvnQ','contents','_cacheTextWidth','blt','commandSymbol','ActSeq_Mechanics_SwapWeapon','WaitComplete','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','ParseClassNotetags','show','makeTargetSelectionMoreVisible','QBGQg','collapse','StatusWindowAttachmentBack','applyDamageCaps','ActSeq_Mechanics_Multipliers','MAXHP','ActSeq_Mechanics_HpMpTp','process_VisuMZ_BattleCore_Notetags','startFloat','VisuMZ_2_BattleSystemPTB','ActSeq_DB_DragonbonesMotionAni','isSceneBattle','_weaponSprite','requestDragonbonesAnimation','battleProjectiles','Game_Battler_makeSpeed','missed','origin','zqVgI','ActSeq_Mechanics_EtbAction','Game_BattlerBase_canGuard','Game_Enemy_setup','_surprise','performCollapse','performAction','bAYuK','gnTay','charged','alterActionCostPTB','ForceExploited','StyleName','BattleLogRectJS','wZhPm','TextColor','onBattleEndBattleCore','MEhPO','Angle','AsTarget','isRightInputMode','TDjrY','CreateActionSequenceTargets','oFmzC','TargetLocation','sWftf','targetDistortionSpritePosition','createAllWindows','setText','isActor','_actorCommandWindow','drawItemStatus','processActorCommandCancelTPB','updatePadding','SnfrQ','DamageStyles','ATTACK','Window_BattleStatus_initialize','CastPhysical','actor','ActSeq_Mechanics_PtbAlterCost','TKrZn','list','description','ActionCount','setupCriticalEffect','ApvxZ','CommandVisible','isDebuffAffected','weatherPower','setupMotion','vkqDi','CriticalDmgFlat','constructor','isPartyCommandWindowDisabled','fYccC','_lastRegenFrameCount','Scene_Options_maxCommands','length','States','AsUser','Targets1','BQkDm','skillTypes','isBorderStylePortraitShown','inBattle','isATB','WaitForSkew','MpGaugeOffsetX','iecXn','isAlwaysVisible','GJTOz','BattleManager_makeActionOrders','ActSeq_Element_NullElements','CalcEscapeRatioJS','Game_BattlerBase_addNewState','opacity','getDualWieldTimes','PEanR','updateShadowVisibility','targetSpritePosition','QMINU','evalDamageFormula','YEGQW','Damage','Sprite_Actor_setActorHome','createActors','JrMnC','_autoBattle','toUseBoostPoints','ActSeq_Camera_FocusPoint','Scene_Battle_createCancelButton','updatePosition','Window_BattleLog_refresh','isForOpponent','cancelActorInput','RqqTz','setHalfActionsPTB','result','drawItemStyleIcon','battleCamera','Skills','Radius','xFBdv','clearForcedGameTroopSettingsBattleCore','31064ivGzWV','playEnemyAttack','boxWidth','wCKNk','clearElementChanges','BattleManager_startTurn','ZDaIw','_baseX','RevertAngle','UlRza','PuhYm','EFFECT_COMMON_EVENT','ActSeq_Element_AddElements','Scale','EGMAU','Window_BattleLog_popBaseLine','makeData','finalizeScale','displayItemMessage','removeImmortal','allBattleMembers','ConfigManager_makeData','bitmap','performActionMotions','isFTB','CombatLogIcon','Sprite_Actor_createStateSprite','ActSeq_ChangeSkew','_weather','command357','_growY','PopupOffsetY','CriticalHitRate','EscapeSuccessJS','ActSeq_Mechanics_AddState','PlnZe','skew','displayCounter','PartyCmd','wFBet','PostEndTurnJS','partyCommandWindowRectBorderStyle','Formula','_offsetX','okTargetSelectionVisibility','JS\x20%1APPLY\x20%2','svAnchorX','_tpbState','_updateCursorArea','getCommonEventIdWithName','ScaleY','checkShowHideSwitchNotetags','_emptyBitmap','ActSeq_Mechanics_StbRemoveExcessActions','zZYpv','yILvr','HP_Flat','applyFreezeMotionFrames','KMQai','aVbZf','PreStartActionJS','Yqtjp','uztFw','Slot','COMBATLOG','setBattlerBattleCore','ActionItemMsg','ActSeq_Mechanics_BoostPointsStoreData','subject','Game_BattlerBase_isStateResist','Spriteset_Battle_createBattleField','_battleCoreForcedElements','_commonEventIDs','onDatabaseLoaded','isBattleCoreTargetScope','parseForcedGameTroopSettingsBattleCore','arPenFlat','Sprite_StateIcon_updateFrame','onHomeMoveEnd','extraPositionY','cFooZ','rBXDc','alterChange','155916eYKTKb','JS\x20%1END\x20BATTLE','OaicZ','isEscapeCommandEnabled','clearFreezeMotion','ActSeq_Movement_MoveToTarget','_borderPortraitSprite','requestMotionRefresh','gIkmS','Window_BattleLog_displayCurrentState','ShowFailure','isAnyoneFloating','nSEsY','clearResult','Defeat','performWeaponAnimation','VisuMZ_3_SideviewBattleUI','_damages','JS\x20%1DAMAGE\x20%2','_baseLineStack','removeActor','commandNameWindowDrawText','randomTargets','ActionEffect','PrioritySortActive','validTargets','makeSpeed','getConfigValue','NameAttachStateIcon','BattleManager_cancelActorInput','checkTpbInputOpen','visible','alive\x20actors','CurrentTurn','auto','prev\x20target','Scene_ItemBase_applyItem','setBattleZoom','process_VisuMZ_BattleCore_PluginParams','WaitForProjectile','_callSceneOptions','user','_multipliers','_flinched','MP_Rate','Window_SkillList_maxCols','gcXKx','OQLWa','ResetFocus','animationId','Index','-%1','isDying','nWghM','switchToWeaponType','Game_System_initialize','battlerShadowScaleX','growBattler','isBattleTest','maxTp','wait','encounterList','executeDamage','HitRate','HSqDc','BreakShields','Ausar','filters','processPostBattleCommonEvents','getDefeatedEnemies','softDamageCapRate','bbbKM','156213TdsKkB','startJump','drawItem','YAjRc','BeSOS','yUTGg','performJump','dead\x20actors','enemyId','createWeather','updateBattlebackBitmap2','deadMembers','Zpoiz','WWuXD','some','hbbMr','ActSeq_ChangeAngle','weaponTypes','battleCorePreBattleCommonEvent','createDamageContainer','updateWeather','xAhSD','CJEaL','undecided','fKgqb','Game_Battler_regenerateAll','XlWUN','ParseItemNotetags','SvMotionIdleSolo-%1-%2','performReflection','zNmOq','preparePartyRefresh','MFyYh','createActorCommandWindow','xVswq','unshift','QKCsX','performCastAnimation','Scene_Battle_stop','invokeMagicReflection','fontSize','vrjnT','Game_Action_isForRandom','HNLUy','yXkNr','isSkewing','Window_BattleEnemy_initialize','Game_Battler_clearMotion','charging','PreEndActionJS','mainSpriteScaleX','vxbLh','ActSeq_Impact_MotionBlurTarget','Game_Battler_performDamage','PzpaG','addChild','startSkew','StyleON','lukEffectRate','_inputting','getItemDamageAmountTextOriginal','LAArL','wptPj','DisablePartyCmd','putActiveBattlerOnTop','createStateSprite','ActSeq_Mechanics_RemoveState','Style','ActSeq_Animation_AttackAnimation2','performDamage','cqFMW','getHardDamageCap','ActSeq_Impact_MotionTrailRemove','Sprite_Enemy_updateStateSprite','GkDfX','isVisualHpGaugeDisplayed','_floatEasing','Scene_Battle_start','_createEffectsContainer','nGIzs','sort','xHIls','dqDES','FocusX','removeBuff','performSTBExploiter','iterateBattler','rwaLI','NameAlwaysHidden','UcRso','AsRMa','setupHpGaugeSprite','isUndecided','onEscapeSuccess','VyPfD','prototype','_tempBattler','Nrqqu','makeTargetsBattleCore','Window_BattleLog_displayActionResults','createHelpWindowBattleCore','ActSeq_BattleLog_WaitForNewLine','Sprite_Enemy_updateCollapse','addState','checkTpbInputClose','dUQnP','onOpacityEnd','isDeathStateAffected','createBattleUIOffsetY','%1EndBattleJS','sHSJC','isCustomBattleScope','JXdZy','boxHeight','UldsS','wdjbY','stateMotionIndex','getEnemyIdWithName','VisuMZ_2_BattleSystemCTB','ActSeq_Mechanics_OtbOrder','<CENTER>%1','Game_Action_itemHit','PopupShiftY','Name','updateHomeMove','CmdIconAutoBattle','Enemy','frameVisible','CmdStyle','PmGuO','EasingType','changePaintOpacity','maxCommands','HxPsK','TpbGaugeOffsetY','ActSeq_BattleLog_Clear','_enemySprites','battleSkew','VisuMZ_2_BattleSystemSTB','PpgpT','makeActionListAutoAttack','fight','updateStatusWindowPosition','isOpponent','height','CriticalHitFlat','%1Event','QoL','SNbhS','DamageType%1','NextTurn','Scene_Battle_startPartyCommandSelection','SceneManager_push','setupTextPopup','Scene_Battle_startActorSelection','drawSingleSkillCost','clearActiveWeaponSlot','actorCommandAutoBattle','ZbsLH','fMkYs','updateCommandNameWindow','canAttackBattleCore','head','canUse','CheckMapBattleEventValid','isTpb','UwCdr','guard','changeAtbCastTime','sLiUG','ShowRemovedState','compareEnemySprite','createAutoBattleWindow','addNewState','PjqXb','battleAnimation','clearActiveWeaponSet','%1Damage%2JS','reserveCommonEvent','MeleeDistance','FUNC','AttachStateOffsetY','command301','DNiuu','applyAngleChange','PDHsw','isPlaytest','gyDom','_forcedHomeX','createPartyCommandWindow','xkYyE','ActSeq_Animation_ShowAnimation','irXmp','CDSqU','ReflectAnimation','_targetOpacity','Game_Interpreter_PluginCommand','EyBlM','updateCancel','isWaiting','random','power','JWSQk','AUqnU','isBypassDamageCap','TpGaugeOffsetX','_jumpHeight','alignBattleCoreDamageSprite','dGkEr','applyResultSwitches','addAutoBattleCommand','_customDamageFormula','AutoBattleCancel','JzOBY','VisuMZ_2_DragonbonesUnion','gjxlS','apply','createCancelButton','XvKTZ','visibilityState','BattleManager_onEncounter','qRAYL','criticalHitRate','gUfpQ','_battleLayoutStyle','Sprite_Battler_setBattler','zoomDuration','statusText','CalcEscapeRaiseJS','displaySubstitute','criticalHitFlat','arRedRate','item','_growDuration','_damageContainer','CmdIconOptions','svShadow','finishActionSet','updateEffectsContainer','AGI','yDUEa','actorCommandWindowRect','ATvqo','qfplf','_actions','CmdTextAlign','jAYcG','Window_ActorCommand_initialize','_currentActor','STqkZ','CriticalDuration','isGuard','resizeWindowXPStyle','Qfdkx','applySoftDamageCap','ChantStyle','battlelog','swapEnemyIDs','counterAttack','checkShowHideBattleNotetags','DefeatEvent','Scene_Battle_updateStatusWindowPosition','Interrupt','isTpbMainPhase','displayReflectionPlayBack','getNextSubjectFromPool','_createCursorSprite','addGeneralOptions','getAttackMotion','isItemCommandEnabled','setLastPluginCommandInterpreter','OGpsC','commandNameWindowCenter','singleSkill','_homeX','clearFreezeMotionForWeapons','dead\x20friends','fPmIn','displayRemovedStates','drawItemImagePortraitStyle','popupDamage','Window_BattleLog_performActionStart','pointX','_interpreter','Scene_Battle_createPartyCommandWindow','itemEffectAddAttackState','Window_ActorCommand_setup','KqDvv','processEscape','lWNdL','COMBAT\x20LOG','ShowWeapon','checkShowHideSkillNotetags','addCombatLogCommand','start','vSLNa','Game_Map_encounterList','aliveMembers','updateShadow','TPzXF','battleSys','amaoN','setHandler','oonkN','TpGaugeOffsetY','ShowActorGauge','iirxw','clearOnceParallelInterpreters','_indent','Setting','finishActorInput','ActSeq_Motion_PerformAction','ActSeq_Camera_WaitForCamera','battlerSprites','process_VisuMZ_BattleCore_CreateRegExp','AutoBattle','drawBackgroundRect','RHfkC','setEventCallback','startPartyCommandSelection','isChangingOpacity','setupFont','fnordAddedStates','moveBattlerDistance','placeStateIcon','createUIContainer','updateCollapse','ActSeq_Mechanics_Immortal','EyeQa','XmFLy','_battler','isAppeared','oIwOs','NameFontSize','isStateResist','eHLDe','action','PreStartBattleJS','pushBaseLine','showPortraits','spinBattler','transform','SkillItemMiddleLayout','kuTxo','isAffectedByBreakShield','changeWeather','isAtbChargingState','MANUAL','_active','ActSeq_Set_SetupAction','ZHcoj','startMove','PostEndBattleJS','isBuffAffected','hasBeenDefeatedBefore','wtypeId','isTurnBased','message2','drawTextEx','onAllActionsEnd','_speed','setHelpWindowItem','WxcFW','_floatDuration','_handlers','ITEM','IUFhG','scale','battlerName','FsqLG','dYmVg','vbYsW','isAnyoneJumping','PostRegenerateJS','_shadowScaleX','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','updateShadowScale','ActSeq_Camera_Reset','isSceneChanging','gainStoredBoostPoints','gainHp','_targetGrowY','fQmuL','startInput','startMotion','push','1338744lyOcTA','vNSIU','requestMotion','itemWindowRect','itvdg','mainSprite','canBattlerMove','startWeaponAnimation','Direction','\x5cI[%1]%2','duration','_immortal','updateWaitMode','stepFlinch','canGuard','Sprite_Enemy_initVisibility','wMxGe','_opacityWholeDuration','Text','partyCommandWindowRectXPStyle','_battlerName','547736OwskDN','_createClientArea','getTraitSetKeys','kgCfO','isFastForward','BattleManager_inputtingAction','WeNoC','alive\x20enemies\x20not\x20user','process_VisuMZ_BattleCore_jsFunctions','battleZoom','updateBitmap','flashColor','CmdIconItem','Mirror','ZOkHk','Mechanics','_motionType','StepDistanceX','FocusY','AnchorX','GroupDigits','cWwDB','isSkillItemWindowsMiddle','actionEffect','QHRxV','PerformAction','NCDDg','prepareCustomActionSequence','friendsUnit','showEnemyAttackAnimation','isConfused','_enemies','_createCursorArea','BattleManager_isTpbMainPhase','_drawTextBody','FollowTurn','sortEnemies','onAngleEnd','updateLink','onEncounter','moveBattlerHomeToPoint','adjustWeaponSpriteOffset','turn','_cancelButton','LUK','PostStartBattleJS','_targetFloatHeight','atbInterrupt','AdjustRect','%1StartActionJS','removeChild','ActSeq_BattleLog_WaitForBattleLog','loadEnemy','processForcedAction','ParseAllNotetags','isEffecting','setGuard','PopupShiftX','onRegeneratePlayStateAnimation','hxjRg','makeBattleCommand','attachSpritesToDistortionSprite','battlerSmoothImage','uPQsK','startActorCommandSelection','windowAreaHeight','vQzcr','gPHaV','debuffAdd','skill','isPTB','applyImmortal','jjEjn','textBaseline','_regionBattleback1','endBattle','Game_Interpreter_command283','pbvCu','animation','makeEscapeRatio','CastAnimation','performActionStart','commandName','battleEnd','setMoveEasingType','PoQXj','startGrow','ShowTpDmg','_skewDuration','gdnWU','Scene_Battle_onEnemyOk','mQCyB','processRandomizedData','_uiContainer','YRyDQ','ActSeq_Mechanics_VariablePopup','tpbActorSwitchConditionsMet','resizeWindowBorderStyle','weapons','TrGLa','hlszc','startHomeMove','ActSeq_Mechanics_BtbGain','RegExp','clearHorrorEffects','Sprite_Enemy_updateBossCollapse','isBattleMember','ActSeq_Animation_ChangeBattlePortrait','setCustomDamageFormula','addedBuffs','ewSBA','drawActorFace','QoXPQ','ziYFf','SzvCY','AmtHF','makeCommandList','bxfVQ','makeActionOrders','loadBattleback1','BattleManager_processDefeat','active','addedDebuffs','Game_BattlerBase_refresh','Scene_Battle_partyCommandWindowRect','PopupOffsetX','3XJhcRZ','CastMagical','Game_Battler_onBattleStart','Height','gaugeLineHeight','EscapeSuccess','ShowCounter','isEnemy','attackMotions','Window_BattleLog_performCounter','ScaleToFit','PortraitScale','cancel','drain','TaNeS','SSZKp','VisuMZ_3_ActSeqImpact','addLoadListener','Game_Party_addActor','Skill-%1-%2','moveBattlerToPoint','blockWidth','itemRect','isHiddenSkill','JttSY','isAtbCastingState','svBattlerName','innerHeight','statusTextAutoBattleStyle','battleAngle','_skewX','_armorPenetration','setBackgroundType','playOnceParallelTroopPage','isGuardWaiting','requestFauxAnimation','itemHit','changeAtbChargeTime','isFightCommandEnabled','fxFYg','getInputButtonString','IconStypeMagic','Sprite_Battler_damageOffsetY','ActSeq_Mechanics_CustomDmgFormula','requestRefresh','JS\x20%1START\x20ACTION','Window_BattleLog_performReflection','rtTbY','ubSzN','enIvQ','setVisibleUI','join','processVictory','HelpAutoBattle','filter','arRedFlat','IzbJv','hlYQP','ParseEnemyNotetags','xViKT','kCegl','getNextSubject','launchBattle','setBattlerFlip','QOiPf','create','currentExt','JS\x20%1START\x20BATTLE','SkillsStatesCore','Vmcwy','startBattle','BmLUq','Window_BattleLog_performMiss','nbMRh','ShowRemovedBuff','veGJP','Spriteset_Battle_update','performActionEnd','waitForFloat','SKIQi','command301_PreBattleEvent','uiInputPosition','FlashColor','backColor','_target','StatusWindowAttachmentFront','callUpdateHelp','statusWindowRect','getAttackWeaponAnimationId','WaitCount1','sjEuo','ActSeq_Mechanics_Collapse','NQDYz','isLearnedSkill','AutoBattleBgType','ShowEnemyGauge','KCPam','drawItemBackground','OhaSR','checkCacheKey','battleSpriteSkew','raMdS','string','%1Apply%2JS','StartTurnWait','startDamagePopup','updateStateSpriteBattleCore','setHelpWindow','BattleManager_endAction','ActiveTpbOptionsMessage','opacityStart','wybsb','CastCertain','updateShadowBattleCore','ActSeq_BattleLog_Refresh','BattleVictoryJS','ActSeq_Mechanics_DamagePopup','missile','setupDamagePopup','waitForMovement','DefaultSoftScaler','setBattleCameraPoint','itemLineRect','IpfRP','ActSeq_Mechanics_StbExploit','getLastPluginCommandInterpreter','TyylF','KswgI','initMembers','zApDm','WEAPON\x20SWAP','performSubstitute','NameOffsetX','PopupDuration','StatusWindowSelectableBackHide','children','iKrzq','timeScale','battleCommandName','JS\x20BATTLE\x20VICTORY','resetFontSettings','LeWWq','dead','POST-','deathStateId','ELLkT','_forcing','isShownOnBattlePortrait','actorId','autoSelectLastSelected','CqTNA','regionId','_skewY','updateUiContainerPosition','EscapeFail','roocx','evalDamageFormulaBattleCore','_enemyWindow','Window_BattleLog_performActionEnd','ohsHC','ShowAddedDebuff','_appeared','Settings','makeSuccess','cameraOffsetDuration','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','inputting','LIevf','WaitForOpacity','_battleCoreNoElement','contains','updateMain','clearBattleRefreshRequest','motionIdle','actorCommandCancelTPB','ActSeq_Movement_MoveBy','removeAnimationFromContainer','GiWDA','SkewX','inputtingAction','top','getBattlePortraitFilename','currentValue','WRnBq','waitForNewLine','BattleManager_onEscapeFailure','autoBattleUseSkills','_targetSkewX','dndou','SideviewSelect','process_VisuMZ_BattleCore_Failsafes','WeaponTypeID','isETB','Sprite_Actor_updateBitmap','bgType','loadSvActor','SkillItemBorderCols','gainCurrentActionsFTB','updateBattleProcess','BbVtZ','damageStyle','canInput','processAnimationRequests','Game_BattlerBase_die','StatusWindowSkinFilename','initBattlePortrait','removeBuffsAuto','uAIkb','GKAgY','SsdLP','isMVAnimation','_mainSprite','_skewEasing','Sprite_AnimationMV_updatePosition','vBnDk','attackStates','VisuMZ_1_SkillsStatesCore','min','waitForAnimation','isMeleeMultiTargetAction','RVlpL','current\x20target','HKRox','hqSnp','Scene_Battle_onEnemyCancel','lNepS','UuFAp','performMoveToPoint','createString','CnByu','SIrxZ','hpAffected','dying','niPMo','performTpbActiveCheckSwitch','_colorType','SPXxh','Window_BattleLog_performMagicEvasion','basicGaugesY','PreApplyAsUserJS','Game_Troop_setup','bitmapWidth','onBattleStartBattleCore','PostDamageAsTargetJS','enemy','_regionBattleback2','_tempActor','xBNCh','frameCount','_enemyIDs','gainTp','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','AS\x20USER','numRepeats','placeActorName','processBattleCoreJS','Sprite_Battler_updateMain','createSeparateDamagePopups','_baseY','EqweO','nWJLN','selectNextCommandTpb','AnchorY','ActSeq_Target_PrevTarget','buffAdd','mqraS','hasSvBattler','Game_Actor_makeActionList','aoGMP','addBattleCoreAutoBattleStartupCommand','ActionSequence','isNextSceneBattleTransitionable','MmelK','nextActiveWeaponSlot','_homeDuration','STRUCT','Parse_Notetags_Action','clamp','ShowCosts','_cursorArea','faceWidth','SvWeaponSolo-%1-%2','createTargetsJS','isSpriteVisible','YyqeD','Window_BattleLog_displayTpDamage','ActionEnd','LCuyP','ActSeq_Weapon_SetActiveWeapon','ChangeOrderBy','isAttack','EufZA','fbOTJ','WpVeW','State-%1-%2','shift','asqpu','ActSeq_Movement_Jump','_text','chantStyle','JfsXb','clearBattlerMotionTrailData','aYMqh','rXMOb','ActSeq_Mechanics_EnemyEscape','ghhQG','bpTvn','changeInputWindow','SkipPartyCmd','initElementStatusCore','font','_preBattleCommonEvent','sliceMin','Shadow','PreApplyAsTargetJS','_padding','index','width','PreDamage%1JS','_activeWeaponSlot','iconText','damageContainer','Game_Action_itemEffectAddAttackState','ESCyX','isAnyoneSkewing','isDTB','STYPES','ARRAYNUM','alive\x20battlers','statusWindowRectXPStyle','isFriendly','retreat','CommonEventID','ActSeq_Impact_ColorBreak','startOpacity','ActSeq_Animation_CastAnimation','ShowReflect','StateIconOffsetX','-%1\x20MP','thrust','LvJIq','ActSeq_Movement_FacePoint','frontviewSpriteY','_item','isBusy','Game_Actor_setup','BTestBypass','drawItemStyleIconText','VisuMZ_1_ElementStatusCore','statusWindowRectBorderStyle','RYopg','_effectsContainer','iDyZT','JcLgC','FKzhG','CounterPlayback','updateAngleCalculations','OXZZD','FrontViewSelect','Scene_Battle_logWindowRect','zFrom','updateShadowPosition','itemEffectAddNormalState','loadBitmap','createBattleFieldBattleCore','Elements','SkillItemStandardCols','attackAnimationId1','AYZaP','addOptionsCommand','getWtypeIdWithName','qhTJm','autoMeleeSingleTargetActionSet','commandFight','anchorY','wiLoM','dxwue','TPB','HkCxB','updateBattlebackBitmap','open','Sprite_Battler_setHome','criticalDmgFlat','wholeActionSet','ShnTd','displayMiss','poRUm','FqQhe','Game_Battler_performMiss','OJVWg','WvxIJ','stvkl','isPhysical','isItem','ActSeq_Movement_WaitForOpacity','slice','fjjrn','isFloating','pLPSo','VIsai','<CUSTOM\x20ACTION\x20SEQUENCE>','cNsUo','iaFOQ','jGwjS','ActSeq_Impact_ShockwavePoint','process_VisuMZ_BattleCore_Action_Notetags','needsSelection','displayChangedBuffs','hardDamageCap','ShowHpDmg','isBattlerFlipped','startSpin','112uBEgsB','makeDeepCopy','scope','rowSpacing','activate','Pre','helpWindowRectBorderStyle','addDamageSprite','XnXND','OverallFormulaJS','updateBorderSprite','placeGauge','border','text\x20target','isOTB','alive\x20friends\x20not\x20user','command119','ForceExploiter','anchor','Game_Action_evalDamageFormula','VisuMZ_3_WeaknessDisplay','_animationSprites','ActSeq_Mechanics_ActionEffect','Game_Action_apply','noSimilarSTypes','HelpOptions','Window_BattleLog_displayMiss','filterArea','ActSeq_Mechanics_AtbGauge','ayutk','stepForward','refresh','PostApply%1JS','isSelected','zbhEw','nYSjt','addFightCommand','_battleCoreAddedElements','ScPgi','ATK','BattleManager_endBattle','jbjBl','VisuMZ_1_MainMenuCore','attackAnimationIdSlot','VisuMZ_2_WeaponSwapSystem','dRioI','gOQVA','bossCollapse','KAdkh','close','mQKWW','alive\x20enemies\x20not\x20target','grfZw','autoBattleAtStart','alterType','_allTargets','_endBattle','updateScale','ActSeq_Animation_PlayAtCoordinate','_forcedHomeY','startEnemySelection','AttackAnimation','options','extraPositionScaledY','createJS','wXGJM','removeOnceParallelInterpreter','eWmAw','canUseItemCommand','float','actions','_svBattlerSprite','not\x20focus','right','Parse_Notetags_Targets','updateMotionCount','eraseState','YCnkI','wUoVT','createAttachedSprites','DefaultDamageStyle','getBattlePortraitOffsetX','animationShouldMirror','ShowCritical','revealNewWeaknesses','Destination','hasSkill','CmdTextAutoBattle','Scene_Battle_onActorOk','onEncounterBattleCore','addChildToBack'];_0x1574=function(){return _0x5eb522;};return _0x1574();}function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter[_0x3237d7(0x735)]=Object[_0x3237d7(0x92c)](Game_Interpreter[_0x3237d7(0x735)]),Game_BattleOnceParallelInterpreter[_0x3237d7(0x735)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x3237d7(0x735)][_0x3237d7(0x38e)]=function(_0x331f52){const _0x45dfd8=_0x3237d7,_0x46c8d1=$dataCommonEvents[_0x331f52];if(_0x46c8d1){if(_0x45dfd8(0x1eb)!==_0x45dfd8(0x714))this[_0x45dfd8(0x56c)](_0x46c8d1['list'],0x0);else{let _0x80adc1=_0x14652b(_0x118126['$1']);while(_0x80adc1--){_0x1f668b[_0x45dfd8(0x857)](this[_0x45dfd8(0x26c)]()[_0x45dfd8(0xb0e)]());}return this['repeatTargets'](_0x2d7e30);}}else this[_0x45dfd8(0x379)]();},Game_BattleOnceParallelInterpreter[_0x3237d7(0x735)][_0x3237d7(0x379)]=function(){const _0x6fe728=_0x3237d7;if(!SceneManager['isSceneBattle']())return;SceneManager['_scene'][_0x6fe728(0xac9)](this),Game_Interpreter[_0x6fe728(0x735)][_0x6fe728(0x379)][_0x6fe728(0x4db)](this);},Game_BattleOnceParallelInterpreter[_0x3237d7(0x735)][_0x3237d7(0x5a7)]=function(_0x121438){const _0x3c63ae=_0x3237d7;_0x121438?this[_0x3c63ae(0x56c)](_0x121438[_0x3c63ae(0x5fc)],0x0):_0x3c63ae(0xabb)!=='AIEYf'?this[_0x3c63ae(0x379)]():_0x12f73e['shadow']=![];},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x608)]=function(){const _0x44304d=_0x3237d7;return VisuMZ['BattleCore'][_0x44304d(0x98d)][_0x44304d(0x661)][_0x44304d(0x715)];},VisuMZ['BattleCore'][_0x3237d7(0x76d)]=Scene_Battle['prototype'][_0x3237d7(0x815)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x815)]=function(){const _0x50aafd=_0x3237d7;if(this['isPartyCommandWindowDisabled']()){if(_0x50aafd(0x725)!=='xMdqd')this[_0x50aafd(0x581)]();else return _0x5814d3[_0x50aafd(0x2a7)][_0x50aafd(0x457)]()===_0x50aafd(0xa93)?_0xda4cad[_0x50aafd(0xa4)][_0x50aafd(0x98d)][_0x50aafd(0x243)][_0x50aafd(0x9af)]:_0x42f7b6[_0x50aafd(0xa4)]['Settings'][_0x50aafd(0x243)][_0x50aafd(0xa59)];}else{if(_0x50aafd(0x23a)===_0x50aafd(0x808)){let _0x560a5d=_0x327978['BattleCore'][_0x50aafd(0x4ad)][_0x50aafd(0x4db)](this),_0x4b129f=_0x4dba9f['BattleCore'][_0x50aafd(0x98d)][_0x50aafd(0x626)]['PopupOffsetX']||0x0;return _0x579fd7[_0x50aafd(0x222)](_0x560a5d+_0x4b129f);}else VisuMZ[_0x50aafd(0xa4)][_0x50aafd(0x76d)]['call'](this);}},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x581)]=function(){const _0x39b1ca=_0x3237d7;if(BattleManager[_0x39b1ca(0xa30)]()){if(_0x39b1ca(0xafa)===_0x39b1ca(0x328)){const _0x1d2641=this[_0x39b1ca(0xb5c)][_0x39b1ca(0x139)](),_0x54f984=this[_0x39b1ca(0xb5c)];_0x1d2641&&_0x1d2641[_0x39b1ca(0x67f)]()===_0x54f984&&_0x1d2641[_0x39b1ca(0x51e)](_0x39b1ca(0x677)),_0x2bff2b['BattleCore'][_0x39b1ca(0x1b8)][_0x39b1ca(0x4db)](this),_0x1d2641&&_0x1d2641[_0x39b1ca(0x67f)]()===_0x54f984&&_0x1d2641[_0x39b1ca(0x51e)](_0x39b1ca(0xb46));}else this['selectNextCommand']();}else BattleManager[_0x39b1ca(0x77b)]()&&VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection'][_0x39b1ca(0x4db)](this);},VisuMZ['BattleCore'][_0x3237d7(0x493)]=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xa60)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xa60)]=function(){const _0x4fdd0e=_0x3237d7;if(BattleManager[_0x4fdd0e(0x77b)]()){if('WTier'!=='WTier'){const _0x1fe8f6=_0x489c82[_0x4fdd0e(0x7be)]();this[_0x4fdd0e(0x468)](_0x4176b7,_0x1e9cb1,_0x412655),this[_0x4fdd0e(0x3ee)](_0x44700e,_0x2db019,_0x533e22),this[_0x4fdd0e(0x7c3)](_0x38978b,_0x297cb4,_0x528c13);}else this['tpbCommandFight'](),this[_0x4fdd0e(0x8ad)]();}else _0x4fdd0e(0x649)!=='EGMAU'?this[_0x4fdd0e(0x83c)](_0x385945,_0x4bf593['x']+_0xe789ba['width']-_0x2d48d6,_0x2469b8['y'],_0xde180d):VisuMZ[_0x4fdd0e(0xa4)]['Scene_Battle_commandFight'][_0x4fdd0e(0x4db)](this);},Scene_Battle[_0x3237d7(0x735)]['tpbCommandFight']=function(){const _0x11d8de=_0x3237d7;if(!VisuMZ[_0x11d8de(0xa4)]['TpbActiveChangeEnabled'])return;if(Imported[_0x11d8de(0x74c)]&&BattleManager[_0x11d8de(0x563)]())return;const _0x1aab98=$gameParty[_0x11d8de(0x7ff)]()[_0x11d8de(0x921)](_0x1552b0=>_0x1552b0[_0x11d8de(0xae9)]()&&_0x1552b0[_0x11d8de(0x9b4)]());BattleManager[_0x11d8de(0x7ce)]=_0x1aab98[0x0]||null,BattleManager['_currentActor']&&BattleManager[_0x11d8de(0x7ce)][_0x11d8de(0x3e9)](_0x11d8de(0x991));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x4be)]=Scene_Battle['prototype'][_0x3237d7(0x6f7)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x6f7)]=function(){const _0x1800a5=_0x3237d7;VisuMZ[_0x1800a5(0xa4)][_0x1800a5(0x4be)][_0x1800a5(0x4db)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x451)]=function(){const _0x2ca5db=_0x3237d7,_0x510971=this[_0x2ca5db(0x5f0)];_0x510971['setHandler'](_0x2ca5db(0x11c),this[_0x2ca5db(0x2b2)]['bind'](this)),_0x510971[_0x2ca5db(0x804)](_0x2ca5db(0x223),this[_0x2ca5db(0x773)]['bind'](this)),_0x510971['setHandler'](_0x2ca5db(0x7e7),this[_0x2ca5db(0xb27)][_0x2ca5db(0x114)](this)),BattleManager[_0x2ca5db(0x77b)]()&&(this[_0x2ca5db(0x608)]()?delete _0x510971[_0x2ca5db(0x842)][_0x2ca5db(0x8f7)]:'EsUtN'===_0x2ca5db(0x848)?(_0x4848ba[_0x2ca5db(0xa4)][_0x2ca5db(0x723)][_0x2ca5db(0x4db)](this),_0x18c79e[_0x2ca5db(0x1bd)]()):_0x510971['setHandler'](_0x2ca5db(0x8f7),this[_0x2ca5db(0x999)][_0x2ca5db(0x114)](this)));},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x2b2)]=function(){const _0x617091=_0x3237d7;this[_0x617091(0x189)]();},Scene_Battle['prototype'][_0x3237d7(0x773)]=function(){const _0x547b22=_0x3237d7;BattleManager[_0x547b22(0x5f9)]()[_0x547b22(0x1c2)](),BattleManager['finishActorInput'](),BattleManager['selectNextActor'](),this[_0x547b22(0xa1e)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xb27)]=function(){const _0x311041=_0x3237d7,_0x49eef2=BattleManager[_0x311041(0x99e)]();_0x49eef2['setSkill'](this[_0x311041(0x5f0)]['currentExt']()),this[_0x311041(0xff)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x999)]=function(){const _0x1d29f2=_0x3237d7;if(this[_0x1d29f2(0x8cd)]()){if(_0x1d29f2(0x35e)==='Yeyjm'){const _0x3ebace=this[_0x1d29f2(0x9be)][_0x1d29f2(0x651)];if(!_0x3ebace)return;const _0x19deca=_0x3ebace[_0x1d29f2(0xa28)];let _0x39a181=_0x3ebace[_0x1d29f2(0x766)];if(this['_battler'][_0x1d29f2(0x4a3)]()){if(this[_0x1d29f2(0xb1e)])_0x39a181=_0x590fbb[_0x1d29f2(0x2e0)](0x0,this[_0x1d29f2(0xb1e)][_0x1d29f2(0x766)]-0x4);}this['_mainSprite']['setFrame'](0x0,0x0,_0x19deca,_0x39a181),this[_0x1d29f2(0x3f0)](0x0,0x0,_0x19deca,_0x39a181);}else this[_0x1d29f2(0x9d5)]();}else this[_0x1d29f2(0x5f2)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x596)]=![],Scene_Battle['prototype'][_0x3237d7(0x8cd)]=function(){const _0x376cbe=_0x3237d7;if(Imported[_0x376cbe(0x74c)]&&BattleManager[_0x376cbe(0x563)]())return![];else{if(!VisuMZ[_0x376cbe(0xa4)][_0x376cbe(0x596)])return![];const _0x193639=$gameParty['aliveMembers']()[_0x376cbe(0x921)](_0x38bca3=>_0x38bca3['isTpbCharged']()&&_0x38bca3['canInput']());return _0x193639[_0x376cbe(0x60c)]>0x0&&BattleManager[_0x376cbe(0x5f9)]()!==_0x193639[_0x193639['length']-0x1];}},Scene_Battle['prototype']['performTpbActiveCheckSwitch']=function(){const _0x155f69=_0x3237d7,_0xe48081=BattleManager['actor'](),_0x156657=_0xe48081[_0x155f69(0x1d5)]();if(_0x156657)_0x156657['stepBack']();const _0xe5e5db=$gameParty[_0x155f69(0x7ff)]()[_0x155f69(0x921)](_0xa76070=>_0xa76070['isTpbCharged']()&&_0xa76070[_0x155f69(0x9b4)]()),_0x5adef2=_0xe5e5db[_0x155f69(0x4fa)](_0xe48081),_0x309401=_0xe5e5db[_0x5adef2+0x1];BattleManager['_currentActor']=_0x309401||null;if(_0x309401)_0x309401[_0x155f69(0x3e9)](_0x155f69(0x991));_0xe48081['setActionState'](_0x155f69(0x6ed)),this[_0x155f69(0xa1e)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x5f2)]=function(){const _0x54cefa=_0x3237d7;this[_0x54cefa(0x14c)][_0x54cefa(0x56c)](),this[_0x54cefa(0x5f0)][_0x54cefa(0xab8)]();if(!VisuMZ[_0x54cefa(0xa4)][_0x54cefa(0x596)])return;if(Imported[_0x54cefa(0x74c)]&&BattleManager[_0x54cefa(0x563)]())return;if(BattleManager[_0x54cefa(0x7ce)]){if(_0x54cefa(0x569)===_0x54cefa(0x569)){BattleManager[_0x54cefa(0x7ce)]['setActionState']('undecided');const _0x26796=BattleManager['_currentActor'][_0x54cefa(0x1d5)]();if(_0x26796)_0x26796[_0x54cefa(0x533)]();}else _0x2a86fb['BattleCore']['Window_BattleLog_pushBaseLine'][_0x54cefa(0x4db)](this),this[_0x54cefa(0x4a1)]();}BattleManager[_0x54cefa(0x7ce)]=null;},VisuMZ[_0x3237d7(0xa4)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x2eb)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x2eb)]=function(){const _0x3d1437=_0x3237d7;VisuMZ[_0x3d1437(0xa4)]['Scene_Battle_createHelpWindow']['call'](this),this[_0x3d1437(0x73a)]();},Scene_Battle[_0x3237d7(0x735)]['createHelpWindowBattleCore']=function(){const _0x14f832=_0x3237d7;this[_0x14f832(0x5f0)][_0x14f832(0x956)](this['_helpWindow']),this[_0x14f832(0x14c)]['setHelpWindow'](this[_0x14f832(0x2fe)]);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x457)]=function(){const _0x169e53=_0x3237d7;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x169e53(0x7b6)])return this[_0x169e53(0x7b6)];return this[_0x169e53(0x7b6)]=VisuMZ['BattleCore'][_0x169e53(0x98d)]['BattleLayout'][_0x169e53(0x719)]['toLowerCase']()[_0x169e53(0x194)](),this[_0x169e53(0x7b6)]===_0x169e53(0x385)&&!Imported[_0x169e53(0x69e)]&&(this[_0x169e53(0x7b6)]='default'),this['_battleLayoutStyle'];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x2ca)]=Scene_Battle['prototype'][_0x3237d7(0x8ae)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x8ae)]=function(){const _0x43d653=_0x3237d7,_0x480e40=this[_0x43d653(0x457)]();switch(_0x480e40){case'list':return this[_0x43d653(0xfe)](Math[_0x43d653(0x2e0)](0x1,$gameParty[_0x43d653(0x46a)]()),!![]);break;default:return VisuMZ[_0x43d653(0xa4)][_0x43d653(0x2ca)][_0x43d653(0x4db)](this);break;}},VisuMZ[_0x3237d7(0xa4)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x36b)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x36b)]=function(){const _0x5075b6=_0x3237d7,_0x51fa0a=this['battleLayoutStyle']();switch(_0x51fa0a){case _0x5075b6(0xa93):return this['helpWindowRectBorderStyle']();break;case _0x5075b6(0x51d):case'list':case'xp':case'portrait':default:return VisuMZ['BattleCore'][_0x5075b6(0x2ee)][_0x5075b6(0x4db)](this);break;}},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x942)]=function(){const _0x43b271=_0x3237d7,_0x21fcb0=this['battleLayoutStyle']();switch(_0x21fcb0){case'xp':case'portrait':return this['statusWindowRectXPStyle']();break;case _0x43b271(0xa93):return this[_0x43b271(0xa48)]();break;case _0x43b271(0x51d):case _0x43b271(0x5fc):default:return this[_0x43b271(0x484)]();break;}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x8e9)]=Scene_Battle[_0x3237d7(0x735)]['partyCommandWindowRect'],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x2c1)]=function(){const _0x3ec103=_0x3237d7,_0x240a75=this['battleLayoutStyle']();switch(_0x240a75){case'xp':case _0x3ec103(0x195):return this[_0x3ec103(0x86b)]();break;case _0x3ec103(0xa93):return this[_0x3ec103(0x664)]();case _0x3ec103(0x51d):case _0x3ec103(0x5fc):default:return this[_0x3ec103(0x48a)]();break;}},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x48a)]=function(){const _0x3897f7=_0x3237d7,_0x5691db=VisuMZ[_0x3897f7(0xa4)]['Settings'][_0x3897f7(0x243)],_0x38516d=_0x5691db['CommandWidth']||0xc0,_0x12d3a3=this[_0x3897f7(0x8ae)](),_0x33c6e7=this[_0x3897f7(0x5e6)]()?Graphics['boxWidth']-_0x38516d:0x0,_0x4590f4=Graphics[_0x3897f7(0x747)]-_0x12d3a3;return new Rectangle(_0x33c6e7,_0x4590f4,_0x38516d,_0x12d3a3);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x7c7)]=function(){const _0x295659=_0x3237d7;return this[_0x295659(0x2c1)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x7db)]=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x764)],Scene_Battle['prototype'][_0x3237d7(0x764)]=function(){const _0x125e0e=_0x3237d7,_0x2bf079=this[_0x125e0e(0x457)]();switch(_0x2bf079){case'xp':case'portrait':case _0x125e0e(0xa93):break;case _0x125e0e(0x51d):case'list':default:VisuMZ[_0x125e0e(0xa4)]['Scene_Battle_updateStatusWindowPosition']['call'](this);break;}},VisuMZ['BattleCore'][_0x3237d7(0x770)]=Scene_Battle['prototype'][_0x3237d7(0x3d5)],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x3d5)]=function(){const _0x52eb46=_0x3237d7;VisuMZ[_0x52eb46(0xa4)]['Scene_Battle_startActorSelection']['call'](this),this[_0x52eb46(0x5bf)]();},VisuMZ[_0x3237d7(0xa4)]['Scene_Battle_startEnemySelection']=Scene_Battle['prototype'][_0x3237d7(0xac3)],Scene_Battle['prototype'][_0x3237d7(0xac3)]=function(){const _0x38ad4d=_0x3237d7;VisuMZ[_0x38ad4d(0xa4)][_0x38ad4d(0x38f)][_0x38ad4d(0x4db)](this),this[_0x38ad4d(0x988)][_0x38ad4d(0xb2c)](),this[_0x38ad4d(0x5bf)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x5bf)]=function(){const _0x4c473d=_0x3237d7,_0x407836=this['battleLayoutStyle']();['xp',_0x4c473d(0x195),_0x4c473d(0xa93)]['includes'](_0x407836)&&this[_0x4c473d(0x5f0)][_0x4c473d(0xab8)](),(_0x407836===_0x4c473d(0xa93)||this[_0x4c473d(0x883)]())&&(this['_skillWindow']['close'](),this['_itemWindow'][_0x4c473d(0xab8)]());},VisuMZ['BattleCore'][_0x3237d7(0xadf)]=Scene_Battle[_0x3237d7(0x735)]['onActorOk'],Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x1dd)]=function(){const _0x383469=_0x3237d7;VisuMZ[_0x383469(0xa4)][_0x383469(0xadf)]['call'](this),this[_0x383469(0x667)]();},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xb34)]=function(){const _0x584b93=_0x3237d7;return[_0x584b93(0x34b),_0x584b93(0x77d),_0x584b93(0x7e7)][_0x584b93(0x231)](this['_actorCommandWindow']['currentSymbol']());},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xb16)]=Scene_Battle[_0x3237d7(0x735)]['onActorCancel'],Scene_Battle[_0x3237d7(0x735)]['onActorCancel']=function(){const _0x1b3d88=_0x3237d7;if(this[_0x1b3d88(0xb34)]()){if(_0x1b3d88(0x24b)===_0x1b3d88(0x340)){if(!_0x4732c4[_0x1b3d88(0x59e)]())return;const _0x56e701=this['battler']();if(!_0x56e701)return;_0x56e701[_0x1b3d88(0x6d7)](_0x473116,_0x509565);}else this[_0x1b3d88(0x364)][_0x1b3d88(0x5be)](),this[_0x1b3d88(0x137)][_0x1b3d88(0x181)](),this['_actorCommandWindow'][_0x1b3d88(0xa8b)]();}else{if(_0x1b3d88(0x331)===_0x1b3d88(0x331))VisuMZ['BattleCore'][_0x1b3d88(0xb16)][_0x1b3d88(0x4db)](this);else return 0x0;}this[_0x1b3d88(0x2ac)]();},VisuMZ['BattleCore']['Scene_Battle_onEnemyOk']=Scene_Battle[_0x3237d7(0x735)]['onEnemyOk'],Scene_Battle[_0x3237d7(0x735)]['onEnemyOk']=function(){const _0x321ebf=_0x3237d7;VisuMZ['BattleCore'][_0x321ebf(0x8c7)]['call'](this),this[_0x321ebf(0x667)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x9cb)]=Scene_Battle['prototype'][_0x3237d7(0xb15)],Scene_Battle[_0x3237d7(0x735)]['onEnemyCancel']=function(){const _0x2bbf3e=_0x3237d7;if(this['isNonSubmenuCancel']()){if(_0x2bbf3e(0x6ee)!=='fKgqb'){const _0x4adf08=this['battler']();if(_0x4adf08&&_0x3305ab)_0x4adf08['stepForward']();return;}else this['_statusWindow']['show'](),this[_0x2bbf3e(0x988)][_0x2bbf3e(0x181)](),this[_0x2bbf3e(0x5f0)][_0x2bbf3e(0xa8b)]();}else VisuMZ[_0x2bbf3e(0xa4)]['Scene_Battle_onEnemyCancel']['call'](this);this[_0x2bbf3e(0x2ac)]();},Scene_Battle['prototype']['okTargetSelectionVisibility']=function(){const _0x4b7274=_0x3237d7,_0x541dd5=this['battleLayoutStyle']();(_0x541dd5===_0x4b7274(0xa93)||this[_0x4b7274(0x883)]())&&(_0x4b7274(0x923)!==_0x4b7274(0x923)?(this['_preBattleCommonEvent']=_0x46ddf1,_0x31b1ff['_scene']['battleCoreResumeLaunchBattle']()):(this['_skillWindow'][_0x4b7274(0xa67)](),this['_skillWindow'][_0x4b7274(0x8e6)]&&this[_0x4b7274(0x329)][_0x4b7274(0x5be)](),this[_0x4b7274(0x546)]['open'](),this['_itemWindow'][_0x4b7274(0x8e6)]&&(_0x4b7274(0x75b)!=='JNnAP'?this[_0x4b7274(0x546)][_0x4b7274(0x5be)]():_0x39937b[_0x4b7274(0x857)](_0x4b7274(0x8b4),_0x4c9950,_0x518431,!![]))));},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x2ac)]=function(){const _0x55d337=_0x3237d7,_0x1e0f5a=this['battleLayoutStyle']();if(['xp',_0x55d337(0x195),_0x55d337(0xa93)][_0x55d337(0x231)](_0x1e0f5a)){if(_0x55d337(0x121)===_0x55d337(0x121))this[_0x55d337(0x5f0)][_0x55d337(0xa67)]();else{const _0x3f7587=new _0x11079b();_0x3f7587[_0x55d337(0x651)]=_0x3d5ab8[_0x55d337(0xcf)](_0x849300[_0x55d337(0x5c2)]),_0x3f7587['x']=_0x5e1e89[_0x55d337(0x15d)]||0x0,_0x3f7587['y']=_0x46b7d5['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x55d337(0xae1)](_0x3f7587),this[_0x55d337(0xaeb)]=_0x3f7587;}}this[_0x55d337(0x667)]();},Scene_Battle[_0x3237d7(0x735)]['statusWindowRectDefaultStyle']=function(){const _0x4d2a45=_0x3237d7,_0x2c119d=VisuMZ['BattleCore'][_0x4d2a45(0x98d)][_0x4d2a45(0x243)],_0xaf328c=Window_BattleStatus['prototype'][_0x4d2a45(0x1f9)](),_0x693bc0=Graphics['boxWidth']-(_0x2c119d['CommandWidth']||0xc0),_0x4d2928=this[_0x4d2a45(0x8ae)]()+_0xaf328c,_0x3967d5=this[_0x4d2a45(0x5e6)]()?0x0:Graphics[_0x4d2a45(0x63d)]-_0x693bc0,_0x369085=Graphics[_0x4d2a45(0x747)]-_0x4d2928+_0xaf328c;return new Rectangle(_0x3967d5,_0x369085,_0x693bc0,_0x4d2928);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xa34)]=function(){const _0x44f300=_0x3237d7,_0x5a3631=Window_BattleStatus[_0x44f300(0x735)][_0x44f300(0x1f9)](),_0xa9ddfa=Graphics['boxWidth'],_0x4296a5=this[_0x44f300(0x8ae)]()+_0x5a3631,_0x5f1d2e=0x0,_0x269ce6=Graphics[_0x44f300(0x747)]-_0x4296a5+_0x5a3631;return new Rectangle(_0x5f1d2e,_0x269ce6,_0xa9ddfa,_0x4296a5);},Scene_Battle['prototype']['partyCommandWindowRectXPStyle']=function(){const _0x3de531=_0x3237d7,_0xba8d55=Graphics['boxWidth']/0x2,_0xd226fd=this[_0x3de531(0xfe)](VisuMZ[_0x3de531(0xa4)][_0x3de531(0x98d)][_0x3de531(0x243)][_0x3de531(0x352)],!![]),_0x90716d=Math[_0x3de531(0x222)]((Graphics[_0x3de531(0x63d)]-_0xba8d55)/0x2),_0x36dee6=Graphics[_0x3de531(0x747)]-_0xd226fd-this[_0x3de531(0xa34)]()[_0x3de531(0x766)];return new Rectangle(_0x90716d,_0x36dee6,_0xba8d55,_0xd226fd);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xa8d)]=function(){const _0x3b8598=_0x3237d7,_0x2825b7=Graphics[_0x3b8598(0xa28)],_0xf96512=Math['round']((Graphics[_0x3b8598(0x63d)]-_0x2825b7)/0x2),_0x5fdd24=this['helpAreaHeight'](),_0x2c70e2=(Graphics[_0x3b8598(0x766)]-Graphics[_0x3b8598(0x747)])/-0x2;return new Rectangle(_0xf96512,_0x2c70e2,_0x2825b7,_0x5fdd24);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xa48)]=function(){const _0x551f79=_0x3237d7,_0x2197b5=Graphics[_0x551f79(0xa28)],_0x6f3585=Math['round']((Graphics['boxWidth']-_0x2197b5)/0x2),_0x57896c=this[_0x551f79(0xfe)](0x4,!![]),_0x14585e=Graphics[_0x551f79(0x747)]-_0x57896c+(Graphics['height']-Graphics['boxHeight'])/0x2;return new Rectangle(_0x6f3585,_0x14585e,_0x2197b5,_0x57896c);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x664)]=function(){const _0x19ac25=_0x3237d7,_0x11b5b5=Math['floor'](Graphics[_0x19ac25(0xa28)]/0x3),_0x5e1ec7=this[_0x19ac25(0x5e6)]()?(Graphics[_0x19ac25(0xa28)]+Graphics[_0x19ac25(0x63d)])/0x2-_0x11b5b5:(Graphics[_0x19ac25(0xa28)]-Graphics[_0x19ac25(0x63d)])/-0x2,_0x4a2ce5=this[_0x19ac25(0xa8d)](),_0x405f78=_0x4a2ce5['y']+_0x4a2ce5['height'],_0x3d6c6f=this[_0x19ac25(0xa48)](),_0x15955e=_0x3d6c6f['y']-_0x405f78;return new Rectangle(_0x5e1ec7,_0x405f78,_0x11b5b5,_0x15955e);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x2ec)]=function(){const _0x401ef5=_0x3237d7,_0x2a6b4e=Math[_0x401ef5(0x404)](Graphics['width']/0x3),_0xd98dae=Math[_0x401ef5(0x222)]((Graphics[_0x401ef5(0x63d)]-_0x2a6b4e)/0x2),_0x2b2df9=this[_0x401ef5(0x664)](),_0x929011=_0x2b2df9['y'],_0x42c7a4=_0x2b2df9[_0x401ef5(0x766)];return new Rectangle(_0xd98dae,_0x929011,_0x2a6b4e,_0x42c7a4);},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0xf3)]=function(){const _0x4f5676=_0x3237d7;this[_0x4f5676(0x898)]['y']=this['_helpWindow']['y']+this[_0x4f5676(0x2fe)]['height'];if(this[_0x4f5676(0x5e6)]()){if(_0x4f5676(0x5fb)===_0x4f5676(0x186))return this[_0x4f5676(0x9f5)]()?this['_enemy'][_0x4f5676(0x40f)]():!![];else this[_0x4f5676(0x457)]()===_0x4f5676(0xa93)?_0x4f5676(0x2b5)!==_0x4f5676(0x813)?this['_cancelButton']['x']=0x8:this[_0x4f5676(0x857)](_0x4f5676(0x45d),_0x514c2d,[_0x2b2f53[_0x4f5676(0xb5c)]],-0x1):'PAxJH'==='HNfTE'?_0x3d3387[_0x4f5676(0x85f)](0x0):this[_0x4f5676(0x898)]['x']=-this[_0x4f5676(0x898)][_0x4f5676(0xa28)]-0x4;}else'uztFw'===_0x4f5676(0x679)?this[_0x4f5676(0x898)]['x']=Graphics['width']-(Graphics[_0x4f5676(0xa28)]-Graphics[_0x4f5676(0x63d)])/0x2-this[_0x4f5676(0x898)][_0x4f5676(0xa28)]-0x4:_0x398c2b[_0x4f5676(0xa4)][_0x4f5676(0x925)][_0x4f5676(0x4db)](this,_0x14b463);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x49d)]=Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x59f)],Scene_Battle['prototype'][_0x3237d7(0x59f)]=function(){const _0x2952dc=_0x3237d7;if(this[_0x2952dc(0x457)]()===_0x2952dc(0xa93)){if(_0x2952dc(0x7a1)!=='paYKT')return this[_0x2952dc(0x2ec)]();else{if(_0x3b3dac['_autoBattle'])return![];return _0x1301ba['BattleCore'][_0x2952dc(0x98d)][_0x2952dc(0x754)]['EmergeText'];}}else return this[_0x2952dc(0x883)]()?this[_0x2952dc(0x1fd)]():VisuMZ[_0x2952dc(0xa4)][_0x2952dc(0x49d)][_0x2952dc(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x454)]=Scene_Battle[_0x3237d7(0x735)]['itemWindowRect'],Scene_Battle['prototype'][_0x3237d7(0x85b)]=function(){const _0x82a7a3=_0x3237d7;if(this[_0x82a7a3(0x457)]()===_0x82a7a3(0xa93)){if(_0x82a7a3(0xa79)!=='qihCJ')return this['skillItemWindowRectBorderStyle']();else _0x1b1dd4[_0x82a7a3(0x5a2)](_0x57db88[_0x82a7a3(0x1bf)],!![]);}else{if(this[_0x82a7a3(0x883)]()){if('FMgqs'===_0x82a7a3(0x144))return this[_0x82a7a3(0x1fd)]();else{const _0x5758a4=this[_0x82a7a3(0x2cd)](),_0x470844=_0x128840['BattleCore']['Settings'][_0x82a7a3(0x661)]['CmdIconFight'],_0x1a9c94=_0x5758a4===_0x82a7a3(0x488)?_0x5e29c9[_0x82a7a3(0x763)]:_0x82a7a3(0x861)[_0x82a7a3(0x117)](_0x470844,_0x3f4158['fight']),_0x620f59=this['isFightCommandEnabled']();this['addCommand'](_0x1a9c94,'fight',_0x620f59);}}else return VisuMZ[_0x82a7a3(0xa4)][_0x82a7a3(0x454)]['call'](this);}},Scene_Battle[_0x3237d7(0x735)][_0x3237d7(0x883)]=function(){const _0x496426=_0x3237d7;return VisuMZ[_0x496426(0xa4)][_0x496426(0x98d)][_0x496426(0x243)][_0x496426(0x82c)];},Scene_Battle[_0x3237d7(0x735)]['skillItemWindowRectMiddle']=function(){const _0x12d713=_0x3237d7,_0x2a0217=Sprite_Button[_0x12d713(0x735)][_0x12d713(0x900)]()*0x2+0x4;let _0x29328e=Graphics['boxWidth']-_0x2a0217;if(Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x12d713(0x27e)]()){if('oIwOs'!==_0x12d713(0x822)){const _0x4d1eab=_0x1a4484(_0x20641f['$1']);_0x4d1eab<_0x4061ae?(_0x1151f0(_0x12d713(0x32a)[_0x12d713(0x117)](_0xbfbd87,_0x4d1eab,_0x5ef222)),_0x5e8ee5['exit']()):_0x116e5f=_0x397479[_0x12d713(0x2e0)](_0x4d1eab,_0x212c65);}else _0x29328e+=_0x2a0217;}const _0x5108b5=this[_0x12d713(0xb4a)](),_0x88be37=Graphics[_0x12d713(0x747)]-_0x5108b5-this['statusWindowRect']()[_0x12d713(0x766)]+Window_BattleStatus[_0x12d713(0x735)]['extraHeight'](),_0x307bb2=0x0;return new Rectangle(_0x307bb2,_0x5108b5,_0x29328e,_0x88be37);},Scene_Battle[_0x3237d7(0x735)]['createEnemyNameContainer']=function(){const _0x2dbee6=_0x3237d7;if(!VisuMZ[_0x2dbee6(0xa4)][_0x2dbee6(0x98d)]['Enemy'][_0x2dbee6(0x265)])return;this[_0x2dbee6(0x448)]=new Sprite(),this[_0x2dbee6(0x448)]['x']=this[_0x2dbee6(0x548)]['x'],this[_0x2dbee6(0x448)]['y']=this[_0x2dbee6(0x548)]['y'];const _0x8f060a=this[_0x2dbee6(0x972)][_0x2dbee6(0x4fa)](this['_windowLayer']);this['addChildAt'](this[_0x2dbee6(0x448)],_0x8f060a);for(let _0x4d02c3=0x0;_0x4d02c3<0x8;_0x4d02c3++){if(_0x2dbee6(0x7f5)!==_0x2dbee6(0x947)){const _0x56ef64=new Window_EnemyName(_0x4d02c3);this[_0x2dbee6(0x448)]['addChild'](_0x56ef64);}else this['_forcedBattleLayout']=_0x2dbee6(0x385);}},Sprite_Battler[_0x3237d7(0xa1)]=VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x98d)]['Actor'][_0x3237d7(0x290)],VisuMZ[_0x3237d7(0xa4)]['Sprite_Battler_initMembers']=Sprite_Battler['prototype'][_0x3237d7(0x96b)],Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x96b)]=function(){const _0x27a4c4=_0x3237d7;VisuMZ[_0x27a4c4(0xa4)][_0x27a4c4(0xb65)]['call'](this),this[_0x27a4c4(0x15b)]();if(this[_0x27a4c4(0x607)]===Sprite_Enemy)this['createShadowSprite']();this[_0x27a4c4(0xd2)]();},Sprite_Battler['prototype'][_0x3237d7(0x15b)]=function(){const _0x4557bc=_0x3237d7;this['_baseX']=0x0,this[_0x4557bc(0x9ed)]=0x0,this['_floatHeight']=0x0,this['_targetFloatHeight']=0x0,this['_floatDuration']=0x0,this[_0x4557bc(0x427)]=0x0,this[_0x4557bc(0x722)]='Linear',this[_0x4557bc(0x7a4)]=0x0,this['_jumpMaxHeight']=0x0,this['_jumpDuration']=0x0,this[_0x4557bc(0x2f2)]=0x0,this[_0x4557bc(0x799)]=0xff,this[_0x4557bc(0x3be)]=0x0,this[_0x4557bc(0x869)]=0x0,this[_0x4557bc(0x2e8)]=_0x4557bc(0xc6),this[_0x4557bc(0x28f)]=0x0,this[_0x4557bc(0x4ee)]=0x0,this[_0x4557bc(0x409)]=0x0,this['_angleWholeDuration']=0x0,this['_angleEasing']='Linear',this[_0x4557bc(0x163)]=!![],this[_0x4557bc(0x909)]=0x0,this[_0x4557bc(0x983)]=0x0,this[_0x4557bc(0x9a6)]=0x0,this[_0x4557bc(0x205)]=0x0,this[_0x4557bc(0x8c5)]=0x0,this[_0x4557bc(0x1e3)]=0x0,this[_0x4557bc(0x9bf)]=_0x4557bc(0xc6),this[_0x4557bc(0x106)]=0x1,this[_0x4557bc(0x659)]=0x1,this[_0x4557bc(0x35a)]=0x1,this['_targetGrowY']=0x1,this[_0x4557bc(0x7bf)]=0x0,this[_0x4557bc(0xfd)]=0x0,this[_0x4557bc(0x4eb)]=_0x4557bc(0xc6),this[_0x4557bc(0x458)]=0x1,this[_0x4557bc(0x408)]=0x0,this[_0x4557bc(0x59a)]=0x0,this[_0x4557bc(0x9fd)]=0x0,this[_0x4557bc(0x354)]=0x0,this[_0x4557bc(0x576)]=_0x4557bc(0xc6);},Sprite_Battler['prototype'][_0x3237d7(0x4ab)]=function(){const _0x1ccb9b=_0x3237d7;this[_0x1ccb9b(0x1b0)]=new Sprite(),this[_0x1ccb9b(0x1b0)][_0x1ccb9b(0x651)]=ImageManager[_0x1ccb9b(0xcf)]('Shadow2'),this[_0x1ccb9b(0x1b0)][_0x1ccb9b(0x651)][_0x1ccb9b(0x133)]=VisuMZ['BattleCore']['Settings'][_0x1ccb9b(0x4da)]['SmoothImage'],this['_shadowSprite'][_0x1ccb9b(0xa99)]['x']=0.5,this[_0x1ccb9b(0x1b0)][_0x1ccb9b(0xa99)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x1ccb9b(0x1b0)][_0x1ccb9b(0x6ad)]=![],this[_0x1ccb9b(0x70d)](this[_0x1ccb9b(0x1b0)]);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xd2)]=function(){const _0x2589b9=_0x3237d7;this[_0x2589b9(0x342)]=new Sprite(),this[_0x2589b9(0x342)][_0x2589b9(0xa99)]['x']=0.5,this[_0x2589b9(0x342)][_0x2589b9(0xa99)]['y']=0.5,this[_0x2589b9(0x70d)](this[_0x2589b9(0x342)]);},Sprite_Battler[_0x3237d7(0x735)]['attachSpritesToDistortionSprite']=function(){const _0x5e7fb4=_0x3237d7;if(!this[_0x5e7fb4(0x342)])return;if(this[_0x5e7fb4(0x1b0)]){const _0x4aabb5=this[_0x5e7fb4(0x35f)](this[_0x5e7fb4(0x342)]);this['addChildAt'](this['_shadowSprite'],_0x4aabb5),this['updateShadowVisibility']();}this[_0x5e7fb4(0xace)]&&this[_0x5e7fb4(0x342)][_0x5e7fb4(0x70d)](this[_0x5e7fb4(0xace)]);this[_0x5e7fb4(0x5cc)]&&this['_distortionSprite'][_0x5e7fb4(0x70d)](this[_0x5e7fb4(0x5cc)]);if(this[_0x5e7fb4(0x9be)]){if('xPJch'===_0x5e7fb4(0x3df)){const _0x50fa15=this['aliveMembers']();return _0x50fa15[_0x5acc7c[_0x5e7fb4(0x1a2)](_0x50fa15[_0x5e7fb4(0x60c)])];}else this['_distortionSprite'][_0x5e7fb4(0x70d)](this[_0x5e7fb4(0x9be)]);}this[_0x5e7fb4(0x4c7)]&&this[_0x5e7fb4(0x342)]['addChild'](this[_0x5e7fb4(0x4c7)]);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x621)]=function(){const _0x1c350e=_0x3237d7;if(!this[_0x1c350e(0x1b0)])return;if(this[_0x1c350e(0x820)]&&this[_0x1c350e(0x820)][_0x1c350e(0x44c)]()){const _0x3b95fd=this[_0x1c350e(0x1b0)][_0x1c350e(0x651)];this['_shadowSprite'][_0x1c350e(0x3f0)](0x0,0x0,_0x3b95fd[_0x1c350e(0xa28)],_0x3b95fd[_0x1c350e(0x766)]);}else this[_0x1c350e(0x1b0)][_0x1c350e(0x3f0)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xa2c)]=function(){const _0x326b90=_0x3237d7;if(SceneManager[_0x326b90(0x5cb)]())return SceneManager[_0x326b90(0x2a7)][_0x326b90(0x314)][_0x326b90(0x7c0)];else{if('BdlNV'===_0x326b90(0x5b3))_0x3291a6['playCancel'](),_0x75f239['_autoBattle']=![],_0x5b0f91['clear'](),_0x9bf26a['clear']();else return this[_0x326b90(0xb23)];}},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x76f)]=function(_0x1b00b1,_0x22eb62){const _0x2a4f88=_0x3237d7;if(!this[_0x2a4f88(0x820)][_0x2a4f88(0xa06)]())return;const _0x252381=VisuMZ[_0x2a4f88(0xa4)]['Settings'][_0x2a4f88(0x626)],_0x40ab1f=new Sprite_Damage();_0x40ab1f[_0x2a4f88(0x183)]=_0x252381[_0x2a4f88(0x970)],this[_0x2a4f88(0x3fb)](_0x40ab1f),_0x40ab1f[_0x2a4f88(0x76f)](_0x1b00b1,_0x22eb62),this[_0x2a4f88(0xa8e)](_0x40ab1f);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x3b1)]=function(_0x1bbae5,_0x2c73f6,_0x2ef287){const _0x5b62a8=_0x3237d7;if(!this['_battler'][_0x5b62a8(0xa06)]())return;const _0x20d361=VisuMZ['BattleCore'][_0x5b62a8(0x98d)][_0x5b62a8(0x626)],_0x1ec2d2=new Sprite_Damage();_0x1ec2d2['_duration']=_0x20d361[_0x5b62a8(0x970)],this[_0x5b62a8(0x3fb)](_0x1ec2d2),_0x1ec2d2[_0x5b62a8(0x3b1)](_0x1bbae5,_0x2c73f6,_0x2ef287),this[_0x5b62a8(0xa8e)](_0x1ec2d2);},Sprite_Battler['prototype']['setupDamagePopup']=function(){const _0x473b03=_0x3237d7;if(!this[_0x473b03(0x820)]['isDamagePopupRequested']())return;while(this[_0x473b03(0x820)][_0x473b03(0x1a4)]()){if(this[_0x473b03(0x820)][_0x473b03(0xa06)]()){if(_0x473b03(0xb1b)!==_0x473b03(0x5c0))this[_0x473b03(0xaef)]();else{if(this[_0x473b03(0x4b0)]()>=0x1)return!![];return this[_0x473b03(0x43a)]()[_0x473b03(0x5c1)];}}}this[_0x473b03(0x820)][_0x473b03(0x586)](),this['_battler'][_0x473b03(0x69b)]();},Sprite_Battler['prototype'][_0x3237d7(0xaef)]=function(){const _0x5ed75b=_0x3237d7,_0x442e7f=VisuMZ['BattleCore'][_0x5ed75b(0x98d)]['Damage'],_0x5c210e=new Sprite_Damage();_0x5c210e[_0x5ed75b(0x183)]=_0x442e7f['PopupDuration'],this[_0x5ed75b(0x3fb)](_0x5c210e),_0x5c210e[_0x5ed75b(0x56c)](this['_battler']),_0x5c210e[_0x5ed75b(0x3dc)](this[_0x5ed75b(0x820)]),this[_0x5ed75b(0xa8e)](_0x5c210e);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xa8e)]=function(_0x41255b){const _0x869e03=_0x3237d7;this[_0x869e03(0x69f)][_0x869e03(0x857)](_0x41255b);if(this[_0x869e03(0x97e)]())_0x869e03(0xa49)===_0x869e03(0xa49)?SceneManager[_0x869e03(0x2a7)][_0x869e03(0x364)][_0x869e03(0xa8e)](_0x41255b,this[_0x869e03(0x820)]):this[_0x869e03(0x857)](_0x869e03(0x22d),_0x25e94d,_0x5f587f);else{this[_0x869e03(0xa2c)]()[_0x869e03(0x70d)](_0x41255b);if(SceneManager['isBattleFlipped']())_0x41255b[_0x869e03(0x845)]['x']=-0x1;}},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x97e)]=function(){const _0x4b151f=_0x3237d7;return!$gameSystem[_0x4b151f(0x59e)]()&&this[_0x4b151f(0x820)]&&this[_0x4b151f(0x820)][_0x4b151f(0x5ef)]();},Sprite_Battler[_0x3237d7(0x735)]['sortDamageSprites']=function(_0x597343){const _0x47d7a9=_0x3237d7;this['alignBattleCoreDamageSprite'](_0x597343,!![]);const _0x455050=VisuMZ[_0x47d7a9(0xa4)]['Settings']['Damage'],_0x510103=SceneManager[_0x47d7a9(0x33b)]()?-0x1:0x1;if(_0x455050[_0x47d7a9(0x4f2)]){if(_0x47d7a9(0xc8)===_0x47d7a9(0xc8))for(const _0x4f8a6a of this['_damages']){if('BRKKP'!==_0x47d7a9(0x746))_0x4f8a6a['x']+=_0x455050[_0x47d7a9(0x8a6)]*_0x510103,_0x4f8a6a['y']+=_0x455050[_0x47d7a9(0x750)];else return![];}else{let _0x127058=_0x539802['makeDeepCopy'](_0x1627f2[_0x47d7a9(0xa4)][_0x47d7a9(0x7fe)][_0x47d7a9(0x4db)](this));return _0x1ae6c2[_0x47d7a9(0xa4)][_0x47d7a9(0x480)](_0x127058);}}else{const _0x257763=this['_damages'][this[_0x47d7a9(0x69f)]['length']-0x1];_0x257763&&(_0x47d7a9(0x99c)===_0x47d7a9(0x99c)?(_0x597343['x']=_0x257763['x']+_0x455050[_0x47d7a9(0x8a6)]*_0x510103,_0x597343['y']=_0x257763['y']+_0x455050['PopupShiftY']):(this[_0x47d7a9(0x857)](_0x47d7a9(0x6dc),[_0x4b4490],_0x46cc21,_0x365732),this[_0x47d7a9(0x857)](_0x47d7a9(0x34c),_0x1ac17b,_0x54b681,'front\x20center',_0x5b835b,!![],_0x47d7a9(0xc6),!![]),this[_0x47d7a9(0x857)](_0x47d7a9(0x85a),[_0x450b84],_0x47d7a9(0x33a)),this[_0x47d7a9(0x857)](_0x47d7a9(0x962))));}},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x7a5)]=function(_0x2d73a9,_0x358615){const _0x12c541=_0x3237d7,_0x4efefb=SceneManager[_0x12c541(0x33b)]()?-0x1:0x1;let _0x1f4024=this['_baseX'];_0x1f4024+=this[_0x12c541(0x285)]();let _0x4aa666=this['_baseY'];const _0x4cb7e2=this[_0x12c541(0x342)][_0x12c541(0x845)]['y'];_0x4aa666+=this[_0x12c541(0x68a)]();const _0x5c054e=SceneManager[_0x12c541(0x2a7)][_0x12c541(0x364)];if(_0x5c054e&&this[_0x12c541(0xb23)]===_0x5c054e){if(_0x12c541(0xa3f)===_0x12c541(0x5e7)){if(this[_0x12c541(0x42a)]===_0x3a7a1f)this[_0x12c541(0x9b8)]();return this[_0x12c541(0x42a)];}else{_0x1f4024+=_0x5c054e['x']-this[_0x12c541(0x52f)]();const _0xed504d=_0x5c054e[_0x12c541(0x46e)]()*0x3/0x4;_0x4aa666=_0x5c054e['y']+_0xed504d,_0x4aa666=Math[_0x12c541(0x9c4)](_0x4aa666,_0x5c054e['y']+this['y']-this[_0x12c541(0x766)]+_0xed504d);}}_0x2d73a9['x']=Math[_0x12c541(0x222)](_0x1f4024+this[_0x12c541(0x52f)]()*_0x4efefb),_0x2d73a9['y']=Math['round'](_0x4aa666+this['damageOffsetY']());},VisuMZ['BattleCore'][_0x3237d7(0x4ad)]=Sprite_Battler[_0x3237d7(0x735)]['damageOffsetX'],Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x52f)]=function(){const _0xe0ac47=_0x3237d7;let _0x206537=VisuMZ[_0xe0ac47(0xa4)][_0xe0ac47(0x4ad)]['call'](this),_0xfc8703=VisuMZ[_0xe0ac47(0xa4)][_0xe0ac47(0x98d)][_0xe0ac47(0x626)][_0xe0ac47(0x8ea)]||0x0;return Math[_0xe0ac47(0x222)](_0x206537+_0xfc8703);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x915)]=Sprite_Battler[_0x3237d7(0x735)]['damageOffsetY'],Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x251)]=function(){const _0x20f16d=_0x3237d7;let _0x116c69=VisuMZ[_0x20f16d(0xa4)]['Sprite_Battler_damageOffsetY'][_0x20f16d(0x4db)](this);switch(VisuMZ[_0x20f16d(0xa4)][_0x20f16d(0x98d)][_0x20f16d(0x626)][_0x20f16d(0xb41)]){case _0x20f16d(0x778):_0x116c69-=this[_0x20f16d(0x766)]*this[_0x20f16d(0x845)]['y'];break;case'center':_0x116c69-=this[_0x20f16d(0x766)]*this['scale']['y']*0.5;break;}let _0x15ad6a=VisuMZ[_0x20f16d(0xa4)][_0x20f16d(0x98d)]['Damage'][_0x20f16d(0x65a)]||0x0;return Math[_0x20f16d(0x222)](_0x116c69+_0x15ad6a);},Sprite_Actor[_0x3237d7(0x735)]['damageOffsetX']=function(){const _0x41e959=_0x3237d7;return Sprite_Battler['prototype']['damageOffsetX'][_0x41e959(0x4db)](this);},Sprite_Actor['prototype'][_0x3237d7(0x251)]=function(){const _0x335f46=_0x3237d7;return Sprite_Battler[_0x335f46(0x735)][_0x335f46(0x251)][_0x335f46(0x4db)](this);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x406)]=function(_0x4befb3){const _0x42a6da=_0x3237d7;this[_0x42a6da(0x97e)]()?_0x42a6da(0x71c)===_0x42a6da(0x71c)?SceneManager['_scene'][_0x42a6da(0x364)][_0x42a6da(0x1c1)](_0x4befb3):_0x14291e=this[_0x42a6da(0x43a)]()['wtypeId']||0x0:(this[_0x42a6da(0xa2c)]()[_0x42a6da(0x89f)](_0x4befb3),this[_0x42a6da(0x69f)][_0x42a6da(0x28b)](_0x4befb3),_0x4befb3[_0x42a6da(0x416)]());},VisuMZ['BattleCore'][_0x3237d7(0xa68)]=Sprite_Battler['prototype']['setHome'],Sprite_Battler[_0x3237d7(0x735)]['setHome']=function(_0x352e1a,_0x372ad9){const _0x4b1739=_0x3237d7,_0x23e286=VisuMZ[_0x4b1739(0xa4)]['Settings'];if(this['constructor']===Sprite_Actor)_0x352e1a+=_0x23e286[_0x4b1739(0x4da)]['OffsetX']||0x0,_0x372ad9+=_0x23e286[_0x4b1739(0x4da)][_0x4b1739(0x57b)]||0x0;else this[_0x4b1739(0x607)]===Sprite_Enemy&&(_0x352e1a+=_0x23e286['Enemy'][_0x4b1739(0x252)]||0x0,_0x372ad9+=_0x23e286[_0x4b1739(0x754)][_0x4b1739(0x57b)]||0x0);this[_0x4b1739(0x820)]&&(_0x352e1a=this[_0x4b1739(0x820)][_0x4b1739(0x792)]??_0x352e1a,_0x372ad9=this[_0x4b1739(0x820)]['_forcedHomeY']??_0x372ad9),VisuMZ[_0x4b1739(0xa4)]['Sprite_Battler_setHome'][_0x4b1739(0x4db)](this,_0x352e1a,_0x372ad9),this[_0x4b1739(0x408)]=this['_homeX'],this[_0x4b1739(0x59a)]=this[_0x4b1739(0x3f3)],this[_0x4b1739(0x9fd)]=0x0,this[_0x4b1739(0x354)]=0x0,this[_0x4b1739(0x576)]=_0x4b1739(0xc6);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xac)]=Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x4dc)],Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x4dc)]=function(){const _0x2f2888=_0x3237d7;VisuMZ[_0x2f2888(0xa4)]['Sprite_Battler_update'][_0x2f2888(0x4db)](this);if(!this[_0x2f2888(0x820)]&&this[_0x2f2888(0x34a)]){if(_0x2f2888(0xa50)!=='OXZZD'){this[_0x2f2888(0x69b)]();if(_0x5c25c0['VisuMZ_1_SkillsStatesCore']){const _0x1abdcf=_0x40fbc7[_0x2f2888(0x92f)]['Settings']['States'];_0x1abdcf&&_0x1abdcf[_0x2f2888(0xf0)]===![]&&this[_0x2f2888(0x135)](0x1);}else this['removeStatesAuto'](0x1);this[_0x2f2888(0x9b9)]();}else this[_0x2f2888(0x34a)]['visible']=![];}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x9eb)]=Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x996)],Sprite_Battler['prototype'][_0x3237d7(0x996)]=function(){const _0x210d9d=_0x3237d7;this['updateScale'](),this[_0x210d9d(0x185)](),this[_0x210d9d(0x4d0)](),this[_0x210d9d(0x3b2)](),this[_0x210d9d(0xfc)](),VisuMZ[_0x210d9d(0xa4)][_0x210d9d(0x9eb)][_0x210d9d(0x4db)](this);if(this[_0x210d9d(0x607)]===Sprite_Enemy)this[_0x210d9d(0x800)]();},VisuMZ['BattleCore']['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x3237d7(0x62e)],Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x62e)]=function(){const _0xe3d323=_0x3237d7;this[_0xe3d323(0x752)](),VisuMZ[_0xe3d323(0xa4)][_0xe3d323(0x3b5)]['call'](this),this[_0xe3d323(0x1c4)](),this[_0xe3d323(0xa9)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x8d2)]=function(_0x52ffa4,_0x44ba09,_0x3c1550,_0x19ddb0){const _0x3a6019=_0x3237d7;(this[_0x3a6019(0x408)]!==_0x52ffa4||this[_0x3a6019(0x59a)]!==_0x44ba09)&&(this['_targetHomeX']=_0x52ffa4,this[_0x3a6019(0x59a)]=_0x44ba09,this[_0x3a6019(0x9fd)]=_0x3c1550,this[_0x3a6019(0x354)]=_0x3c1550,this[_0x3a6019(0x576)]=_0x19ddb0,_0x3c1550<=0x0&&('TuQUV'!==_0x3a6019(0xdf)?this['onHomeMoveEnd']():this[_0x3a6019(0x85a)](_0x3a6019(0xa3e))));},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x752)]=function(){const _0x1ca28c=_0x3237d7;if(this[_0x1ca28c(0x9fd)]<=0x0)return;const _0x4a19cf=this[_0x1ca28c(0x9fd)],_0xf0228b=this[_0x1ca28c(0x354)],_0x7bdd69=this[_0x1ca28c(0x576)];if(Imported[_0x1ca28c(0x38d)]){if(_0x1ca28c(0x4c1)!==_0x1ca28c(0x2f4))this[_0x1ca28c(0x7e8)]=this[_0x1ca28c(0xf4)](this[_0x1ca28c(0x7e8)],this['_targetHomeX'],_0x4a19cf,_0xf0228b,_0x7bdd69),this[_0x1ca28c(0x3f3)]=this[_0x1ca28c(0xf4)](this[_0x1ca28c(0x3f3)],this[_0x1ca28c(0x59a)],_0x4a19cf,_0xf0228b,_0x7bdd69);else{_0x3421ea[_0x1ca28c(0x735)][_0x1ca28c(0x941)][_0x1ca28c(0x4db)](this);if(this[_0x1ca28c(0x3ca)])this['updateCommandNameWindow']();}}else this[_0x1ca28c(0x7e8)]=(this['_homeX']*(_0x4a19cf-0x1)+this[_0x1ca28c(0x408)])/_0x4a19cf,this['_homeY']=(this[_0x1ca28c(0x3f3)]*(_0x4a19cf-0x1)+this[_0x1ca28c(0x59a)])/_0x4a19cf;this['_homeDuration']--;if(this[_0x1ca28c(0x9fd)]<=0x0)this[_0x1ca28c(0x689)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x689)]=function(){const _0x45c767=_0x3237d7;this['_homeX']=this[_0x45c767(0x408)],this[_0x45c767(0x3f3)]=this[_0x45c767(0x59a)];},Sprite_Battler['prototype'][_0x3237d7(0x1c4)]=function(){const _0x30cc96=_0x3237d7;this[_0x30cc96(0x642)]=this['x'],this['_baseY']=this['y'],this[_0x30cc96(0x5aa)](),this['updateJump'](),this['x']+=this[_0x30cc96(0x285)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x30cc96(0xac6)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x30cc96(0x521)](this['y']);},Sprite_Battler['prototype'][_0x3237d7(0x285)]=function(){let _0x22faa1=0x0;return _0x22faa1;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x68a)]=function(){const _0x1f7135=_0x3237d7;let _0x2d18a7=0x0;return this[_0x1f7135(0x820)]&&!this['_battler'][_0x1f7135(0x156)]()&&(_0x2d18a7-=this[_0x1f7135(0x4ba)],_0x2d18a7-=this['_jumpHeight']),_0x2d18a7;},Sprite_Battler['prototype']['extraPositionScaledY']=function(){const _0x1f4054=_0x3237d7;let _0x56972d=0x0;if(this[_0x1f4054(0x342)]&&this[_0x1f4054(0x607)]!==Sprite_SvEnemy){const _0x1465a5=this[_0x1f4054(0x342)][_0x1f4054(0x845)]['y'];_0x56972d-=(_0x1465a5-0x1)*this[_0x1f4054(0x766)];}return _0x56972d;},Sprite_Battler['prototype']['updateFlip']=function(){const _0x3f2d24=_0x3237d7,_0x5ba65e=this[_0x3f2d24(0x820)]&&this[_0x3f2d24(0x820)][_0x3f2d24(0xa85)]();this['_flipScaleX']=(_0x5ba65e?-0x1:0x1)*Math[_0x3f2d24(0x249)](this[_0x3f2d24(0x845)]['x']);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x5c8)]=function(_0x5b5450,_0x3dbb8d,_0x26d32d){const _0x55e3e7=_0x3237d7;if(!this[_0x55e3e7(0x1ac)]())return;if(this[_0x55e3e7(0x89b)]===_0x5b5450)return;this[_0x55e3e7(0x89b)]=_0x5b5450,this[_0x55e3e7(0x841)]=_0x3dbb8d,this['_floatWholeDuration']=_0x3dbb8d,this[_0x55e3e7(0x722)]=_0x26d32d||_0x55e3e7(0xc6);if(_0x3dbb8d<=0x0)this['_floatHeight']=_0x5b5450;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x5aa)]=function(){const _0x39355e=_0x3237d7;if(this[_0x39355e(0x841)]<=0x0)return;const _0x4651e2=this[_0x39355e(0x841)],_0x47b265=this[_0x39355e(0x427)],_0x4bc2ae=this['_floatEasing'];Imported[_0x39355e(0x38d)]?_0x39355e(0x7c9)!==_0x39355e(0x7c9)?(_0x528f7d['BattleCore']['BattleManager_startInput'][_0x39355e(0x4db)](this),this['isDTB']()&&this[_0x39355e(0x23b)]()&&!this['_surprise']&&_0x1b33cb[_0x39355e(0x9b4)]()&&this[_0x39355e(0x4c9)]()):this[_0x39355e(0x4ba)]=this[_0x39355e(0xf4)](this[_0x39355e(0x4ba)],this[_0x39355e(0x89b)],_0x4651e2,_0x47b265,_0x4bc2ae):this[_0x39355e(0x4ba)]=(this[_0x39355e(0x4ba)]*(_0x4651e2-0x1)+this['_targetFloatHeight'])/_0x4651e2;this[_0x39355e(0x841)]--;if(this[_0x39355e(0x841)]<=0x0)this['onFloatEnd']();},Sprite_Battler['prototype'][_0x3237d7(0x3c1)]=function(){const _0x1d4edd=_0x3237d7;this[_0x1d4edd(0x4ba)]=this[_0x1d4edd(0x89b)];},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xa78)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler['prototype'][_0x3237d7(0x6d7)]=function(_0x126873,_0x2fe359){const _0x29eefe=_0x3237d7;if(!this[_0x29eefe(0x1ac)]())return;if(_0x2fe359<=0x0)return;this[_0x29eefe(0x400)]=_0x126873,this[_0x29eefe(0x527)]=_0x2fe359,this[_0x29eefe(0x2f2)]=_0x2fe359;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xb54)]=function(){const _0x34a08d=_0x3237d7;if(this[_0x34a08d(0x527)]<=0x0)return;const _0x28b75c=this[_0x34a08d(0x2f2)]-this[_0x34a08d(0x527)],_0x33e399=this['_jumpWholeDuration']/0x2,_0x345148=this[_0x34a08d(0x400)],_0x406a03=-_0x345148/Math[_0x34a08d(0x280)](_0x33e399,0x2);this[_0x34a08d(0x7a4)]=_0x406a03*Math[_0x34a08d(0x280)](_0x28b75c-_0x33e399,0x2)+_0x345148,this[_0x34a08d(0x527)]--;if(this[_0x34a08d(0x527)]<=0x0)return this[_0x34a08d(0x5a5)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x5a5)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler['prototype'][_0x3237d7(0x294)]=function(){const _0x1cb565=_0x3237d7;return this[_0x1cb565(0x527)]>0x0;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xa39)]=function(_0x1eac3c,_0x2a249c,_0x2aa873){const _0xd113c=_0x3237d7;if(this[_0xd113c(0x799)]===_0x1eac3c)return;this[_0xd113c(0x799)]=_0x1eac3c,this['_opacityDuration']=_0x2a249c,this[_0xd113c(0x869)]=_0x2a249c,this[_0xd113c(0x2e8)]=_0x2aa873||'Linear';if(_0x2a249c<=0x0)this[_0xd113c(0x61e)]=_0x1eac3c;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xa9)]=function(){const _0x2fe7fa=_0x3237d7;if(this[_0x2fe7fa(0x607)][_0x2fe7fa(0x444)]===_0x2fe7fa(0xaf2))return;if(this[_0x2fe7fa(0x3be)]<=0x0)return;const _0x544bff=this['_opacityDuration'],_0x2adf32=this[_0x2fe7fa(0x869)],_0x36418b=this[_0x2fe7fa(0x2e8)];if(Imported[_0x2fe7fa(0x38d)]){if('udLLd'===_0x2fe7fa(0x229))this[_0x2fe7fa(0x61e)]=this[_0x2fe7fa(0xf4)](this[_0x2fe7fa(0x61e)],this[_0x2fe7fa(0x799)],_0x544bff,_0x2adf32,_0x36418b);else return _0x38ad42['aliveMembers']();}else _0x2fe7fa(0x494)!==_0x2fe7fa(0x494)?(_0x27fcf8['BattleCore'][_0x2fe7fa(0x1d1)]&&_0x548a30[_0x2fe7fa(0xa4)][_0x2fe7fa(0x1d1)][_0x2fe7fa(0x4db)](this,_0x211b27),_0x1b73f0[_0x2fe7fa(0xa4)][_0x2fe7fa(0xcb)](_0x2463c9)):this[_0x2fe7fa(0x61e)]=(this[_0x2fe7fa(0x61e)]*(_0x544bff-0x1)+this['_targetOpacity'])/_0x544bff;this[_0x2fe7fa(0x3be)]--;if(this[_0x2fe7fa(0x3be)]<=0x0)this[_0x2fe7fa(0x740)]();},Sprite_Battler[_0x3237d7(0x735)]['onOpacityEnd']=function(){const _0x2dd9f1=_0x3237d7;this[_0x2dd9f1(0x61e)]=this[_0x2dd9f1(0x799)];},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x816)]=function(){const _0x49b4dc=_0x3237d7;return this[_0x49b4dc(0x3be)]>0x0;},Sprite_Battler['prototype'][_0x3237d7(0x800)]=function(){const _0x4e8aaa=_0x3237d7;this[_0x4e8aaa(0x1b0)]['visible']=this['_battler'][_0x4e8aaa(0x9f5)](),this[_0x4e8aaa(0xa54)]();},Sprite_Battler[_0x3237d7(0x735)]['updateShadowPosition']=function(){const _0x39658f=_0x3237d7;if(!this[_0x39658f(0x1b0)])return;this[_0x39658f(0x1b0)]['y']=this[_0x39658f(0x9ed)]-this['y']-0x2;},Sprite_Battler[_0x3237d7(0x735)]['updateShadowScale']=function(){const _0xdb3d2d=_0x3237d7;if(!this[_0xdb3d2d(0x820)])return;this[_0xdb3d2d(0x84c)]=this[_0xdb3d2d(0x820)][_0xdb3d2d(0x6c6)](),this['_shadowScaleY']=this[_0xdb3d2d(0x820)][_0xdb3d2d(0xb1a)]();},Game_BattlerBase[_0x3237d7(0x735)]['battlerShadowScaleX']=function(){const _0x317ec5=_0x3237d7,_0x2e519a=this[_0x317ec5(0x5ef)]()?this['actor']():this[_0x317ec5(0x9df)]();if(_0x2e519a){if('tKDBm'===_0x317ec5(0xaca))_0x2e1ec7[_0x317ec5(0xa4)][_0x317ec5(0x250)][_0x317ec5(0x4db)](this),this[_0x317ec5(0x5e2)]();else{const _0x5e3c9d=_0x2e519a['note'];if(_0x5e3c9d[_0x317ec5(0x453)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i)){if(_0x317ec5(0x617)!=='hsqPx')return Number(RegExp['$1'])*0.01;else{const _0xc36f1d=_0x4dcbbc[_0x317ec5(0xa4)][_0x317ec5(0x98d)]['BattleLog'];_0xc36f1d[_0x317ec5(0x41d)]&&this[_0x317ec5(0x857)](_0x317ec5(0x43b),_0x317ec5(0x74e)[_0x317ec5(0x117)](_0x22547c[_0x317ec5(0x439)](_0x51f5b8)));if(_0x506847[_0x317ec5(0x3e6)](_0x4d2657)){if(_0xc36f1d['ActionSkillMsg1'])this[_0x317ec5(0x64d)](_0x56277a['message1'],_0x2800da,_0x3314dc);if(_0xc36f1d[_0x317ec5(0x46d)])this['displayItemMessage'](_0x516488[_0x317ec5(0x83b)],_0x529be7,_0x567822);}else{if(_0xc36f1d['ActionItemMsg'])this[_0x317ec5(0x64d)](_0x43c5ee[_0x317ec5(0x554)],_0x4f42ea,_0x2c0ec5);}}}else{if(_0x5e3c9d[_0x317ec5(0x453)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x317ec5(0xaa9)==='blevW')this['addSkillCommands']();else return Number(RegExp['$1'])||0x0;}}}}return 0x1;},Game_BattlerBase[_0x3237d7(0x735)][_0x3237d7(0xb1a)]=function(){const _0x15a46c=_0x3237d7,_0x1e4911=this['isActor']()?this[_0x15a46c(0x5f9)]():this[_0x15a46c(0x9df)]();if(_0x1e4911){const _0x501535=_0x1e4911[_0x15a46c(0x4fe)];if(_0x501535[_0x15a46c(0x453)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x501535['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xac0)]=function(){const _0x6b26a4=_0x3237d7;if(this[_0x6b26a4(0x607)]===Sprite_SvEnemy)return;this[_0x6b26a4(0x14a)](),this[_0x6b26a4(0x64c)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x64c)]=function(){const _0x4d74c5=_0x3237d7,_0x5863b4=this['_distortionSprite'];if(_0x5863b4){if('wENiu'===_0x4d74c5(0x79b)){const _0x8941f1=this['weapons'](),_0x3100a2=_0x8941f1[0x0]?_0x8941f1[0x0]['wtypeId']:0x0;return _0x225e37['attackMotions'][_0x3100a2];}else _0x5863b4[_0x4d74c5(0x845)]['x']=this[_0x4d74c5(0x708)](),_0x5863b4[_0x4d74c5(0x845)]['y']=this[_0x4d74c5(0xde)]();}},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x708)]=function(){const _0x8e1944=_0x3237d7;let _0x2a0ee4=0x1;return _0x2a0ee4*=this[_0x8e1944(0x458)],_0x2a0ee4*=this['_growX'],_0x2a0ee4;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xde)]=function(){const _0x1433b2=_0x3237d7;return 0x1*this[_0x1433b2(0x659)];},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x1ee)]=function(){const _0x478c5e=_0x3237d7;return this[_0x478c5e(0xa28)]*this[_0x478c5e(0x708)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x21c)]=function(){const _0x37dee8=_0x3237d7;return this[_0x37dee8(0x766)]*this[_0x37dee8(0xde)]();},Sprite_Battler['prototype'][_0x3237d7(0x8c3)]=function(_0x49d3c5,_0x389375,_0x598663,_0x214b5f){const _0x4104d3=_0x3237d7;if(!this[_0x4104d3(0x1ac)]())return;if(!this[_0x4104d3(0x342)])return;if(this[_0x4104d3(0x35a)]===_0x49d3c5&&this['_targetGrowY']===_0x389375)return;this[_0x4104d3(0x35a)]=_0x49d3c5,this[_0x4104d3(0x853)]=_0x389375,this[_0x4104d3(0x7bf)]=_0x598663,this['_growWholeDuration']=_0x598663,this[_0x4104d3(0x4eb)]=_0x214b5f||'Linear',_0x598663<=0x0&&(this[_0x4104d3(0x106)]=this['_targetGrowX'],this[_0x4104d3(0x659)]=this[_0x4104d3(0x853)]);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x14a)]=function(){const _0x302597=_0x3237d7;if(this[_0x302597(0x7bf)]<=0x0)return;if(!this[_0x302597(0x342)])return;const _0x35b794=this['_growDuration'],_0x4b9529=this[_0x302597(0xfd)],_0x5e9852=this[_0x302597(0x4eb)];Imported[_0x302597(0x38d)]?(this['_growX']=this[_0x302597(0xf4)](this['_growX'],this[_0x302597(0x35a)],_0x35b794,_0x4b9529,_0x5e9852),this[_0x302597(0x659)]=this[_0x302597(0xf4)](this[_0x302597(0x659)],this[_0x302597(0x853)],_0x35b794,_0x4b9529,_0x5e9852)):(this[_0x302597(0x106)]=(this[_0x302597(0x106)]*(_0x35b794-0x1)+this['_targetGrowX'])/_0x35b794,this[_0x302597(0x659)]=(this[_0x302597(0x659)]*(_0x35b794-0x1)+this[_0x302597(0x853)])/_0x35b794);this[_0x302597(0x7bf)]--;if(this['_growDuration']<=0x0)this[_0x302597(0xb03)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xb03)]=function(){const _0x5747c8=_0x3237d7;this[_0x5747c8(0x106)]=this['_targetGrowX'],this[_0x5747c8(0x659)]=this[_0x5747c8(0x853)];},Sprite_Battler[_0x3237d7(0x735)]['isGrowing']=function(){const _0x4175f0=_0x3237d7;return this[_0x4175f0(0x7bf)]>0x0;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x70e)]=function(_0x37f91c,_0x33c86f,_0x442ca3,_0x2a5861){const _0xf691a9=_0x3237d7;if(!this['canMove']())return;if(!this[_0xf691a9(0x342)])return;if(this['_targetSkewX']===_0x37f91c&&this[_0xf691a9(0x205)]===_0x33c86f)return;this['_targetSkewX']=_0x37f91c,this[_0xf691a9(0x205)]=_0x33c86f,this['_skewDuration']=_0x442ca3,this['_skewWholeDuration']=_0x442ca3,this['_skewEasing']=_0x2a5861||_0xf691a9(0xc6),_0x442ca3<=0x0&&(_0xf691a9(0x304)!==_0xf691a9(0x304)?this[_0xf691a9(0x898)]['x']=0x8:(this[_0xf691a9(0x342)]['skew']['x']=this[_0xf691a9(0x9a6)],this[_0xf691a9(0x342)]['skew']['y']=this[_0xf691a9(0x205)]));},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x185)]=function(){const _0x5ea8c1=_0x3237d7;if(this[_0x5ea8c1(0x8c5)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x38cd8b=this[_0x5ea8c1(0x8c5)],_0x115498=this[_0x5ea8c1(0x1e3)],_0x220fa6=this[_0x5ea8c1(0x9bf)],_0xdc8922=this[_0x5ea8c1(0x342)];if(Imported[_0x5ea8c1(0x38d)]){if(_0x5ea8c1(0x68c)!=='RVCUs')_0xdc8922['skew']['x']=this[_0x5ea8c1(0xf4)](_0xdc8922[_0x5ea8c1(0x65f)]['x'],this[_0x5ea8c1(0x9a6)],_0x38cd8b,_0x115498,_0x220fa6),_0xdc8922[_0x5ea8c1(0x65f)]['y']=this[_0x5ea8c1(0xf4)](_0xdc8922['skew']['y'],this[_0x5ea8c1(0x205)],_0x38cd8b,_0x115498,_0x220fa6);else{_0x1bb3a6[_0x5ea8c1(0xa4)][_0x5ea8c1(0xb65)][_0x5ea8c1(0x4db)](this),this[_0x5ea8c1(0x15b)]();if(this[_0x5ea8c1(0x607)]===_0x783d46)this[_0x5ea8c1(0x4ab)]();this['createDistortionSprite']();}}else _0xdc8922[_0x5ea8c1(0x65f)]['x']=(_0xdc8922[_0x5ea8c1(0x65f)]['x']*(_0x38cd8b-0x1)+this[_0x5ea8c1(0x9a6)])/_0x38cd8b,_0xdc8922['skew']['y']=(_0xdc8922[_0x5ea8c1(0x65f)]['y']*(_0x38cd8b-0x1)+this[_0x5ea8c1(0x205)])/_0x38cd8b;this[_0x5ea8c1(0x8c5)]--;if(this[_0x5ea8c1(0x8c5)]<=0x0)this[_0x5ea8c1(0x2bc)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x2bc)]=function(){const _0xb4c47f=_0x3237d7;this[_0xb4c47f(0x342)][_0xb4c47f(0x65f)]['x']=this['_targetSkewX'],this[_0xb4c47f(0x342)]['skew']['y']=this['_targetSkewY'];},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x703)]=function(){const _0x180f8d=_0x3237d7;return this[_0x180f8d(0x8c5)]>0x0;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xa86)]=function(_0x5b77f7,_0x271d82,_0x1afd9c,_0x1d77c8){const _0x4addc6=_0x3237d7;if(!this[_0x4addc6(0x1ac)]())return;if(!this['_distortionSprite'])return;if(this[_0x4addc6(0x4ee)]===_0x5b77f7)return;this[_0x4addc6(0x4ee)]=_0x5b77f7,this[_0x4addc6(0x409)]=_0x271d82,this[_0x4addc6(0x10e)]=_0x271d82,this[_0x4addc6(0xb10)]=_0x1afd9c||_0x4addc6(0xc6),this[_0x4addc6(0x163)]=_0x1d77c8,this[_0x4addc6(0x163)]===undefined&&('GYbDR'!==_0x4addc6(0x30c)?this[_0x4addc6(0x163)]=!![]:(_0x118b93=_0xa52f6d[_0x4addc6(0x7d7)](_0x1f7129),_0x2bcbed['BattleCore'][_0x4addc6(0x5d5)][_0x4addc6(0x4db)](this,_0x122aa3,_0x44a5a4,_0x52050e),_0x17a796['VisuMZ_1_ElementStatusCore']&&this[_0x4addc6(0xa20)](),this[_0x4addc6(0x41a)](),this[_0x4addc6(0xb2d)](),_0xddd9e8[_0x4addc6(0xa47)]&&this[_0x4addc6(0x58a)]())),_0x271d82<=0x0&&(this['_currentAngle']=_0x5b77f7,this[_0x4addc6(0x163)]&&(_0x4addc6(0xa17)===_0x4addc6(0x645)?this['startMotion']('abnormal'):(this[_0x4addc6(0x4ee)]=0x0,this[_0x4addc6(0x28f)]=0x0)));},Sprite_Battler['prototype'][_0x3237d7(0x4d0)]=function(){const _0x12aaf0=_0x3237d7;this['updateAngleCalculations'](),this[_0x12aaf0(0x78e)]();},Sprite_Battler['prototype'][_0x3237d7(0xa4f)]=function(){const _0xdbb32e=_0x3237d7;if(this[_0xdbb32e(0x409)]<=0x0)return;const _0x43c2ec=this['_angleDuration'],_0x19efa2=this[_0xdbb32e(0x10e)],_0x57ced2=this[_0xdbb32e(0xb10)];Imported[_0xdbb32e(0x38d)]?this['_currentAngle']=this['applyEasing'](this[_0xdbb32e(0x28f)],this[_0xdbb32e(0x4ee)],_0x43c2ec,_0x19efa2,_0x57ced2):this[_0xdbb32e(0x28f)]=(this['_currentAngle']*(_0x43c2ec-0x1)+this[_0xdbb32e(0x4ee)])/_0x43c2ec;this[_0xdbb32e(0x409)]--;if(this['_angleDuration']<=0x0)this[_0xdbb32e(0x892)]();},Sprite_Battler['prototype']['onAngleEnd']=function(){const _0x57b692=_0x3237d7;this[_0x57b692(0x28f)]=this[_0x57b692(0x4ee)];if(this['_angleRevertOnFinish']){if(_0x57b692(0x233)!==_0x57b692(0xa1a))this[_0x57b692(0x4ee)]=0x0,this[_0x57b692(0x28f)]=0x0;else{if(!_0x44bf67[_0x57b692(0x5cb)]())return;_0x1e5189[_0x57b692(0x3d3)](_0x3d68ad,_0x94cd0d);const _0x410829=_0x53b585[_0x57b692(0x968)](),_0x29ddd2=_0x231f45[_0x57b692(0xb5c)],_0x31ce56=_0x50925c[_0x57b692(0x19a)];if(!_0x410829)return;if(!_0x29ddd2)return;_0x29ddd2&&_0x29ddd2['isDead']()&&_0x31ce56['toUpperCase']()[_0x57b692(0x194)]()!==_0x57b692(0xbc)&&_0x410829[_0x57b692(0xa97)]([_0x31ce56]);}}},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x56a)]=function(){const _0x99ced7=_0x3237d7;return this[_0x99ced7(0x409)]>0x0;},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x78e)]=function(){const _0x35b617=_0x3237d7;if(!this[_0x35b617(0x342)])return;const _0x3b6e69=this[_0x35b617(0x28f)],_0x8fcb33=this[_0x35b617(0x845)]['x'],_0x5b1693=this[_0x35b617(0x820)][_0x35b617(0x5ef)]()?-0x1:0x1;this[_0x35b617(0x342)][_0x35b617(0x264)]=_0x3b6e69*_0x8fcb33*_0x5b1693;const _0x57957b=this[_0x35b617(0x342)][_0x35b617(0x845)]['y'];this['_distortionSprite']['y']=this['height']*-0.5*(0x2-_0x57957b),this[_0x35b617(0x342)]['y']=Math[_0x35b617(0x404)](this['_distortionSprite']['y']);const _0x2ea402=[this[_0x35b617(0x9be)],this[_0x35b617(0xace)],this[_0x35b617(0x4c7)]];for(const _0x2c85f5 of _0x2ea402){if(!_0x2c85f5)continue;_0x2c85f5['y']=this[_0x35b617(0x766)]*0.5;}this[_0x35b617(0x1b0)]&&(_0x35b617(0x1a7)!=='yAEdo'?this[_0x35b617(0x898)]['x']=_0x5b4026[_0x35b617(0xa28)]-(_0x4fb6ac[_0x35b617(0xa28)]-_0x5ab641[_0x35b617(0x63d)])/0x2-this[_0x35b617(0x898)][_0x35b617(0xa28)]-0x4:(this[_0x35b617(0x84c)]=this['_shadowScaleX']??0x1,this['_shadowScaleY']=this[_0x35b617(0x4a6)]??0x1,this[_0x35b617(0x1b0)]['scale']['x']=this[_0x35b617(0x342)]['scale']['x']*this[_0x35b617(0x84c)],this[_0x35b617(0x1b0)][_0x35b617(0x845)]['y']=this[_0x35b617(0x342)]['scale']['y']*this[_0x35b617(0x4a6)]));},VisuMZ['BattleCore'][_0x3237d7(0x655)]=Sprite_Actor[_0x3237d7(0x735)]['createStateSprite'],Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x717)]=function(){const _0x364e2c=_0x3237d7;VisuMZ['BattleCore']['Sprite_Actor_createStateSprite'][_0x364e2c(0x4db)](this),VisuMZ[_0x364e2c(0xa4)]['Settings'][_0x364e2c(0x3c0)][_0x364e2c(0x807)]&&this['createHpGaugeSprite']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x4e1)]=Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x30a)],Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x30a)]=function(){const _0x23be2a=_0x3237d7;VisuMZ['BattleCore'][_0x23be2a(0x98d)][_0x23be2a(0x3c0)][_0x23be2a(0x94a)]&&(_0x23be2a(0x1f6)!=='XdGSM'?this[_0x23be2a(0x20d)]():(this['_cache'][_0x23be2a(0x669)]=_0x381c8d(_0x3b7610['$1']),this[_0x23be2a(0xa2)]['svAnchorY']=_0xbfd3a9(_0x335088['$2']))),VisuMZ[_0x23be2a(0xa4)][_0x23be2a(0x4e1)]['call'](this);},Sprite_Battler['prototype']['createHpGaugeSprite']=function(){const _0x44453e=_0x3237d7;if(!ConfigManager[_0x44453e(0x59b)])return;if(this[_0x44453e(0x607)]===Sprite_SvEnemy)return;const _0x24b6a5=VisuMZ[_0x44453e(0xa4)][_0x44453e(0x98d)][_0x44453e(0x3c0)],_0x15d9a6=new Sprite_HpGauge();_0x15d9a6[_0x44453e(0xa99)]['x']=_0x24b6a5[_0x44453e(0x880)],_0x15d9a6[_0x44453e(0xa99)]['y']=_0x24b6a5[_0x44453e(0x9f1)],_0x15d9a6['scale']['x']=_0x15d9a6[_0x44453e(0x845)]['y']=_0x24b6a5[_0x44453e(0x648)],this['_hpGaugeSprite']=_0x15d9a6,this['addChild'](this[_0x44453e(0x34a)]),Spriteset_Battle['ANTI_TINT_UI']&&(_0x44453e(0x981)!==_0x44453e(0x3cb)?BattleManager[_0x44453e(0xb1d)](this['_hpGaugeSprite']):(this['_svBattlerSprite']['_stateSprite']['scale']['x']=-0x1/(this['scale']['x']||0.001),this['_svBattlerSprite']['_stateSprite']['scale']['y']=0x1/(this[_0x44453e(0x845)]['y']||0.001)));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x7b7)]=Sprite_Battler['prototype'][_0x3237d7(0x4e9)],Sprite_Battler['prototype']['setBattler']=function(_0x381f0e){const _0x5e08e7=_0x3237d7,_0x540ab6=this[_0x5e08e7(0x820)];VisuMZ[_0x5e08e7(0xa4)][_0x5e08e7(0x7b7)][_0x5e08e7(0x4db)](this,_0x381f0e),this[_0x5e08e7(0x731)](_0x381f0e);if(_0x540ab6!==_0x381f0e)this[_0x5e08e7(0x84e)]();},Sprite_Battler[_0x3237d7(0x735)]['setupHpGaugeSprite']=function(_0x4a1c47){const _0x5c9167=_0x3237d7;if(!_0x4a1c47)return;if(!this['_hpGaugeSprite'])return;if(_0x4a1c47[_0x5c9167(0x5ef)]()){}else{if(_0x4a1c47[_0x5c9167(0x8f2)]()){if(_0x5c9167(0x31b)!==_0x5c9167(0x31b))_0x47d2a6[_0x5c9167(0x5a2)](_0x53fb89[_0x5c9167(0xb45)],!![]);else{if(this[_0x5c9167(0x607)]===Sprite_SvEnemy&&!_0x4a1c47['hasSvBattler']())return;}}}this[_0x5c9167(0x34a)]['setup'](_0x4a1c47,'hp');},Sprite_Battler['prototype']['hasStaticSvBattler']=function(){const _0x30fe91=_0x3237d7;return this[_0x30fe91(0x820)]&&this['_battler'][_0x30fe91(0x272)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x16c)]=function(){const _0x4f24c0=_0x3237d7,_0x5addf2=this['_mainSprite'][_0x4f24c0(0x651)];if(!_0x5addf2)return;const _0x545688=_0x5addf2[_0x4f24c0(0xa28)];let _0x19a8a1=_0x5addf2[_0x4f24c0(0x766)];if(this[_0x4f24c0(0x820)]['isDead']()){if(this['_frame'])_0x19a8a1=Math[_0x4f24c0(0x2e0)](0x0,this[_0x4f24c0(0xb1e)][_0x4f24c0(0x766)]-0x4);}this[_0x4f24c0(0x9be)][_0x4f24c0(0x3f0)](0x0,0x0,_0x545688,_0x19a8a1),this['setFrame'](0x0,0x0,_0x545688,_0x19a8a1);},Sprite_Battler[_0x3237d7(0x735)]['updateHpGaugePosition']=function(){const _0xeb6b36=_0x3237d7;if(!this[_0xeb6b36(0x820)])return;if(!this[_0xeb6b36(0x34a)])return;const _0x8d59d0=VisuMZ['BattleCore'][_0xeb6b36(0x98d)][_0xeb6b36(0x3c0)],_0x24697a=this['_hpGaugeSprite'];_0x24697a[_0xeb6b36(0x6ad)]=this['isVisualHpGaugeDisplayed']();const _0x7cadc6=_0x8d59d0[_0xeb6b36(0x252)],_0x547311=_0x8d59d0[_0xeb6b36(0x57b)];_0x24697a['x']=_0x7cadc6,_0x24697a['x']+=this[_0xeb6b36(0x820)]['battleUIOffsetX'](),_0x24697a['y']=-this['height']+_0x547311,_0x24697a['y']+=this['_battler']['battleUIOffsetY'](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager[_0xeb6b36(0x2a7)][_0xeb6b36(0x314)]&&(_0x24697a['x']+=this['x'],_0x24697a['y']+=this['y']);},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x721)]=function(){const _0x1da13c=_0x3237d7;if(!this[_0x1da13c(0x820)])return![];if(this[_0x1da13c(0x820)][_0x1da13c(0x5ef)]())return!![];if(this[_0x1da13c(0x820)][_0x1da13c(0x595)]())return![];if(this[_0x1da13c(0x61e)]<=0x0)return![];const _0xe57b88=this[_0x1da13c(0x820)][_0x1da13c(0x9df)]()[_0x1da13c(0x4fe)];if(_0xe57b88[_0x1da13c(0x453)](/<SHOW HP GAUGE>/i))return!![];if(_0xe57b88[_0x1da13c(0x453)](/<HIDE HP GAUGE>/i))return![];const _0x4e92ce=VisuMZ[_0x1da13c(0xa4)][_0x1da13c(0x98d)][_0x1da13c(0x3c0)];if(_0x4e92ce['RequiresDefeat']){if(_0x4e92ce[_0x1da13c(0xa45)]&&BattleManager[_0x1da13c(0x6c8)]())return!![];if(this[_0x1da13c(0x820)][_0x1da13c(0x56d)])return![];return this[_0x1da13c(0x820)][_0x1da13c(0x838)]();}return!![];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x23f)]=Sprite_Battler['prototype'][_0x3237d7(0x193)],Sprite_Battler['prototype'][_0x3237d7(0x193)]=function(){const _0x24a22f=_0x3237d7;if(!this[_0x24a22f(0x820)])return![];if(this[_0x24a22f(0x9fd)]>0x0)return!![];return VisuMZ[_0x24a22f(0xa4)][_0x24a22f(0x23f)][_0x24a22f(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x51f)]=Sprite_Battler['prototype'][_0x3237d7(0x835)],Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x835)]=function(_0x4803d1,_0x12f1f3,_0x37c6ce){const _0x35c16e=_0x3237d7;if(this[_0x35c16e(0x1ac)]()){if(_0x35c16e(0x7a0)!==_0x35c16e(0x7a0)){let _0x44d5d9=[];for(const _0x5efe29 of _0x41fe47){_0x44d5d9=_0x44d5d9['concat'](_0x39bf35[_0x35c16e(0x37e)](_0x5efe29));}return _0x44d5d9[_0x35c16e(0x921)](_0x4c448c=>_0x4c448c);}else VisuMZ['BattleCore'][_0x35c16e(0x51f)][_0x35c16e(0x4db)](this,_0x4803d1,_0x12f1f3,_0x37c6ce);}},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x1ac)]=function(){const _0x298f8b=_0x3237d7;if(this[_0x298f8b(0x820)]&&this[_0x298f8b(0x820)][_0x298f8b(0x4a3)]())return![];if(this[_0x298f8b(0x820)]&&!this[_0x298f8b(0x820)][_0x298f8b(0x85e)]())return![];return $gameSystem[_0x298f8b(0x59e)]();},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0xaa5)]=function(){},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x533)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x3237d7(0x735)]['retreat']=function(){},Sprite_Battler[_0x3237d7(0x735)][_0x3237d7(0x865)]=function(){const _0x34d3ee=_0x3237d7,_0x1cffe7=VisuMZ[_0x34d3ee(0xa4)][_0x34d3ee(0x98d)][_0x34d3ee(0x4da)],_0x5bd9a1=this[_0x34d3ee(0x820)]&&this['_battler']['isActor']()?0x1:-0x1,_0x2b9168=this[_0x34d3ee(0x642)]-this[_0x34d3ee(0x7e8)]+_0x5bd9a1*_0x1cffe7[_0x34d3ee(0xb55)],_0x314288=this[_0x34d3ee(0x9ed)]-this[_0x34d3ee(0x3f3)]+_0x5bd9a1*_0x1cffe7['FlinchDistanceY'],_0x1e38a4=_0x1cffe7['FlinchDuration'];this[_0x34d3ee(0x835)](_0x2b9168,_0x314288,_0x1e38a4);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x30f)]=Sprite_Actor[_0x3237d7(0x735)]['initMembers'],Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x96b)]=function(){const _0x35ac2e=_0x3237d7;VisuMZ[_0x35ac2e(0xa4)]['Sprite_Actor_initMembers'][_0x35ac2e(0x4db)](this),this[_0x35ac2e(0x8aa)]();},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x85d)]=function(){return this['_distortionSprite']||this['_mainSprite']||this;},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x2e5)]=Sprite_Actor[_0x3237d7(0x735)]['moveToStartPosition'],Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x32b)]=function(){},Sprite_Actor['prototype']['moveToStartPositionBattleCore']=function(_0x513ffc){const _0x4d21e3=_0x3237d7;if(SceneManager[_0x4d21e3(0x5a8)]())return;if(!_0x513ffc)return;if(!_0x513ffc[_0x4d21e3(0x1ac)]())return;VisuMZ[_0x4d21e3(0xa4)][_0x4d21e3(0x2e5)][_0x4d21e3(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x3237d7(0x735)]['setActorHome'],Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x326)]=function(_0x402964){const _0x218430=_0x3237d7;VisuMZ[_0x218430(0xa4)][_0x218430(0x98d)]['Actor']['HomePosJS']?VisuMZ[_0x218430(0xa4)][_0x218430(0x98d)][_0x218430(0x4da)]['HomePosJS'][_0x218430(0x4db)](this,_0x402964):VisuMZ[_0x218430(0xa4)][_0x218430(0x627)][_0x218430(0x4db)](this,_0x402964);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x1a6)]=Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x4e9)],Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x4e9)]=function(_0x5f6b06){const _0x387d8e=_0x3237d7;VisuMZ['BattleCore']['Sprite_Actor_setBattler']['call'](this,_0x5f6b06),this[_0x387d8e(0x67c)](_0x5f6b06);},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x67c)]=function(_0x34d845){const _0x557cf5=_0x3237d7;if(!_0x34d845)return;if(!this[_0x557cf5(0x9be)])return;this[_0x557cf5(0x9be)][_0x557cf5(0xa99)]['x']=this[_0x557cf5(0x1e4)][_0x557cf5(0x357)](),this[_0x557cf5(0x9be)][_0x557cf5(0xa99)]['y']=this[_0x557cf5(0x1e4)]['svBattlerAnchorY'](),this[_0x557cf5(0x621)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x240)]=Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x4dc)],Sprite_Actor['prototype'][_0x3237d7(0x4dc)]=function(){const _0x313797=_0x3237d7;VisuMZ[_0x313797(0xa4)][_0x313797(0x240)][_0x313797(0x4db)](this),this[_0x313797(0x1e4)]&&(this[_0x313797(0x307)](),this[_0x313797(0x392)]());},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x9ac)]=Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x877)],Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x877)]=function(){const _0x29351d=_0x3237d7;VisuMZ[_0x29351d(0xa4)][_0x29351d(0x9ac)][_0x29351d(0x4db)](this),this['_mainSprite']&&this['_mainSprite'][_0x29351d(0x651)]&&this[_0x29351d(0x820)]&&(this[_0x29351d(0x9be)]['bitmap'][_0x29351d(0x133)]!==this[_0x29351d(0x820)][_0x29351d(0x8ab)]()&&(this[_0x29351d(0x9be)][_0x29351d(0x651)][_0x29351d(0x133)]=this[_0x29351d(0x820)][_0x29351d(0x8ab)]()));},VisuMZ[_0x3237d7(0xa4)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x800)],Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x800)]=function(){const _0x47dd22=_0x3237d7;VisuMZ[_0x47dd22(0xa4)][_0x47dd22(0x559)][_0x47dd22(0x4db)](this),this[_0x47dd22(0x95c)]();},Sprite_Actor['prototype'][_0x3237d7(0x95c)]=function(){const _0x550143=_0x3237d7;if(!this[_0x550143(0x9be)])return;if(!this[_0x550143(0x1b0)])return;this[_0x550143(0x621)](),this[_0x550143(0xa54)]();},Sprite_Actor[_0x3237d7(0x735)]['updateStateSprite']=function(){const _0x5e1c46=_0x3237d7;this[_0x5e1c46(0xbf)][_0x5e1c46(0x845)]['x']=0x1/(this['scale']['x']||0.001),this['_stateSprite'][_0x5e1c46(0x845)]['y']=0x1/(this[_0x5e1c46(0x845)]['y']||0.001);},Sprite_Actor['prototype']['updateStyleOpacity']=function(){const _0x26bc01=_0x3237d7;if(!$gameSystem[_0x26bc01(0x59e)]()&&this[_0x26bc01(0x607)]===Sprite_Actor){const _0xfa9b53=Scene_Battle[_0x26bc01(0x735)][_0x26bc01(0x457)]();['default','list',_0x26bc01(0x195),_0x26bc01(0xa93)][_0x26bc01(0x231)](_0xfa9b53)&&(this[_0x26bc01(0x61e)]=0x0);}},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x537)]=function(){const _0x349cae=_0x3237d7,_0x4de1d2=this[_0x349cae(0x1e4)];if(_0x4de1d2){const _0x2b5020=_0x4de1d2[_0x349cae(0x74a)]();if(_0x4de1d2[_0x349cae(0xb53)]()||_0x4de1d2[_0x349cae(0x3d4)]())this['startMotion'](_0x349cae(0x33a));else{if(_0x2b5020===0x3){if(_0x349cae(0x535)==='wXenQ')this[_0x349cae(0x856)](_0x349cae(0x979));else return this[_0x349cae(0x5ec)](_0x59a2f7);}else{if(_0x2b5020===0x2)_0x349cae(0x720)!==_0x349cae(0x1c6)?this[_0x349cae(0x856)](_0x349cae(0x543)):(_0x824b90['BattleCore'][_0x349cae(0x7ef)]['call'](this,_0x9e4c3c,_0x36d2d6),this[_0x349cae(0x4a1)]());else{if(this['forceEscapeSprite'])this[_0x349cae(0x856)](_0x349cae(0x11c));else{if(_0x4de1d2['isCharging']())this[_0x349cae(0x856)](_0x349cae(0x6ca));else{if(_0x4de1d2['isChanting']()){if(_0x349cae(0xad4)!==_0x349cae(0x4ca))this[_0x349cae(0x856)]('chant');else return[_0x1be0e0];}else{if(_0x4de1d2[_0x349cae(0x7d1)]()||_0x4de1d2[_0x349cae(0x90d)]())this[_0x349cae(0x856)](_0x349cae(0x77d));else{if(_0x2b5020===0x1)this[_0x349cae(0x856)](_0x349cae(0x556));else{if(_0x4de1d2[_0x349cae(0x6c2)]()){if('soKoA'==='CthEo')return _0x2e6b4a['BattleCore']['Settings'][_0x349cae(0x4c5)]['BattleCmdList'];else this[_0x349cae(0x856)](_0x349cae(0x9d3));}else{if(_0x4de1d2[_0x349cae(0x732)]())this[_0x349cae(0x856)]('walk');else _0x4de1d2[_0x349cae(0x139)]()?this[_0x349cae(0x856)]('wait'):this[_0x349cae(0x856)](_0x349cae(0x33a));}}}}}}}}}}},Sprite_Actor[_0x3237d7(0x735)]['retreat']=function(){const _0x5968c0=0xa,_0xe26332=0x12c*_0x5968c0,_0x4274a8=0x1e*_0x5968c0;this['startMove'](_0xe26332,0x0,_0x4274a8);},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x553)]=function(){const _0x5f0a79=_0x3237d7;Sprite_Battler[_0x5f0a79(0x735)][_0x5f0a79(0x553)]['call'](this);},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x30b)]=function(){const _0x53bc58=_0x3237d7;return Sprite_Battler[_0x53bc58(0xa1)];},Sprite_Weapon[_0x3237d7(0x735)][_0x3237d7(0xb3f)]=function(){const _0x3dc3a8=_0x3237d7;return Sprite_Battler[_0x3dc3a8(0xa1)];},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x604)]=function(){},Sprite_Actor['prototype'][_0x3237d7(0x2d5)]=function(){},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0xad2)]=function(){const _0xe1bd00=_0x3237d7;if(this[_0xe1bd00(0x4cf)]&&++this[_0xe1bd00(0x580)]>=this[_0xe1bd00(0x30b)]()){if('fMkYs'!==_0xe1bd00(0x775)){let _0x4c2a51=_0xe1bd00(0x330);if(this[_0xe1bd00(0x94e)](_0x4c2a51))return this[_0xe1bd00(0xa2)][_0x4c2a51];return this['_cache'][_0x4c2a51]=this[_0xe1bd00(0x389)](this['enemy']()),this[_0xe1bd00(0xa2)][_0x4c2a51];}else{if(this[_0xe1bd00(0x4cf)][_0xe1bd00(0x334)])_0xe1bd00(0x4a5)===_0xe1bd00(0x4a5)?this[_0xe1bd00(0x4dd)]=(this['_pattern']+0x1)%0x4:(this[_0xe1bd00(0x21e)](),this[_0xe1bd00(0x81b)](),this[_0xe1bd00(0x220)](),this['createDamageContainer'](),this[_0xe1bd00(0xcd)]());else this[_0xe1bd00(0x4dd)]<0x2?this[_0xe1bd00(0x4dd)]++:this[_0xe1bd00(0x537)]();this[_0xe1bd00(0x580)]=0x0;}}},Sprite_Actor['prototype'][_0x3237d7(0x158)]=function(_0x35bbe7){const _0x2105bd=_0x3237d7;if(_0x35bbe7===_0x2105bd(0xb6))this[_0x2105bd(0x52b)]=!![];if(this[_0x2105bd(0x820)]&&this[_0x2105bd(0x820)]['isDead']()){if(_0x2105bd(0x3e3)===_0x2105bd(0x3e3)){this[_0x2105bd(0x4cf)]=Sprite_Actor[_0x2105bd(0x3e1)][_0x2105bd(0x979)];return;}else{const _0x15cc3e=_0x1229e3(_0x20243f['$1']);_0x15cc3e!==_0x3f0542[_0x49488e][_0x2105bd(0x4d8)]&&(_0x25699a(_0x2105bd(0x84d)['format'](_0x534d89,_0x15cc3e)),_0x1a1237[_0x2105bd(0x110)]());}}const _0x99ec61=Sprite_Actor[_0x2105bd(0x3e1)][_0x35bbe7];this['_motion']=_0x99ec61,this[_0x2105bd(0x580)]=0x0,this[_0x2105bd(0x4dd)]=0x0;},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x92)]=function(_0x59876f){const _0x23ddec=_0x3237d7;if(this[_0x23ddec(0x272)]())return;this['adjustWeaponSpriteOffset'](),this[_0x23ddec(0x5cc)][_0x23ddec(0x56c)](_0x59876f),this[_0x23ddec(0x1e4)][_0x23ddec(0x3f7)]();},Sprite_Actor['prototype'][_0x3237d7(0x896)]=function(){const _0x54e0a7=_0x3237d7;let _0x330a9d=-0x10,_0x1941bf=this[_0x54e0a7(0x766)]*0.5;const _0x38b4ab=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x199d0a=this[_0x54e0a7(0x820)][_0x54e0a7(0x2d6)]()[_0x54e0a7(0x1e0)](_0x1087c0=>_0x1087c0&&_0x1087c0[_0x54e0a7(0x4fe)][_0x54e0a7(0x453)](_0x38b4ab)?Number(RegExp['$1']):0x0),_0x4a52d2=this[_0x54e0a7(0x820)]['traitObjects']()[_0x54e0a7(0x1e0)](_0x4baf3c=>_0x4baf3c&&_0x4baf3c['note']['match'](_0x38b4ab)?Number(RegExp['$2']):0x0);_0x330a9d=_0x199d0a[_0x54e0a7(0x53f)]((_0x5e230f,_0x27908f)=>_0x5e230f+_0x27908f,_0x330a9d),_0x1941bf=_0x4a52d2['reduce']((_0x5796e9,_0x5ee288)=>_0x5796e9+_0x5ee288,_0x1941bf),this['_weaponSprite']['x']=_0x330a9d,this[_0x54e0a7(0x5cc)]['y']=_0x1941bf,this['_weaponSprite'][_0x54e0a7(0x4dc)]();},Sprite_Weapon[_0x3237d7(0x735)]['setup']=function(_0x5b4bd5){const _0x55cdf8=_0x3237d7;this['_weaponImageId']=_0x5b4bd5,this[_0x55cdf8(0x55d)]=-0x1,this['_pattern']=0x0,this[_0x55cdf8(0xa56)](),this[_0x55cdf8(0x1bc)]();},Sprite_Actor['prototype']['updateTargetPosition']=function(){},Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0xaa5)]=function(){const _0x5a072d=_0x3237d7,_0x193381=VisuMZ[_0x5a072d(0xa4)]['Settings']['ActionSequence'],_0x11a1d5=_0x193381[_0x5a072d(0x87e)],_0x3bf50b=_0x193381['StepDistanceY'],_0x4c8997=_0x193381[_0x5a072d(0x2ef)];this['startMove'](-_0x11a1d5,-_0x3bf50b,_0x4c8997);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x572)]=Sprite_Actor[_0x3237d7(0x735)]['updateFrame'],Sprite_Actor[_0x3237d7(0x735)][_0x3237d7(0x1bc)]=function(){const _0x12ce8d=_0x3237d7;this[_0x12ce8d(0x272)]()?'CgQPi'!==_0x12ce8d(0x365)?_0x573870[_0x12ce8d(0x788)](_0x30753d[_0x12ce8d(0x380)]):this['updateStaticSvBattlerFrames']():_0x12ce8d(0x887)!=='NCDDg'?_0x163b42['command119']([_0x59ead0]):(this[_0x12ce8d(0x674)](),VisuMZ['BattleCore'][_0x12ce8d(0x572)][_0x12ce8d(0x4db)](this));},Sprite_Actor[_0x3237d7(0x735)]['applyFreezeMotionFrames']=function(){const _0x2a78f2=_0x3237d7;if(this[_0x2a78f2(0x820)]&&this[_0x2a78f2(0x820)]['_freezeMotionData']){const _0x5bb77e=this[_0x2a78f2(0x820)][_0x2a78f2(0x217)];this['_motion']=Sprite_Actor['MOTIONS'][_0x5bb77e['motionType']],this[_0x2a78f2(0x4dd)]=_0x5bb77e[_0x2a78f2(0x4ef)];const _0x5900e9=this[_0x2a78f2(0x5cc)];_0x5900e9[_0x2a78f2(0xb37)](_0x5bb77e['weaponImageId'],_0x5bb77e['pattern']),this[_0x2a78f2(0x896)]();}},Sprite_Weapon['prototype'][_0x3237d7(0xb37)]=function(_0xddcb35,_0x1c6b3a){const _0x53a53b=_0x3237d7;this[_0x53a53b(0x263)]=_0xddcb35,this[_0x53a53b(0x55d)]=-Infinity,this[_0x53a53b(0x4dd)]=_0x1c6b3a,this['loadBitmap'](),this[_0x53a53b(0x1bc)]();},Sprite_Enemy['prototype'][_0x3237d7(0x96b)]=function(){const _0x33b359=_0x3237d7;Sprite_Battler['prototype'][_0x33b359(0x96b)][_0x33b359(0x4db)](this),this[_0x33b359(0xb32)]=null,this[_0x33b359(0x98c)]=![],this['_battlerName']='',this[_0x33b359(0x19b)]=0x0,this['_effectType']=null,this[_0x33b359(0xb33)]=0x0,this[_0x33b359(0x42e)]=0x0,this[_0x33b359(0x22c)](),this[_0x33b359(0x30a)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xb2b)]=Sprite_Enemy[_0x3237d7(0x735)]['update'],Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x4dc)]=function(){const _0x568e27=_0x3237d7;VisuMZ[_0x568e27(0xa4)][_0x568e27(0xb2b)][_0x568e27(0x4db)](this),this[_0x568e27(0x621)]();},Sprite_Enemy[_0x3237d7(0x735)]['createMainSprite']=function(){const _0x5a2aa3=_0x3237d7;this['_mainSprite']=new Sprite(),this['_mainSprite'][_0x5a2aa3(0xa99)]['x']=0.5,this['_mainSprite'][_0x5a2aa3(0xa99)]['y']=0x1,this[_0x5a2aa3(0x70d)](this['_mainSprite']),this['attachSpritesToDistortionSprite']();},Sprite_Enemy['prototype'][_0x3237d7(0x85d)]=function(){const _0x5d8b55=_0x3237d7;return this['_distortionSprite']||this[_0x5d8b55(0x9be)]||this;},Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0xa56)]=function(_0x5792d5){const _0x4ee48c=_0x3237d7;this[_0x4ee48c(0x651)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){if('hyQXh'!==_0x4ee48c(0x2d7)){const _0x158f9d=this[_0x4ee48c(0xb32)]['svBattlerData']();this['bitmap']=new Bitmap(_0x158f9d[_0x4ee48c(0xa28)],_0x158f9d[_0x4ee48c(0x766)]),this[_0x4ee48c(0x9be)]['bitmap']=new Bitmap(0x1,0x1);}else return _0xb7d680[_0x4ee48c(0x6e1)]();}else $gameSystem[_0x4ee48c(0x59e)]()?(this[_0x4ee48c(0x9be)][_0x4ee48c(0x651)]=ImageManager[_0x4ee48c(0x303)](_0x5792d5),this[_0x4ee48c(0x9be)][_0x4ee48c(0x651)]['addLoadListener'](this[_0x4ee48c(0x57a)][_0x4ee48c(0x114)](this))):_0x4ee48c(0xb26)!==_0x4ee48c(0xb26)?_0x1a3d79[_0x4ee48c(0xa4)][_0x4ee48c(0x273)][_0x4ee48c(0x4db)](this,_0x3102a0):(this[_0x4ee48c(0x9be)][_0x4ee48c(0x651)]=ImageManager[_0x4ee48c(0x8a1)](_0x5792d5),this[_0x4ee48c(0x9be)][_0x4ee48c(0x651)][_0x4ee48c(0x8fc)](this[_0x4ee48c(0x57a)][_0x4ee48c(0x114)](this)));},Sprite_Enemy['prototype']['createEmptyBitmap']=function(){const _0x37e961=_0x3237d7,_0x9357d9=this[_0x37e961(0x9be)]['bitmap'];_0x9357d9&&(this['bitmap']=new Bitmap(_0x9357d9['width'],_0x9357d9[_0x37e961(0x766)]));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x2f5)]=Sprite_Enemy[_0x3237d7(0x735)]['setHue'],Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x402)]=function(_0x389dd1){const _0xef4b82=_0x3237d7;this[_0xef4b82(0x9be)]&&this[_0xef4b82(0x9be)]['setHue'](_0x389dd1);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x867)]=Sprite_Enemy[_0x3237d7(0x735)]['initVisibility'],Sprite_Enemy['prototype']['initVisibility']=function(){const _0x15a88c=_0x3237d7;this[_0x15a88c(0x40f)]()?'FEEsB'!==_0x15a88c(0x140)?(_0x17565b['BattleCore'][_0x15a88c(0x1a6)][_0x15a88c(0x4db)](this,_0x3747ca),this['setBattlerBattleCore'](_0x49f3d1)):VisuMZ['BattleCore'][_0x15a88c(0x867)][_0x15a88c(0x4db)](this):_0x15a88c(0x7eb)!=='fPmIn'?(this[_0x15a88c(0x2d2)]=this['_onceParallelInterpreters']||[],this[_0x15a88c(0x2d2)][_0x15a88c(0x28b)](_0x96a3a1)):(this[_0x15a88c(0x98c)]=!this[_0x15a88c(0xb32)][_0x15a88c(0x595)](),!this[_0x15a88c(0x98c)]&&(this[_0x15a88c(0x61e)]=0x0));},VisuMZ[_0x3237d7(0xa4)]['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x81c)],Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x81c)]=function(){const _0x1ff181=_0x3237d7;if(this[_0x1ff181(0x40f)]())VisuMZ[_0x1ff181(0xa4)][_0x1ff181(0x73c)]['call'](this);},Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x1bc)]=function(){const _0x500adb=_0x3237d7;Sprite_Battler[_0x500adb(0x735)][_0x500adb(0x1bc)]['call'](this);const _0x17ec28=this[_0x500adb(0x85d)]()||this;if(!_0x17ec28)return;!_0x17ec28[_0x500adb(0x651)]&&(_0x17ec28['bitmap']=new Bitmap(this[_0x500adb(0xa28)],this[_0x500adb(0x766)])),this[_0x500adb(0x28d)]===_0x500adb(0xab6)?_0x500adb(0x182)!==_0x500adb(0x2b6)?this[_0x500adb(0x9be)]['setFrame'](0x0,0x0,this[_0x500adb(0x9be)][_0x500adb(0xa28)],this['_effectDuration']):this[_0x500adb(0x4ba)]=(this[_0x500adb(0x4ba)]*(_0x13cfc7-0x1)+this['_targetFloatHeight'])/_0x1b017b:_0x17ec28[_0x500adb(0x3f0)](0x0,0x0,_0x17ec28[_0x500adb(0x651)][_0x500adb(0xa28)],this['bitmap'][_0x500adb(0x766)]);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x8d6)]=Sprite_Enemy[_0x3237d7(0x735)]['updateBossCollapse'],Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x3a3)]=function(){const _0x14ea4f=_0x3237d7;if(this[_0x14ea4f(0x40f)]())VisuMZ[_0x14ea4f(0xa4)]['Sprite_Enemy_updateBossCollapse'][_0x14ea4f(0x4db)](this);},Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x193)]=function(){const _0x66b805=_0x3237d7;return Sprite_Battler[_0x66b805(0x735)][_0x66b805(0x193)][_0x66b805(0x4db)](this);},VisuMZ['BattleCore'][_0x3237d7(0x71f)]=Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x307)],Sprite_Enemy['prototype']['updateStateSprite']=function(){const _0x35d138=_0x3237d7;VisuMZ[_0x35d138(0xa4)][_0x35d138(0x71f)][_0x35d138(0x4db)](this),this[_0x35d138(0x955)]();},Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x955)]=function(){const _0x54ce73=_0x3237d7,_0x56db9e=VisuMZ[_0x54ce73(0xa4)][_0x54ce73(0x98d)][_0x54ce73(0x754)];if(_0x56db9e['NameAttachStateIcon']&&!_0x56db9e['NameLegacy']){this[_0x54ce73(0x216)][_0x54ce73(0x61e)]=0x0;return;}this[_0x54ce73(0x216)]['x']=0x0,this['_stateIconSprite']['x']+=this[_0x54ce73(0x820)][_0x54ce73(0x330)](),this[_0x54ce73(0x216)]['y']=-this[_0x54ce73(0x651)][_0x54ce73(0x766)]-this[_0x54ce73(0x216)][_0x54ce73(0x766)]-0x4,this[_0x54ce73(0x216)]['y']+=this[_0x54ce73(0x820)][_0x54ce73(0x41e)](),this[_0x54ce73(0x216)][_0x54ce73(0x845)]['x']=0x1/(this[_0x54ce73(0x845)]['x']||0.001),this[_0x54ce73(0x216)][_0x54ce73(0x845)]['y']=0x1/(this[_0x54ce73(0x845)]['y']||0.001),this['hasSvBattler']()&&(this[_0x54ce73(0xace)][_0x54ce73(0xbf)][_0x54ce73(0x845)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x54ce73(0xace)][_0x54ce73(0xbf)][_0x54ce73(0x845)]['y']=0x1/(this['scale']['y']||0.001));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x4d2)]=Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x4e9)],Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x4e9)]=function(_0x2f8940){const _0x20177e=_0x3237d7;VisuMZ['BattleCore']['Sprite_Enemy_setBattler']['call'](this,_0x2f8940),this[_0x20177e(0x236)](_0x2f8940);},Sprite_Enemy['prototype'][_0x3237d7(0x236)]=function(_0x426c3c){const _0x27c44f=_0x3237d7;!this['_svBattlerSprite']&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x426c3c),this[_0x27c44f(0x8aa)]()),this[_0x27c44f(0xace)]['setBattler'](_0x426c3c);},Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x9f5)]=function(){const _0x1bc2f6=_0x3237d7;return this[_0x1bc2f6(0xb32)]&&this[_0x1bc2f6(0xb32)][_0x1bc2f6(0x9f5)]();},Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x40f)]=function(){const _0x34cc6f=_0x3237d7;if(this[_0x34cc6f(0x9f5)]()){if(_0x34cc6f(0x744)===_0x34cc6f(0x744))return this[_0x34cc6f(0xb32)][_0x34cc6f(0x40f)]();else{_0x38779d-=_0x3c58ce[_0x46c487];if(_0x39006f<=0x0)return _0x13027e;}}else return!![];},Sprite_Enemy[_0x3237d7(0x735)]['refreshMotion']=function(){const _0x2ca866=_0x3237d7;this[_0x2ca866(0x9f5)]()&&this[_0x2ca866(0xace)][_0x2ca866(0x537)]();},Sprite_Enemy['prototype'][_0x3237d7(0x158)]=function(_0x2698fb){const _0x3ee5f2=_0x3237d7;if(this[_0x3ee5f2(0x9f5)]())this['_svBattlerSprite'][_0x3ee5f2(0x158)](_0x2698fb);},Sprite_Enemy[_0x3237d7(0x735)][_0x3237d7(0x92)]=function(_0x41fe0c){const _0x679a1b=_0x3237d7;if(this[_0x679a1b(0x9f5)]())this[_0x679a1b(0xace)][_0x679a1b(0x92)](_0x41fe0c);},Sprite_Enemy['prototype'][_0x3237d7(0xaa5)]=function(){const _0x1f527c=_0x3237d7,_0x297844=VisuMZ['BattleCore'][_0x1f527c(0x98d)][_0x1f527c(0x9f9)],_0x19c504=_0x297844['StepDistanceX'],_0x3bd48e=_0x297844[_0x1f527c(0xafd)],_0x4fea07=_0x297844[_0x1f527c(0x2ef)];this[_0x1f527c(0x835)](_0x19c504,_0x3bd48e,_0x4fea07);};function _0x26e3(_0x47d81e,_0x8bc921){const _0x1574ac=_0x1574();return _0x26e3=function(_0x26e3fd,_0x139374){_0x26e3fd=_0x26e3fd-0x92;let _0x76484f=_0x1574ac[_0x26e3fd];return _0x76484f;},_0x26e3(_0x47d81e,_0x8bc921);}function Sprite_SvEnemy(){const _0x460e75=_0x3237d7;this[_0x460e75(0xbb)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x3237d7(0x92c)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0x607)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(_0x4bd767){const _0xb0b45b=_0x3237d7;Sprite_Actor[_0xb0b45b(0x735)][_0xb0b45b(0xbb)][_0xb0b45b(0x4db)](this,_0x4bd767),this['scale']['x']=-0x1,this[_0xb0b45b(0xbf)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0x4ab)]=function(){},Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0x32b)]=function(){},Sprite_SvEnemy['prototype'][_0x3237d7(0x326)]=function(_0x3c2470){},Sprite_SvEnemy[_0x3237d7(0x735)]['updateShadow']=function(){},Sprite_SvEnemy['prototype']['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0x307)]=function(){const _0x5e4025=_0x3237d7;this[_0x5e4025(0xbf)][_0x5e4025(0x6ad)]=![];},Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0x877)]=function(){const _0x1f7a45=_0x3237d7;Sprite_Battler['prototype'][_0x1f7a45(0x877)][_0x1f7a45(0x4db)](this);const _0x237331=this[_0x1f7a45(0x1e4)][_0x1f7a45(0x905)]();if(this[_0x1f7a45(0x86c)]!==_0x237331){if(_0x1f7a45(0x9f7)===_0x1f7a45(0x9f7))this[_0x1f7a45(0x86c)]=_0x237331,this['_mainSprite']['bitmap']=ImageManager[_0x1f7a45(0x9ae)](_0x237331);else return _0x30aea4[_0x1f7a45(0xa4)][_0x1f7a45(0x1c5)][_0x1f7a45(0x4db)](this,_0x331827);}if(this['_mainSprite']&&this[_0x1f7a45(0x9be)][_0x1f7a45(0x651)]&&this[_0x1f7a45(0x820)]){if(_0x1f7a45(0x436)===_0x1f7a45(0x436))this['_mainSprite'][_0x1f7a45(0x651)][_0x1f7a45(0x133)]!==this[_0x1f7a45(0x820)][_0x1f7a45(0x8ab)]()&&(this[_0x1f7a45(0x9be)][_0x1f7a45(0x651)][_0x1f7a45(0x133)]=this[_0x1f7a45(0x820)][_0x1f7a45(0x8ab)]());else{if(this[_0x1f7a45(0x4a3)]()&&this['allowCollapse']())return![];}}},Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0xa36)]=function(){},Sprite_SvEnemy[_0x3237d7(0x735)]['startMove']=function(_0x4b9b9a,_0x3fed89,_0x22d220){const _0x10356f=_0x3237d7;if(this[_0x10356f(0xb23)])this['parent'][_0x10356f(0x835)](_0x4b9b9a,_0x3fed89,_0x22d220);},Sprite_SvEnemy['prototype'][_0x3237d7(0x537)]=function(){const _0x56df91=_0x3237d7,_0x2fc2a3=this[_0x56df91(0x1e4)];if(_0x2fc2a3){if(_0x56df91(0xa70)===_0x56df91(0xa70)){const _0x28e83b=_0x2fc2a3[_0x56df91(0x74a)]();if(_0x2fc2a3[_0x56df91(0xb53)]()||_0x2fc2a3[_0x56df91(0x3d4)]())this[_0x56df91(0x856)](_0x56df91(0x33a));else{if(_0x28e83b===0x3)this[_0x56df91(0x856)](_0x56df91(0x979));else{if(_0x28e83b===0x2){if(_0x56df91(0x338)!=='YBxos')this['startMotion']('sleep');else{const _0x148807=this[_0x56df91(0x1f2)](_0x47bc6f);this[_0x56df91(0x8dc)](_0x39224f,_0x148807['x'],_0x148807['y'],_0x148807[_0x56df91(0xa28)],_0x148807[_0x56df91(0x766)]);}}else{if(_0x2fc2a3[_0x56df91(0x2a2)]())this[_0x56df91(0x856)](_0x56df91(0x22a));else{if(_0x2fc2a3['isGuard']()||_0x2fc2a3[_0x56df91(0x90d)]())'NLMDX'!==_0x56df91(0xa19)?this[_0x56df91(0x856)](_0x56df91(0x77d)):_0x2ccd5c[_0x56df91(0x9fa)]()?_0x762a26['prototype'][_0x56df91(0x2db)]['call'](this):_0x4f9bd7[_0x56df91(0xa4)][_0x56df91(0x6fc)]['call'](this);else{if(_0x28e83b===0x1)this['startMotion'](_0x56df91(0x556));else{if(_0x2fc2a3[_0x56df91(0x6c2)]()){if(_0x56df91(0x491)!=='rAvGp')this['startMotion']('dying');else{_0xff3489&&_0x11311e&&_0x3c0a09['note']&&this[_0x56df91(0x686)](_0x160fd1[_0x56df91(0x4fe)]);const _0x28d2cd=_0x27eb97[_0x43cf0f];if(_0x28d2cd){let _0x17e9d0=_0x59f8d4['createTroopNote'](_0x28d2cd['id']);this[_0x56df91(0x686)](_0x17e9d0);}}}else _0x2fc2a3[_0x56df91(0x732)]()?this['startMotion']('walk'):this[_0x56df91(0x856)](_0x2fc2a3[_0x56df91(0x43a)]()['motionIdle']||_0x56df91(0x33a));}}}}}}}else{if(this[_0x56df91(0x607)]===_0x29d034)return;this[_0x56df91(0x14a)](),this[_0x56df91(0x64c)]();}}},Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0x25e)]=function(){const _0x11e5cb=_0x3237d7;return this['parent']?this[_0x11e5cb(0xb23)][_0x11e5cb(0x666)]===0x0&&this[_0x11e5cb(0xb23)][_0x11e5cb(0x54d)]===0x0:!![];},Sprite_SvEnemy[_0x3237d7(0x735)][_0x3237d7(0x3b2)]=function(){},VisuMZ[_0x3237d7(0xa4)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation[_0x3237d7(0x735)]['targetSpritePosition'],Sprite_Animation[_0x3237d7(0x735)][_0x3237d7(0x622)]=function(_0xb819d4){const _0xe8897f=_0x3237d7;return _0xb819d4[_0xe8897f(0x342)]?this[_0xe8897f(0x5ec)](_0xb819d4):VisuMZ[_0xe8897f(0xa4)][_0xe8897f(0x50d)]['call'](this,_0xb819d4);},Sprite_Animation[_0x3237d7(0x735)][_0x3237d7(0x5ec)]=function(_0x4d1aaf){const _0x102ab8=_0x3237d7;let _0x42f0cc=_0x4d1aaf['x'],_0xc8bcdb=_0x4d1aaf['y'],_0x1011d3=_0x4d1aaf[_0x102ab8(0x766)],_0x11ca79=_0x4d1aaf[_0x102ab8(0x342)]['scale']['y'];_0x4d1aaf['x']=_0x4d1aaf[_0x102ab8(0x642)]+_0x4d1aaf[_0x102ab8(0x285)](),_0x4d1aaf['y']=_0x4d1aaf[_0x102ab8(0x9ed)]+_0x4d1aaf[_0x102ab8(0x68a)](),_0x4d1aaf[_0x102ab8(0x766)]*=_0x11ca79;let _0x1a9d1d=VisuMZ[_0x102ab8(0xa4)]['Sprite_Animation_targetSpritePosition']['call'](this,_0x4d1aaf);return _0x4d1aaf['x']=_0x42f0cc,_0x4d1aaf['y']=_0xc8bcdb,_0x4d1aaf[_0x102ab8(0x766)]=_0x1011d3,_0x1a9d1d;},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x9c0)]=Sprite_AnimationMV['prototype']['updatePosition'],Sprite_AnimationMV['prototype'][_0x3237d7(0x62e)]=function(){const _0x118d2e=_0x3237d7;VisuMZ[_0x118d2e(0xa4)][_0x118d2e(0x9c0)][_0x118d2e(0x4db)](this);if(this[_0x118d2e(0x2e7)][_0x118d2e(0x49e)]===0x3){if('BXzvc'!==_0x118d2e(0x41c))_0x50959e[_0x118d2e(0x910)](_0x5ee3d7);else{if(this['x']===0x0)this['x']=Math[_0x118d2e(0x222)](Graphics['width']/0x2);if(this['y']===0x0)this['y']=Math[_0x118d2e(0x222)](Graphics[_0x118d2e(0x766)]/0x2);}}},Sprite_Damage[_0x3237d7(0x735)][_0x3237d7(0x3dc)]=function(_0xa2cfb1){const _0xf47cdf=_0x3237d7,_0x1fdc83=_0xa2cfb1[_0xf47cdf(0x368)]()||_0xa2cfb1['result']();if(_0x1fdc83[_0xf47cdf(0x5d0)]||_0x1fdc83[_0xf47cdf(0x2bb)])this[_0xf47cdf(0x9d6)]=0x0,this['createMiss']();else{if(_0x1fdc83[_0xf47cdf(0x9d2)])this[_0xf47cdf(0x9d6)]=_0x1fdc83[_0xf47cdf(0x260)]>=0x0?0x0:0x1,this['createDigits'](_0x1fdc83[_0xf47cdf(0x260)]);else _0xa2cfb1[_0xf47cdf(0x101)]()&&_0x1fdc83[_0xf47cdf(0x266)]!==0x0&&(this[_0xf47cdf(0x9d6)]=_0x1fdc83['mpDamage']>=0x0?0x2:0x3,this[_0xf47cdf(0x23c)](_0x1fdc83[_0xf47cdf(0x266)]));}_0x1fdc83[_0xf47cdf(0xf7)]&&('roocx'===_0xf47cdf(0x986)?this[_0xf47cdf(0x5ff)]():this[_0xf47cdf(0x856)](_0xf47cdf(0x979)));},Sprite_Damage[_0x3237d7(0x735)][_0x3237d7(0x56c)]=function(_0x13aaee){},Sprite_Damage['prototype'][_0x3237d7(0x23c)]=function(_0x5e81d2){const _0x3b7129=_0x3237d7;let _0x4262e4=this[_0x3b7129(0x9cf)](_0x5e81d2);const _0x352b33=this['fontSize'](),_0x36ce80=Math['floor'](_0x352b33*0.75);for(let _0x448d08=0x0;_0x448d08<_0x4262e4[_0x3b7129(0x60c)];_0x448d08++){const _0x253a48=this[_0x3b7129(0x10c)](_0x36ce80,_0x352b33);_0x253a48[_0x3b7129(0x651)]['drawText'](_0x4262e4[_0x448d08],0x0,0x0,_0x36ce80,_0x352b33,_0x3b7129(0x415)),_0x253a48['x']=(_0x448d08-(_0x4262e4[_0x3b7129(0x60c)]-0x1)/0x2)*_0x36ce80,_0x253a48['dy']=-_0x448d08;}},Sprite_Damage[_0x3237d7(0x735)][_0x3237d7(0x9cf)]=function(_0x6f013c){const _0x5c81c4=_0x3237d7;let _0x19597d=Math[_0x5c81c4(0x249)](_0x6f013c)[_0x5c81c4(0x482)]();this[_0x5c81c4(0x59d)]()&&(_0x5c81c4(0x629)!==_0x5c81c4(0x382)?_0x19597d=VisuMZ['GroupDigits'](_0x19597d):(_0x2c6148=_0x5ddcec*this[_0x5c81c4(0x6b8)]['damageRate'],_0x4fbee0+=this[_0x5c81c4(0x6b8)]['damageFlat']*(_0x43d5f3>=0x0?0x1:-0x1),_0x3b61c3=this['applyBattleCoreJS'](_0x5c81c4(0xa29),_0x319f62,_0x59547f,![]),_0x491c4f=this[_0x5c81c4(0x5c3)](_0x3ceb88),_0x370c60=_0xfaa673[_0x5c81c4(0x222)](_0xafe92f),this['_executedValue']=_0x44f999,this[_0x5c81c4(0xb8)]=this[_0x5c81c4(0xb8)]||0x0,this[_0x5c81c4(0xb8)]+=_0x5efd2a,_0x42b0da['BattleCore'][_0x5c81c4(0x39e)][_0x5c81c4(0x4db)](this,_0x3f29bf,_0x10310d),this[_0x5c81c4(0x4f0)]('PostDamage%1JS',_0x270d48,_0xae1fc0,!![])));const _0x219da9=VisuMZ[_0x5c81c4(0xa4)][_0x5c81c4(0x98d)][_0x5c81c4(0x626)];let _0x37f526='',_0x3fbfcc='';switch(this['_colorType']){case 0x0:_0x37f526=_0x219da9[_0x5c81c4(0x2e9)]||_0x5c81c4(0x6c1),_0x3fbfcc=TextManager['hp'];if(_0x6f013c===0x0)_0x37f526='%1';break;case 0x1:_0x37f526=_0x219da9['hpHealingFmt']||_0x5c81c4(0x112),_0x3fbfcc=TextManager['hp'];break;case 0x2:_0x37f526=_0x219da9['mpDamageFmt']||_0x5c81c4(0xa3d),_0x3fbfcc=TextManager['mp'];break;case 0x3:_0x37f526=_0x219da9[_0x5c81c4(0x348)]||_0x5c81c4(0x3f8),_0x3fbfcc=TextManager['mp'];break;}return _0x37f526[_0x5c81c4(0x117)](_0x19597d,_0x3fbfcc)['trim']();},Sprite_Damage['prototype'][_0x3237d7(0x59d)]=function(){const _0x152ad7=_0x3237d7;if(Imported[_0x152ad7(0x38d)])return VisuMZ[_0x152ad7(0x309)][_0x152ad7(0x98d)][_0x152ad7(0x769)]['DigitGroupingDamageSprites'];else{if(_0x152ad7(0x92b)!==_0x152ad7(0x92b)){const _0x586db7=_0x1e6f78[_0x152ad7(0x4fa)](_0x2b35f1[_0x152ad7(0x566)]()[_0x152ad7(0x194)]());_0x586db7>=0x0&&_0x586db7<=0x7&&_0x121b88[_0x152ad7(0x520)](_0x586db7,_0x15f63c);}else return![];}},Sprite_Damage[_0x3237d7(0x735)][_0x3237d7(0x5ff)]=function(){const _0x479a30=_0x3237d7,_0x40341b=VisuMZ[_0x479a30(0xa4)][_0x479a30(0x98d)][_0x479a30(0x626)];this['_flashColor']=_0x40341b[_0x479a30(0x50f)][_0x479a30(0xa76)](0x0),this[_0x479a30(0xb28)]=_0x40341b[_0x479a30(0x7d0)];},Sprite_Damage[_0x3237d7(0x735)]['setupTextPopup']=function(_0x5cbc10,_0x284820){const _0x6bc46=_0x3237d7;this['_flashColor']=_0x284820[_0x6bc46(0x878)]||[0x0,0x0,0x0,0x0],this[_0x6bc46(0x20a)]=JsonEx[_0x6bc46(0xa88)](this[_0x6bc46(0x20a)]),this['_flashDuration']=_0x284820['flashDuration']||0x0;const _0x4c216d=this[_0x6bc46(0x6fe)](),_0xe56458=Math[_0x6bc46(0x521)](_0x4c216d*0x1e),_0x24ca33=this[_0x6bc46(0x10c)](_0xe56458,_0x4c216d);_0x24ca33[_0x6bc46(0x651)][_0x6bc46(0x2da)]=ColorManager[_0x6bc46(0x508)](_0x284820[_0x6bc46(0x2da)]),_0x24ca33['bitmap']['drawText'](_0x5cbc10,0x0,0x0,_0xe56458,_0x4c216d,_0x6bc46(0x415)),_0x24ca33['dy']=0x0;},Sprite_Damage['prototype'][_0x3237d7(0x3b1)]=function(_0x565d68,_0x26cf7e,_0x263994){const _0x37c3c8=_0x3237d7,_0x4a1aa5=Math['max'](this[_0x37c3c8(0x6fe)](),ImageManager['iconHeight']),_0x1155e1=Math['floor'](_0x4a1aa5*0x1e),_0x4b754b=this['createChildSprite'](_0x1155e1,_0x4a1aa5),_0x9dbdbe=ImageManager['iconWidth']/0x2,_0x19ac9c=_0x4b754b[_0x37c3c8(0x651)]['measureTextWidth'](_0x26cf7e+'\x20');_0x4b754b[_0x37c3c8(0x651)]['textColor']=ColorManager[_0x37c3c8(0x508)](_0x263994['textColor']),_0x4b754b['bitmap']['drawText'](_0x26cf7e,_0x9dbdbe,0x0,_0x1155e1-_0x9dbdbe,_0x4a1aa5,_0x37c3c8(0x415));const _0x1a0fe4=Math[_0x37c3c8(0x222)]((_0x4a1aa5-ImageManager[_0x37c3c8(0x20b)])/0x2),_0x21f5f7=_0x1155e1/0x2-ImageManager['iconWidth']-_0x19ac9c/0x2+_0x9dbdbe/0x2,_0x613d8d=ImageManager[_0x37c3c8(0xcf)](_0x37c3c8(0xb1f)),_0x4864d1=ImageManager[_0x37c3c8(0x17c)],_0x28fd96=ImageManager['iconHeight'],_0x180dee=_0x565d68%0x10*_0x4864d1,_0x34400b=Math[_0x37c3c8(0x521)](_0x565d68/0x10)*_0x28fd96;_0x4b754b[_0x37c3c8(0x651)][_0x37c3c8(0x5b8)](_0x613d8d,_0x180dee,_0x34400b,_0x4864d1,_0x28fd96,_0x21f5f7,_0x1a0fe4),this[_0x37c3c8(0x20a)]=_0x263994[_0x37c3c8(0x878)]||[0x0,0x0,0x0,0x0],this[_0x37c3c8(0x20a)]=JsonEx[_0x37c3c8(0xa88)](this[_0x37c3c8(0x20a)]),this[_0x37c3c8(0xb28)]=_0x263994[_0x37c3c8(0x1f0)]||0x0,_0x4b754b['dy']=0x0;},VisuMZ['BattleCore'][_0x3237d7(0x688)]=Sprite_StateIcon[_0x3237d7(0x735)]['updateFrame'],Sprite_StateIcon[_0x3237d7(0x735)]['updateFrame']=function(){const _0x840463=_0x3237d7;VisuMZ['BattleCore']['Sprite_StateIcon_updateFrame'][_0x840463(0x4db)](this),this[_0x840463(0x61e)]=this[_0x840463(0x544)]>0x0?0xff:0x0;},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x442)]=Sprite_Weapon['prototype'][_0x3237d7(0xa56)],Sprite_Weapon[_0x3237d7(0x735)][_0x3237d7(0xa56)]=function(){const _0x467f04=_0x3237d7;VisuMZ[_0x467f04(0xa4)][_0x467f04(0x442)][_0x467f04(0x4db)](this),this['bitmap']&&(this['bitmap'][_0x467f04(0x133)]=VisuMZ[_0x467f04(0xa4)][_0x467f04(0x98d)][_0x467f04(0x4da)]['SmoothImage']);};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge['prototype']=Object[_0x3237d7(0x92c)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x3237d7(0x735)][_0x3237d7(0x607)]=Sprite_HpGauge,Sprite_HpGauge[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(){const _0x137b85=_0x3237d7;Sprite_Gauge[_0x137b85(0x735)][_0x137b85(0xbb)][_0x137b85(0x4db)](this);},Sprite_HpGauge[_0x3237d7(0x735)][_0x3237d7(0x10a)]=function(){return 0x0;},Sprite_HpGauge[_0x3237d7(0x735)][_0x3237d7(0x45b)]=function(){const _0x1f7a7d=_0x3237d7;this[_0x1f7a7d(0x651)][_0x1f7a7d(0x2d9)]();const _0x5841ed=this['currentValue']();!isNaN(_0x5841ed)&&(_0x1f7a7d(0xa62)===_0x1f7a7d(0xa62)?this['drawGauge']():(_0xf050a2[_0x1f7a7d(0xa4)][_0x1f7a7d(0x61a)]['call'](this),this[_0x1f7a7d(0x15c)]=this[_0x1f7a7d(0x15c)][_0x1f7a7d(0x921)](_0x34e533=>_0x34e533&&_0x34e533['isAppeared']())));};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName[_0x3237d7(0x735)]=Object['create'](Sprite_Name[_0x3237d7(0x735)]),Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x607)]=Sprite_EnemyName,Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(){const _0x50b109=_0x3237d7;Sprite_Name['prototype']['initialize'][_0x50b109(0x4db)](this),this[_0x50b109(0xad6)]();},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x96b)]=function(){const _0x2dcc3c=_0x3237d7;Sprite_Name['prototype'][_0x2dcc3c(0x96b)][_0x2dcc3c(0x4db)](this),this[_0x2dcc3c(0x61e)]=0x0,this[_0x2dcc3c(0x3cd)]=null,this[_0x2dcc3c(0xa99)]['x']=0.5,this[_0x2dcc3c(0xa99)]['y']=0x0;},Sprite_EnemyName['prototype'][_0x3237d7(0xad6)]=function(){const _0xffb7c5=_0x3237d7;VisuMZ['BattleCore'][_0xffb7c5(0x98d)][_0xffb7c5(0x754)][_0xffb7c5(0x6aa)]&&(this[_0xffb7c5(0x216)]=new Sprite_StateIcon(),this[_0xffb7c5(0x70d)](this[_0xffb7c5(0x216)]));},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x9dc)]=function(){const _0x5ed621=_0x3237d7;return Graphics[_0x5ed621(0x63d)];},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x134)]=function(){const _0xe85d8d=_0x3237d7;return this['_lineHeight']=this['_lineHeight']||Window_Base['prototype'][_0xe85d8d(0x46e)]()||0x24,this[_0xe85d8d(0xb64)]*0x4;},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x6fe)]=function(){const _0x11dd37=_0x3237d7;return VisuMZ[_0x11dd37(0xa4)][_0x11dd37(0x98d)][_0x11dd37(0x754)][_0x11dd37(0x823)]||$gameSystem[_0x11dd37(0x4a9)]();},Sprite_EnemyName['prototype']['linkSprite']=function(_0x22265e){const _0x2c7713=_0x3237d7;this[_0x2c7713(0x3cd)]=_0x22265e;},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x4dc)]=function(){const _0x70514b=_0x3237d7;Sprite_Name['prototype'][_0x70514b(0x4dc)][_0x70514b(0x4db)](this),this[_0x70514b(0x893)](),this[_0x70514b(0x62e)](),this['updateAttachedSprites'](),this['updateOpacity']();},Sprite_EnemyName[_0x3237d7(0x735)]['redraw']=function(){const _0x531042=_0x3237d7;this[_0x531042(0x5b7)]=undefined;const _0x667b54=this[_0x531042(0x444)](),_0x4dd9cf=this[_0x531042(0x9dc)](),_0x11bd48=Window_Base['prototype'][_0x531042(0x46e)]();this[_0x531042(0x817)](),this[_0x531042(0x651)][_0x531042(0x2d9)](),this[_0x531042(0x651)]['drawText'](_0x667b54,0x0,0x0,_0x4dd9cf,_0x11bd48,_0x531042(0x415));},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x893)]=function(){const _0x3e2986=_0x3237d7;if(!this[_0x3e2986(0x3cd)])return;this[_0x3e2986(0x820)]!==this[_0x3e2986(0x3cd)][_0x3e2986(0x820)]&&this[_0x3e2986(0x56c)](this[_0x3e2986(0x3cd)][_0x3e2986(0x820)]);},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x62e)]=function(){const _0xeb2685=_0x3237d7;if(!this['_linkedSprite'])return;this[_0xeb2685(0xb64)]=this[_0xeb2685(0xb64)]||Window_Base[_0xeb2685(0x735)]['lineHeight'](),this['x']=this[_0xeb2685(0x3cd)][_0xeb2685(0x642)],this['y']=this['_linkedSprite']['_baseY']-this['_lineHeight']*0.5;const _0x3478f2=VisuMZ[_0xeb2685(0xa4)]['Settings'][_0xeb2685(0x754)];this['x']+=_0x3478f2[_0xeb2685(0x96f)]||0x0,this['y']+=_0x3478f2[_0xeb2685(0x381)]||0x0;},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x3ea)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x383)]=function(){const _0x519d79=_0x3237d7;if(!this[_0x519d79(0x216)])return;this['_battler']!==this[_0x519d79(0x216)][_0x519d79(0x820)]&&(_0x519d79(0x9fb)!==_0x519d79(0x9fb)?_0xacb1f1+=_0x38943b(_0x8a3886['$1']):this['_stateIconSprite'][_0x519d79(0x56c)](this[_0x519d79(0x820)]));const _0x400802=this[_0x519d79(0x539)]();this[_0x519d79(0xb64)]=this[_0x519d79(0xb64)]||Window_Base[_0x519d79(0x735)]['lineHeight'](),this[_0x519d79(0x216)]['x']=Math[_0x519d79(0x222)]((_0x400802+ImageManager[_0x519d79(0x17c)])/0x2)+0x8,this[_0x519d79(0x216)]['y']=this[_0x519d79(0xb64)]/0x2;const _0x4b79cb=VisuMZ[_0x519d79(0xa4)][_0x519d79(0x98d)][_0x519d79(0x754)];this[_0x519d79(0x216)]['x']+=_0x4b79cb['AttachStateOffsetX']||0x0,this['_stateIconSprite']['y']+=_0x4b79cb[_0x519d79(0x78b)]||0x0;},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0xa9)]=function(){const _0x41d72f=_0x3237d7,_0xfaea78=this[_0x41d72f(0x7b1)]();if(_0xfaea78&&this['opacity']<0xff)this[_0x41d72f(0x61e)]+=0x10;else!_0xfaea78&&this[_0x41d72f(0x61e)]>0x0&&(this[_0x41d72f(0x61e)]-=0x10);},Sprite_EnemyName[_0x3237d7(0x735)]['visibilityState']=function(){const _0x5881ae=_0x3237d7;if(this[_0x5881ae(0xaf3)]()){if('CDSqU'!==_0x5881ae(0x797)){const _0x37049a=_0x5dea62(_0x1cf69a['$1']);this[_0x5881ae(0x455)](_0x234713[_0x37049a]);}else return![];}else{if(!this[_0x5881ae(0x820)])return _0x5881ae(0x35d)!=='VUjlV'?this[_0x5881ae(0xa5a)]():![];else{if(this[_0x5881ae(0x820)][_0x5881ae(0x4a3)]())return![];else{if(!this[_0x5881ae(0x820)][_0x5881ae(0x821)]())return![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x5881ae(0x618)]())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0xaf3)]=function(){const _0x11c99f=_0x3237d7;return VisuMZ['BattleCore'][_0x11c99f(0x98d)][_0x11c99f(0x754)][_0x11c99f(0x72e)];},Sprite_EnemyName[_0x3237d7(0x735)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x618)]=function(){const _0x1ee161=_0x3237d7;return VisuMZ['BattleCore'][_0x1ee161(0x98d)]['Enemy'][_0x1ee161(0x4a0)];},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x514)]=function(){const _0xe34d11=_0x3237d7;if(VisuMZ[_0xe34d11(0xa4)]['Settings'][_0xe34d11(0x754)][_0xe34d11(0x2b1)])return this[_0xe34d11(0x820)][_0xe34d11(0xaa8)]();else{if(_0xe34d11(0x6e2)===_0xe34d11(0x9ef))_0x19e549=_0x3b1b71[_0xe34d11(0x63d)]/0x2,_0x12603a=_0x3ee7a4[_0xe34d11(0x747)]/0x2;else return SceneManager[_0xe34d11(0x2a7)][_0xe34d11(0x988)]&&SceneManager[_0xe34d11(0x2a7)]['_enemyWindow'][_0xe34d11(0x8e6)]&&SceneManager['_scene'][_0xe34d11(0x988)][_0xe34d11(0x88c)][_0xe34d11(0x231)](this[_0xe34d11(0x820)]);}},Sprite_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x539)]=function(){const _0x217fe0=_0x3237d7;if(!this[_0x217fe0(0x820)])return 0x0;if(this[_0x217fe0(0x5b7)])return this[_0x217fe0(0x5b7)];const _0x3edc20=this['name']();return this[_0x217fe0(0x817)](),this[_0x217fe0(0x5b7)]=this['bitmap']['measureTextWidth'](_0x3edc20)||0x1,this[_0x217fe0(0x5b7)];},VisuMZ[_0x3237d7(0xa4)]['Sprite_Battleback_adjustPosition']=Sprite_Battleback['prototype'][_0x3237d7(0x297)],Sprite_Battleback[_0x3237d7(0x735)][_0x3237d7(0x297)]=function(){const _0x21592c=_0x3237d7,_0x4500bf=VisuMZ[_0x21592c(0xa4)][_0x21592c(0x98d)][_0x21592c(0x4cd)];if(!_0x4500bf){if('iLLyv'!==_0x21592c(0x9ba))return VisuMZ['BattleCore'][_0x21592c(0x20c)][_0x21592c(0x4db)](this);else _0x3ba964['BattleCore'][_0x21592c(0x51f)][_0x21592c(0x4db)](this,_0x2d4106,_0x904967,_0xe46b5f);}const _0x523cc3=String(_0x4500bf['DefaultStyle'])||'MZ';switch(_0x523cc3){case'MZ':VisuMZ[_0x21592c(0xa4)][_0x21592c(0x20c)][_0x21592c(0x4db)](this);break;case _0x21592c(0xb5b):this[_0x21592c(0x136)]();break;case _0x21592c(0x8f5):this[_0x21592c(0x17f)]();break;case _0x21592c(0x24d):this['adjustPosition_ScaleDown']();break;case'ScaleUp':this[_0x21592c(0x413)]();break;}},Sprite_Battleback[_0x3237d7(0x735)][_0x3237d7(0x136)]=function(){const _0x312beb=_0x3237d7;this['width']=Graphics[_0x312beb(0xa28)],this['height']=Graphics['height'];const _0x1ff84f=0x1;this[_0x312beb(0x845)]['x']=_0x1ff84f,this[_0x312beb(0x845)]['y']=_0x1ff84f,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x3237d7(0x735)][_0x3237d7(0x17f)]=function(){const _0x53ac26=_0x3237d7;this['width']=Graphics[_0x53ac26(0xa28)],this['height']=Graphics[_0x53ac26(0x766)];const _0x213a01=this[_0x53ac26(0xa28)]/this['bitmap'][_0x53ac26(0xa28)],_0x1a3f5e=this[_0x53ac26(0x766)]/this['bitmap']['height'],_0x34f5ab=Math[_0x53ac26(0x2e0)](_0x213a01,_0x1a3f5e);this[_0x53ac26(0x845)]['x']=_0x34f5ab,this[_0x53ac26(0x845)]['y']=_0x34f5ab,this['x']=(Graphics[_0x53ac26(0xa28)]-this[_0x53ac26(0xa28)])/0x2,this['y']=Graphics['height']-this[_0x53ac26(0x766)];},Sprite_Battleback['prototype'][_0x3237d7(0xb0)]=function(){const _0x4b24a1=_0x3237d7;this['width']=Graphics[_0x4b24a1(0xa28)],this[_0x4b24a1(0x766)]=Graphics['height'];const _0x546270=Math[_0x4b24a1(0x9c4)](0x1,this[_0x4b24a1(0xa28)]/this['bitmap'][_0x4b24a1(0xa28)]),_0x5dab99=Math[_0x4b24a1(0x9c4)](0x1,this['height']/this[_0x4b24a1(0x651)][_0x4b24a1(0x766)]),_0x27bc6c=Math[_0x4b24a1(0x2e0)](_0x546270,_0x5dab99);this['scale']['x']=_0x27bc6c,this[_0x4b24a1(0x845)]['y']=_0x27bc6c,this['x']=(Graphics[_0x4b24a1(0xa28)]-this[_0x4b24a1(0xa28)])/0x2,this['y']=Graphics['height']-this[_0x4b24a1(0x766)];},Sprite_Battleback[_0x3237d7(0x735)]['adjustPosition_ScaleUp']=function(){const _0x264905=_0x3237d7;this[_0x264905(0xa28)]=Graphics[_0x264905(0xa28)],this[_0x264905(0x766)]=Graphics['height'];const _0x339420=Math['max'](0x1,this[_0x264905(0xa28)]/this[_0x264905(0x651)][_0x264905(0xa28)]),_0x152341=Math[_0x264905(0x2e0)](0x1,this[_0x264905(0x766)]/this[_0x264905(0x651)][_0x264905(0x766)]),_0xc2aaf1=Math[_0x264905(0x2e0)](_0x339420,_0x152341);this['scale']['x']=_0xc2aaf1,this[_0x264905(0x845)]['y']=_0xc2aaf1,this['x']=(Graphics[_0x264905(0xa28)]-this[_0x264905(0xa28)])/0x2,this['y']=Graphics[_0x264905(0x766)]-this[_0x264905(0x766)];},Spriteset_Battle[_0x3237d7(0x4b2)]=VisuMZ[_0x3237d7(0xa4)]['Settings'][_0x3237d7(0x243)]['AntiTintUiElements']??!![],Spriteset_Battle['prototype'][_0x3237d7(0x57f)]=function(){const _0x4d1eff=_0x3237d7;if(!$gameSystem[_0x4d1eff(0x59e)]())return![];return![];},Spriteset_Battle[_0x3237d7(0x735)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x3237d7(0x735)]['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x346)]=Spriteset_Battle[_0x3237d7(0x735)]['createLowerLayer'],Spriteset_Battle[_0x3237d7(0x735)]['createLowerLayer']=function(){const _0x41054c=_0x3237d7;VisuMZ[_0x41054c(0xa4)][_0x41054c(0x346)][_0x41054c(0x4db)](this),this[_0x41054c(0x6df)](),this['createEnemyNames']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x937)]=Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x4dc)],Spriteset_Battle[_0x3237d7(0x735)]['update']=function(){const _0x5864da=_0x3237d7;VisuMZ[_0x5864da(0xa4)][_0x5864da(0x937)]['call'](this),this['updateUiContainerPosition'](),this[_0x5864da(0x6ea)]();},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x6df)]=function(){const _0xfee2a6=_0x3237d7;this[_0xfee2a6(0x657)]=new Weather(),this['_battleField'][_0xfee2a6(0x70d)](this[_0xfee2a6(0x657)]);},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x6ea)]=function(){const _0x4617d5=_0x3237d7;this[_0x4617d5(0x657)]['type']=$gameScreen[_0x4617d5(0xaf4)](),this[_0x4617d5(0x657)][_0x4617d5(0x79f)]=$gameScreen[_0x4617d5(0x603)]();},Game_Interpreter[_0x3237d7(0x735)][_0x3237d7(0x227)]=function(_0x4f3b41){const _0x106b6e=_0x3237d7;$gameScreen[_0x106b6e(0x82f)](_0x4f3b41[0x0],_0x4f3b41[0x1],_0x4f3b41[0x2]);if(_0x4f3b41[0x3])this[_0x106b6e(0x6ca)](_0x4f3b41[0x2]);return!![];},VisuMZ['BattleCore'][_0x3237d7(0x8b9)]=Game_Interpreter['prototype'][_0x3237d7(0xb63)],Game_Interpreter['prototype'][_0x3237d7(0xb63)]=function(_0x2279da){const _0x28ac38=_0x3237d7;return SceneManager['isSceneBattle']()?(SceneManager[_0x28ac38(0x2a7)][_0x28ac38(0x314)][_0x28ac38(0xb21)](_0x2279da[0x0],_0x2279da[0x1]),!![]):VisuMZ['BattleCore']['Game_Interpreter_command283'][_0x28ac38(0x4db)](this,_0x2279da);},Spriteset_Battle['prototype'][_0x3237d7(0xa66)]=function(_0x1ea925,_0x4c9c42){const _0x29d4fe=_0x3237d7;_0x1ea925[_0x29d4fe(0x651)]=_0x4c9c42;},Spriteset_Battle['prototype'][_0x3237d7(0xb21)]=function(_0x14033d,_0x97a051){const _0x1f3a73=_0x3237d7;_0x14033d=_0x14033d||'',_0x97a051=_0x97a051||'';_0x14033d===''&&_0x97a051===''&&(_0x1f3a73(0x8e0)!==_0x1f3a73(0x271)?(_0x14033d=this[_0x1f3a73(0xb62)][_0x1f3a73(0x1dc)](),_0x97a051=this[_0x1f3a73(0x3b7)]['battleback2Name']()):(this[_0x1f3a73(0x157)]=new _0x382210(),this[_0x1f3a73(0x55b)]['addChild'](this[_0x1f3a73(0x157)])));const _0x5383c0=ImageManager['loadBattleback1'](_0x14033d),_0x50fe1e=ImageManager[_0x1f3a73(0x485)](_0x97a051);_0x5383c0[_0x1f3a73(0x8fc)](this['updateBattlebackBitmap1'][_0x1f3a73(0x114)](this,this[_0x1f3a73(0xb62)],this[_0x1f3a73(0x3b7)],_0x5383c0,_0x50fe1e));},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x107)]=function(_0x3ace57,_0x425686,_0x508f6d,_0x5debd6){const _0x4ef2e3=_0x3237d7;_0x5debd6['addLoadListener'](this[_0x4ef2e3(0x6e0)][_0x4ef2e3(0x114)](this,_0x3ace57,_0x425686,_0x508f6d,_0x5debd6));},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x6e0)]=function(_0x19d20f,_0x5840d9,_0x34bd08,_0xfe1f9d){const _0x44b5fc=_0x3237d7;_0x19d20f[_0x44b5fc(0x651)]=_0x34bd08,_0x5840d9[_0x44b5fc(0x651)]=_0xfe1f9d,_0x19d20f['adjustPosition'](),_0x5840d9[_0x44b5fc(0x297)]();},VisuMZ[_0x3237d7(0xa4)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x344)],Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x344)]=function(){const _0x41b53e=_0x3237d7;VisuMZ[_0x41b53e(0xa4)][_0x41b53e(0x681)][_0x41b53e(0x4db)](this),this[_0x41b53e(0xa57)]();},Spriteset_Battle[_0x3237d7(0x735)]['createBattleFieldBattleCore']=function(){const _0x2a4cae=_0x3237d7;this[_0x2a4cae(0x21e)](),this[_0x2a4cae(0x81b)](),this[_0x2a4cae(0x220)](),this[_0x2a4cae(0x6e9)](),this['adjustFlippedBattlefield']();},Spriteset_Battle['prototype']['createBattleFieldContainer']=function(){const _0x424f4e=_0x3237d7;this[_0x424f4e(0x157)]=new Sprite(),this[_0x424f4e(0x55b)][_0x424f4e(0x70d)](this[_0x424f4e(0x157)]);},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x220)]=function(){const _0xc10688=_0x3237d7;this['_animationContainer']=new Sprite();if(Spriteset_Battle['ANTI_TINT_UI']){if('yZYUg'!==_0xc10688(0x57d)){const _0x3893cb=_0x5aae1b(_0x1727fb['$1'])[_0xc10688(0x2cf)](/[\r\n]+/)[_0xc10688(0x28b)](''),_0x391881=_0x2c35c4[_0xc10688(0x8c9)](_0x3893cb);_0x7463fb[_0xc10688(0x839)]=_0x300874['getWtypeIdWithName'](_0x391881);}else this[_0xc10688(0x70d)](this[_0xc10688(0x2fa)]);}else this[_0xc10688(0x55b)][_0xc10688(0x70d)](this[_0xc10688(0x2fa)]);},Spriteset_Battle[_0x3237d7(0x735)]['createDamageContainer']=function(){const _0x2917cd=_0x3237d7;this['_damageContainer']=new Sprite(),this[_0x2917cd(0x7c0)]['x']=this[_0x2917cd(0x55b)]['x'],this[_0x2917cd(0x7c0)]['y']=this[_0x2917cd(0x55b)]['y'],this[_0x2917cd(0x70d)](this[_0x2917cd(0x7c0)]);},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0xcd)]=function(){const _0x10dfdf=_0x3237d7;if(!this[_0x10dfdf(0x57f)]())return;this[_0x10dfdf(0x157)][_0x10dfdf(0x845)]['x']=-0x1,this[_0x10dfdf(0x157)]['x']=this[_0x10dfdf(0x55b)][_0x10dfdf(0xa28)],this[_0x10dfdf(0x8ca)][_0x10dfdf(0x845)]['x']=-0x1,this['_uiContainer']['x']=this[_0x10dfdf(0x55b)][_0x10dfdf(0xa28)],this[_0x10dfdf(0x2fa)][_0x10dfdf(0x845)]['x']=-0x1,this[_0x10dfdf(0x2fa)]['x']=this[_0x10dfdf(0x55b)]['width'],this['_damageContainer'][_0x10dfdf(0x845)]['x']=-0x1,this[_0x10dfdf(0x7c0)]['x']=this[_0x10dfdf(0x55b)]['x']+this[_0x10dfdf(0x55b)][_0x10dfdf(0xa28)];},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x1a3)]=function(){const _0x3e5e67=_0x3237d7;Imported[_0x3e5e67(0x38d)]&&this['coreEngineRepositionEnemies']()&&this[_0x3e5e67(0x466)]();const _0x2cad39=$gameTroop[_0x3e5e67(0x199)](),_0x996b59=[];for(const _0x9cb4de of _0x2cad39){_0x996b59[_0x3e5e67(0x857)](new Sprite_Enemy(_0x9cb4de));}_0x996b59['sort'](this[_0x3e5e67(0x781)][_0x3e5e67(0x114)](this));for(const _0x33058a of _0x996b59){_0x3e5e67(0x153)!==_0x3e5e67(0x4fc)?this[_0x3e5e67(0x157)][_0x3e5e67(0x70d)](_0x33058a):(_0x37f175['BattleCore'][_0x3e5e67(0x5bd)]&&_0x50e2ef[_0x3e5e67(0xa4)][_0x3e5e67(0x5bd)][_0x3e5e67(0x4db)](this,_0x1295d7),_0x2856cf[_0x3e5e67(0xa4)][_0x3e5e67(0xcb)](_0x5c6d8c));}this[_0x3e5e67(0x75e)]=_0x996b59;},Spriteset_Battle['prototype'][_0x3237d7(0x628)]=function(){const _0x312394=_0x3237d7;this[_0x312394(0x4e6)]=[];for(let _0x27d6a3=0x0;_0x27d6a3<$gameParty[_0x312394(0x46a)]();_0x27d6a3++){if(_0x312394(0x19e)!==_0x312394(0x19e)){if(!this['canMove']())return;if(_0x126333<=0x0)return;this[_0x312394(0x400)]=_0xd1b1ac,this[_0x312394(0x527)]=_0x43f58c,this[_0x312394(0x2f2)]=_0x4019b0;}else{const _0x3b3a1a=$gameParty['battleMembers']()[_0x27d6a3],_0x3cddd9=new Sprite_Actor();_0x3cddd9[_0x312394(0x3d6)](_0x3b3a1a),_0x3cddd9[_0x312394(0x4e9)](_0x3b3a1a),_0x3cddd9[_0x312394(0x4dc)](),this[_0x312394(0x4e6)][_0x312394(0x857)](_0x3cddd9),this[_0x312394(0x157)][_0x312394(0x70d)](_0x3cddd9);}}},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x21a)]=function(_0xceebc0,_0x1b35d1,_0x5448d3,_0x2c19fc){const _0x53a94f=_0x3237d7,_0x5b1573=this[_0x53a94f(0x9bd)](_0x1b35d1),_0x2e8a07=new(_0x5b1573?Sprite_AnimationMV:Sprite_Animation)(),_0x41f0e9=this['makeTargetSprites'](_0xceebc0);this[_0x53a94f(0xad9)](_0xceebc0[0x0])&&(_0x53a94f(0xa1c)!==_0x53a94f(0xa1c)?_0x4eebe1[_0x53a94f(0x56c)](0x0):_0x5448d3=!_0x5448d3),_0x2e8a07[_0x53a94f(0x3fc)]=_0xceebc0,_0x2e8a07['setup'](_0x41f0e9,_0x1b35d1,_0x5448d3,_0x2c19fc),this[_0x53a94f(0x208)](_0x2e8a07);},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x208)]=function(_0x36fdd5){const _0x46e609=_0x3237d7;this[_0x46e609(0x245)](_0x36fdd5)?this[_0x46e609(0x41f)]()['addChild'](_0x36fdd5):this[_0x46e609(0x2fa)]['addChild'](_0x36fdd5),this[_0x46e609(0xa9c)][_0x46e609(0x857)](_0x36fdd5);},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x245)]=function(_0x11ac29){const _0x528c69=_0x3237d7;if(!_0x11ac29)return![];if(!_0x11ac29['_animation'])return![];if(!_0x11ac29['targetObjects'][0x0])return![];if(_0x11ac29['targetObjects'][0x0][_0x528c69(0x5ef)]&&!_0x11ac29[_0x528c69(0x3fc)][0x0]['isActor']())return![];if($gameSystem[_0x528c69(0x59e)]())return![];if(!this[_0x528c69(0x41f)]())return![];if(_0x11ac29[_0x528c69(0x607)]===Sprite_Animation){if('QxbOY'===_0x528c69(0x447))return _0x1fdc1b(_0x74a463['$1']);else{if(_0x11ac29[_0x528c69(0x2e7)][_0x528c69(0xaea)]!==0x0)return![];}}else{if(_0x11ac29[_0x528c69(0x607)]===Sprite_AnimationMV){if(_0x528c69(0x6bc)!==_0x528c69(0x6bc))this[_0x528c69(0x20e)](_0x528c69(0xacc));else{if(_0x11ac29[_0x528c69(0x2e7)][_0x528c69(0x49e)]===0x3)return![];}}}return!![];const _0x4e546d=Window_BattleStatus[_0x528c69(0x735)][_0x528c69(0x457)]();return['xp','portrait'][_0x528c69(0x995)](_0x4e546d);},Spriteset_Battle['prototype']['battleStatusWindowAnimationContainer']=function(){const _0x139fdd=_0x3237d7;if(!SceneManager[_0x139fdd(0x2a7)])return null;if(!SceneManager[_0x139fdd(0x2a7)][_0x139fdd(0x364)])return null;if(!SceneManager[_0x139fdd(0x2a7)]['_statusWindow'][_0x139fdd(0xa4a)])return null;return SceneManager[_0x139fdd(0x2a7)]['_statusWindow'][_0x139fdd(0xa4a)];},Spriteset_Battle[_0x3237d7(0x735)]['removeAnimation']=function(_0x35031f){const _0x292910=_0x3237d7;this['removeAnimationFromContainer'](_0x35031f);for(const _0x92073a of _0x35031f[_0x292910(0x3fc)]){if(_0x292910(0xcc)===_0x292910(0xcc))_0x92073a[_0x292910(0x1b6)]&&_0x92073a['endAnimation']();else return _0x5b486d[_0x292910(0x38d)]?_0x13a47b[_0x292910(0x913)]('ok'):_0x2a0265[_0x292910(0xa4)][_0x292910(0x98d)][_0x292910(0x811)][_0x292910(0x332)];}_0x35031f[_0x292910(0x416)]();},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x99b)]=function(_0x20e43d){const _0x1a7bcb=_0x3237d7;this[_0x1a7bcb(0xa9c)][_0x1a7bcb(0x28b)](_0x20e43d),this['isAnimationShownOnBattlePortrait'](_0x20e43d)?this['battleStatusWindowAnimationContainer']()[_0x1a7bcb(0x89f)](_0x20e43d):this['_animationContainer'][_0x1a7bcb(0x89f)](_0x20e43d);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xe5)]=Spriteset_Battle[_0x3237d7(0x735)]['updateActors'],Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x487)]=function(){VisuMZ['BattleCore']['Spriteset_Battle_updateActors']['call'](this),this['updateBattlerContainer']();},Spriteset_Battle['prototype']['updateBattlerContainer']=function(){const _0x241b1f=_0x3237d7;this[_0x241b1f(0x157)]['children'][_0x241b1f(0x726)](this['compareBattlerSprites'][_0x241b1f(0x114)](this)),this[_0x241b1f(0x716)]();},Spriteset_Battle[_0x3237d7(0x735)]['compareBattlerSprites']=function(_0x18e84a,_0x4adf4d){const _0x544ec6=_0x3237d7;if(VisuMZ[_0x544ec6(0xa4)][_0x544ec6(0x98d)][_0x544ec6(0x4da)][_0x544ec6(0x19f)]){if(_0x18e84a[_0x544ec6(0x820)]&&_0x4adf4d['_battler']){if(_0x544ec6(0xb3a)==='rOMzf'){if(_0x18e84a[_0x544ec6(0x820)][_0x544ec6(0x5ef)]()&&_0x4adf4d[_0x544ec6(0x820)][_0x544ec6(0x8f2)]())return 0x1;else{if(_0x4adf4d[_0x544ec6(0x820)][_0x544ec6(0x5ef)]()&&_0x18e84a[_0x544ec6(0x820)][_0x544ec6(0x8f2)]())return-0x1;}}else this[_0x544ec6(0x61e)]-=0x10;}}if(_0x18e84a[_0x544ec6(0x9ed)]!==_0x4adf4d[_0x544ec6(0x9ed)])return _0x18e84a['_baseY']-_0x4adf4d[_0x544ec6(0x9ed)];else{if(_0x544ec6(0x568)!=='sdUGk'){const _0x5af2d5=_0x1aa40f[_0x544ec6(0xa4)][_0x544ec6(0x98d)][_0x544ec6(0x754)];this[_0x544ec6(0x327)]=_0x5af2d5['AttackAnimation'],this[_0x544ec6(0xb3)]={};}else return _0x4adf4d[_0x544ec6(0x353)]-_0x18e84a[_0x544ec6(0x353)];}},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x716)]=function(){const _0xb05892=_0x3237d7;if(!VisuMZ[_0xb05892(0xa4)][_0xb05892(0x98d)][_0xb05892(0x4da)]['PrioritySortActive'])return;const _0x49893c=BattleManager['_subject'];if(_0x49893c){if(_0x49893c[_0xb05892(0x5ef)]()&&!$gameSystem[_0xb05892(0x59e)]())return;const _0x96151b=_0x49893c[_0xb05892(0x1d5)]();if(_0x96151b&&_0x49893c[_0xb05892(0x5ef)]())this['_battlerContainer'][_0xb05892(0x70d)](_0x96151b);}},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x7f6)]=function(){const _0x4f7d60=_0x3237d7;for(const _0x54ef24 of $gameParty['aliveMembers']()){if(_0x4f7d60(0xae)!=='cWlyl'){const _0x2123f6=_0x44cf85['prototype'][_0x4f7d60(0xa76)][_0x4f7d60(0x4db)](arguments,0x1);this[_0x4f7d60(0x530)][_0x4f7d60(0x6f9)]({'name':_0x24f961,'params':_0x2123f6});}else{if(!_0x54ef24)continue;if(!_0x54ef24[_0x4f7d60(0x1d5)]())continue;_0x54ef24[_0x4f7d60(0x1d5)]()[_0x4f7d60(0xb44)]=!![],_0x54ef24['battler']()[_0x4f7d60(0xa36)]();}}},Spriteset_Battle['prototype'][_0x3237d7(0x81b)]=function(){const _0x48a8f4=_0x3237d7;this['_uiContainer']=new Sprite(),Spriteset_Battle[_0x48a8f4(0x4b2)]?this['addChild'](this[_0x48a8f4(0x8ca)]):this[_0x48a8f4(0x55b)][_0x48a8f4(0x70d)](this[_0x48a8f4(0x8ca)]),SceneManager[_0x48a8f4(0x2a7)][_0x48a8f4(0x8ca)]=this[_0x48a8f4(0x8ca)];},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x592)]=function(){const _0x1c2db7=_0x3237d7;if(VisuMZ[_0x1c2db7(0xa4)][_0x1c2db7(0x98d)][_0x1c2db7(0x754)]['NameLegacy'])return;this[_0x1c2db7(0x448)]=new Sprite(),BattleManager[_0x1c2db7(0xb1d)](this[_0x1c2db7(0x448)]);for(const _0x1c53d3 of this['_enemySprites']){if(_0x1c2db7(0x437)==='GlyDc'){const _0x217a77=this[_0x1c2db7(0x258)](_0x46b5ce);if(_0x217a77===_0x1c2db7(0xa2b))this['drawItemStyleIconText'](_0x5b225c);else _0x217a77==='icon'?this['drawItemStyleIcon'](_0x18c37e):_0x2d4d1e[_0x1c2db7(0x735)][_0x1c2db7(0x6d8)][_0x1c2db7(0x4db)](this,_0x55b488);}else{const _0x997476=new Sprite_EnemyName();this[_0x1c2db7(0x448)][_0x1c2db7(0x70d)](_0x997476),_0x997476[_0x1c2db7(0xa3)](_0x1c53d3);}}},Spriteset_Battle['prototype'][_0x3237d7(0x984)]=function(){const _0x48d253=_0x3237d7;if(!this[_0x48d253(0x7c0)])return;if(!this[_0x48d253(0x8ca)])return;const _0x2d9f39=Spriteset_Battle[_0x48d253(0x4b2)]?this[_0x48d253(0x7c0)]['x']:0x0,_0x489d3f=Spriteset_Battle[_0x48d253(0x4b2)]?this['_damageContainer']['y']:0x0,_0x1b92f3=Imported['VisuMZ_3_ActSeqCamera']?this['_battleField']['x']:0x0,_0x126558=Imported['VisuMZ_3_ActSeqCamera']?this[_0x48d253(0x55b)]['y']:0x0;this[_0x48d253(0x8ca)]['x']=_0x2d9f39+_0x1b92f3,this[_0x48d253(0x8ca)]['y']=_0x489d3f+_0x126558;},BattleManager[_0x3237d7(0xb1d)]=function(_0x2c9d36){const _0x3629bf=_0x3237d7;if(!SceneManager[_0x3629bf(0x2a7)][_0x3629bf(0x8ca)])return;SceneManager[_0x3629bf(0x2a7)][_0x3629bf(0x8ca)][_0x3629bf(0x70d)](_0x2c9d36);},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0xa43)]=function(){return![];},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x699)]=function(){const _0x1ea648=_0x3237d7;return this[_0x1ea648(0x80f)]()[_0x1ea648(0x6e4)](_0x41673f=>_0x41673f[_0x1ea648(0xa78)]());},Spriteset_Battle[_0x3237d7(0x735)]['isAnyoneJumping']=function(){const _0x3feee4=_0x3237d7;return this[_0x3feee4(0x80f)]()[_0x3feee4(0x6e4)](_0x39e2f8=>_0x39e2f8['isJumping']());},Spriteset_Battle[_0x3237d7(0x735)]['isAnyoneGrowing']=function(){const _0x588f19=_0x3237d7;return this['battlerSprites']()[_0x588f19(0x6e4)](_0x2f5eda=>_0x2f5eda['isGrowing']());},Spriteset_Battle[_0x3237d7(0x735)]['isAnyoneSkewing']=function(){const _0x42f95d=_0x3237d7;return this[_0x42f95d(0x80f)]()[_0x42f95d(0x6e4)](_0x21d434=>_0x21d434[_0x42f95d(0x703)]());},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x40b)]=function(){const _0x1a0530=_0x3237d7;return this['battlerSprites']()['some'](_0x64fa39=>_0x64fa39[_0x1a0530(0x56a)]());},Spriteset_Battle[_0x3237d7(0x735)][_0x3237d7(0x4d6)]=function(){const _0x22038e=_0x3237d7;return this['battlerSprites']()['some'](_0x224872=>_0x224872[_0x22038e(0x816)]());},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xd8)]=Window_ItemList[_0x3237d7(0x735)][_0x3237d7(0x355)],Window_ItemList[_0x3237d7(0x735)]['maxCols']=function(){const _0x45b8af=_0x3237d7;if(SceneManager['isSceneBattle']()){if(SceneManager['_scene'][_0x45b8af(0x457)]()===_0x45b8af(0xa93)){if(_0x45b8af(0xab9)!==_0x45b8af(0x39c))return VisuMZ[_0x45b8af(0xa4)][_0x45b8af(0x98d)][_0x45b8af(0x243)]['SkillItemBorderCols'];else{if(!_0x15af5c['isSceneBattle']())return;if(!_0x2954b9[_0x45b8af(0x255)])return;const _0x3fae58=_0x5767e9['getLastPluginCommandInterpreter']();if(!_0x3fae58)return;_0x3fae58[_0x45b8af(0x20e)]('battleAngle');}}else return VisuMZ[_0x45b8af(0xa4)][_0x45b8af(0x98d)][_0x45b8af(0x243)][_0x45b8af(0xa59)];}else return VisuMZ[_0x45b8af(0xa4)][_0x45b8af(0xd8)]['call'](this);},VisuMZ['BattleCore']['Window_SkillList_maxCols']=Window_SkillList[_0x3237d7(0x735)][_0x3237d7(0x355)],Window_SkillList[_0x3237d7(0x735)][_0x3237d7(0x355)]=function(){const _0x5680b6=_0x3237d7;if(SceneManager[_0x5680b6(0x5cb)]()){if(SceneManager['_scene'][_0x5680b6(0x457)]()===_0x5680b6(0xa93)){if(_0x5680b6(0xa10)!==_0x5680b6(0xa10))_0x508208[_0x5680b6(0x4da)][_0x5680b6(0xb7)]=![];else return VisuMZ[_0x5680b6(0xa4)]['Settings']['BattleLayout'][_0x5680b6(0x9af)];}else return VisuMZ[_0x5680b6(0xa4)][_0x5680b6(0x98d)][_0x5680b6(0x243)]['SkillItemStandardCols'];}else return _0x5680b6(0x1df)===_0x5680b6(0x1df)?VisuMZ[_0x5680b6(0xa4)][_0x5680b6(0x6bb)][_0x5680b6(0x4db)](this):![];},VisuMZ['BattleCore'][_0x3237d7(0xee)]=Window_Options[_0x3237d7(0x735)]['addGeneralOptions'],Window_Options[_0x3237d7(0x735)][_0x3237d7(0x7e1)]=function(){const _0x5867fd=_0x3237d7;VisuMZ[_0x5867fd(0xa4)][_0x5867fd(0xee)][_0x5867fd(0x4db)](this),this[_0x5867fd(0x18f)](),this['addShowHpGaugeCommand']();},Window_Options[_0x3237d7(0x735)]['addAutoBattleCommands']=function(){const _0x278316=_0x3237d7;VisuMZ['BattleCore'][_0x278316(0x98d)][_0x278316(0x811)][_0x278316(0xafc)]&&(this[_0x278316(0x9f8)](),this[_0x278316(0x24f)]());},Window_Options['prototype']['addShowHpGaugeCommand']=function(){const _0x22969a=_0x3237d7;if(!VisuMZ[_0x22969a(0xa4)][_0x22969a(0x98d)][_0x22969a(0x3c0)]['AddHpGaugeOption'])return;const _0x9729d=TextManager[_0x22969a(0x59b)],_0x1cc2f7=_0x22969a(0x59b);this[_0x22969a(0x557)](_0x9729d,_0x1cc2f7);},Window_Options['prototype'][_0x3237d7(0x9f8)]=function(){const _0x1d19e0=_0x3237d7,_0x13ddb1=TextManager[_0x1d19e0(0x14f)],_0x19bfb1=_0x1d19e0(0xabc);this[_0x1d19e0(0x557)](_0x13ddb1,_0x19bfb1);},Window_Options[_0x3237d7(0x735)][_0x3237d7(0x24f)]=function(){const _0x2ffaa1=_0x3237d7,_0x298084=TextManager[_0x2ffaa1(0xed)],_0x401ac7=_0x2ffaa1(0x9a5);this['addCommand'](_0x298084,_0x401ac7);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x97)]=Window_Options[_0x3237d7(0x735)][_0x3237d7(0x7b9)],Window_Options['prototype']['statusText']=function(_0x317389){const _0x4ef106=_0x3237d7,_0x1c1a3f=this[_0x4ef106(0x5b9)](_0x317389);return _0x1c1a3f===_0x4ef106(0x9a5)?this[_0x4ef106(0x907)]():VisuMZ[_0x4ef106(0xa4)]['Window_Options_statusText']['call'](this,_0x317389);},Window_Options[_0x3237d7(0x735)][_0x3237d7(0x907)]=function(){const _0x34ae78=_0x3237d7,_0x597142=VisuMZ[_0x34ae78(0xa4)][_0x34ae78(0x98d)]['AutoBattle'],_0x3b113d=this[_0x34ae78(0x6a9)](_0x34ae78(0x9a5));return _0x3b113d?_0x597142[_0x34ae78(0x70f)]:_0x597142[_0x34ae78(0x58e)];},Window_ShopStatus[_0x3237d7(0x735)][_0x3237d7(0x3c5)]=function(){const _0x4ba16a=_0x3237d7,_0x76c733=DataManager[_0x4ba16a(0x4bc)](this[_0x4ba16a(0xa42)]),_0x5e066a=VisuMZ[_0x4ba16a(0x5f5)][_0x76c733];if(!_0x5e066a)return this[_0x4ba16a(0x2ba)]();const _0x109da0=_0x4ba16a(0x76b)[_0x4ba16a(0x117)](this[_0x4ba16a(0xa42)]['damage'][_0x4ba16a(0x2a5)]),_0xf9872c=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x4ba16a(0xa42)]['damage'][_0x4ba16a(0x2a5)]];return _0x5e066a[_0x109da0][_0x4ba16a(0x117)](_0xf9872c);},Window_ShopStatus[_0x3237d7(0x735)]['getItemDamageAmountTextBattleCore']=function(){const _0x5054d1=_0x3237d7,_0xd2772c=DataManager[_0x5054d1(0x4bc)](this['_item']),_0x2ac81a=VisuMZ['DamageStyles'][_0xd2772c];if(!_0x2ac81a)return this[_0x5054d1(0x712)]();return _0x2ac81a[_0x5054d1(0x164)][_0x5054d1(0x4db)](this);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xb6c)]=Window_PartyCommand['prototype'][_0x3237d7(0xbb)],Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(_0x13a656){const _0x2a605e=_0x3237d7;VisuMZ[_0x2a605e(0xa4)][_0x2a605e(0xb6c)][_0x2a605e(0x4db)](this,_0x13a656),this['createCommandNameWindow'](_0x13a656);},Window_PartyCommand['prototype'][_0x3237d7(0xb4f)]=function(_0x2642dc){const _0x24e95b=_0x3237d7,_0x216dd7=new Rectangle(0x0,0x0,_0x2642dc['width'],_0x2642dc[_0x24e95b(0x766)]);this[_0x24e95b(0x3ca)]=new Window_Base(_0x216dd7),this['_commandNameWindow'][_0x24e95b(0x61e)]=0x0,this[_0x24e95b(0x70d)](this[_0x24e95b(0x3ca)]),this[_0x24e95b(0x776)]();},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x941)]=function(){const _0x5bf733=_0x3237d7;Window_Command[_0x5bf733(0x735)][_0x5bf733(0x941)][_0x5bf733(0x4db)](this);if(this['_commandNameWindow'])this[_0x5bf733(0x776)]();},Window_PartyCommand['prototype'][_0x3237d7(0x776)]=function(){const _0xbbda44=_0x3237d7,_0x4e25ec=this[_0xbbda44(0x3ca)];_0x4e25ec[_0xbbda44(0x5b6)]['clear']();const _0x3bdea9=this[_0xbbda44(0x258)](this[_0xbbda44(0xa27)]());if(_0x3bdea9===_0xbbda44(0x192)&&this[_0xbbda44(0x523)]()>0x0){const _0x524509=this[_0xbbda44(0x965)](this[_0xbbda44(0xa27)]());let _0x141225=this[_0xbbda44(0x8bf)](this[_0xbbda44(0xa27)]());_0x141225=_0x141225['replace'](/\\I\[(\d+)\]/gi,''),_0x4e25ec['resetFontSettings'](),this[_0xbbda44(0x274)](_0x141225,_0x524509),this[_0xbbda44(0x6a3)](_0x141225,_0x524509),this['commandNameWindowCenter'](_0x141225,_0x524509);}},Window_PartyCommand[_0x3237d7(0x735)]['commandNameWindowDrawBackground']=function(_0xfb8c91,_0x271a6f){},Window_PartyCommand[_0x3237d7(0x735)]['commandNameWindowDrawText']=function(_0x2619d4,_0x1806a4){const _0x31ad20=_0x3237d7,_0x5224ed=this[_0x31ad20(0x3ca)];_0x5224ed[_0x31ad20(0x1ed)](_0x2619d4,0x0,_0x1806a4['y'],_0x5224ed[_0x31ad20(0x541)],'center');},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x7e6)]=function(_0x3c6c2f,_0x4d10ce){const _0x3ac1fc=_0x3237d7,_0x5dce4d=this[_0x3ac1fc(0x3ca)],_0x133371=$gameSystem[_0x3ac1fc(0x1de)](),_0x54554f=_0x4d10ce['x']+Math[_0x3ac1fc(0x521)](_0x4d10ce[_0x3ac1fc(0xa28)]/0x2)+_0x133371;_0x5dce4d['x']=_0x5dce4d[_0x3ac1fc(0xa28)]/-0x2+_0x54554f,_0x5dce4d['y']=Math['floor'](_0x4d10ce[_0x3ac1fc(0x766)]/0x2);},Window_PartyCommand['prototype'][_0x3237d7(0x8e1)]=function(){const _0x26c7ef=_0x3237d7;this[_0x26c7ef(0xaab)](),this[_0x26c7ef(0x7a8)](),this['addCustomCommands'](),this[_0x26c7ef(0xa5c)](),this['addEscapeCommand']();},Window_PartyCommand['prototype'][_0x3237d7(0xaab)]=function(){const _0x5be5c0=_0x3237d7,_0x52c5e6=this[_0x5be5c0(0x2cd)](),_0x3f0dfa=VisuMZ[_0x5be5c0(0xa4)][_0x5be5c0(0x98d)][_0x5be5c0(0x661)]['CmdIconFight'],_0x44b108=_0x52c5e6===_0x5be5c0(0x488)?TextManager[_0x5be5c0(0x763)]:_0x5be5c0(0x861)[_0x5be5c0(0x117)](_0x3f0dfa,TextManager[_0x5be5c0(0x763)]),_0x212ab5=this[_0x5be5c0(0x911)]();this[_0x5be5c0(0x557)](_0x44b108,'fight',_0x212ab5);},Window_PartyCommand['prototype']['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x7a8)]=function(){const _0x50534c=_0x3237d7;if(!this[_0x50534c(0x4f4)]())return;const _0x279861=this[_0x50534c(0x2cd)](),_0xd13b5b=VisuMZ[_0x50534c(0xa4)]['Settings'][_0x50534c(0x661)][_0x50534c(0x753)],_0x1c270f=_0x279861===_0x50534c(0x488)?TextManager['autoBattle']:_0x50534c(0x861)[_0x50534c(0x117)](_0xd13b5b,TextManager['autoBattle']),_0x1475d6=this[_0x50534c(0x509)]();this[_0x50534c(0x557)](_0x1c270f,_0x50534c(0x223),_0x1475d6);},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x4f4)]=function(){const _0x22fec7=_0x3237d7;return VisuMZ[_0x22fec7(0xa4)][_0x22fec7(0x98d)][_0x22fec7(0x661)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x509)]=function(){return!![];},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x446)]=function(){},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0xa5c)]=function(){const _0x3f4c66=_0x3237d7;if(!this[_0x3f4c66(0x15a)]())return;const _0x3b7800=this['commandStyle'](),_0x552a26=VisuMZ[_0x3f4c66(0xa4)]['Settings']['PartyCmd'][_0x3f4c66(0x7c1)],_0x361427=_0x3b7800===_0x3f4c66(0x488)?TextManager[_0x3f4c66(0xac5)]:_0x3f4c66(0x861)['format'](_0x552a26,TextManager[_0x3f4c66(0xac5)]),_0x578c31=this[_0x3f4c66(0xa8)]();this[_0x3f4c66(0x557)](_0x361427,_0x3f4c66(0xac5),_0x578c31);},Window_PartyCommand[_0x3237d7(0x735)]['isOptionsCommandAdded']=function(){const _0x5cb3bb=_0x3237d7;return VisuMZ[_0x5cb3bb(0xa4)]['Settings']['PartyCmd'][_0x5cb3bb(0x3dd)];},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0xa8)]=function(){return!![];},Window_PartyCommand['prototype'][_0x3237d7(0x1aa)]=function(){const _0x1e717a=_0x3237d7,_0x1374f6=this[_0x1e717a(0x2cd)](),_0x44108a=VisuMZ[_0x1e717a(0xa4)]['Settings']['PartyCmd'][_0x1e717a(0x438)],_0x55a23c=_0x1374f6===_0x1e717a(0x488)?TextManager[_0x1e717a(0x11c)]:_0x1e717a(0x861)[_0x1e717a(0x117)](_0x44108a,TextManager[_0x1e717a(0x11c)]),_0xae6805=this['isEscapeCommandEnabled']();this[_0x1e717a(0x557)](_0x55a23c,'escape',_0xae6805);},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x691)]=function(){const _0x4eb853=_0x3237d7;return BattleManager[_0x4eb853(0xb5)]();},Window_PartyCommand['prototype']['itemTextAlign']=function(){const _0x8584f5=_0x3237d7;return VisuMZ['BattleCore'][_0x8584f5(0x98d)]['PartyCmd'][_0x8584f5(0x7cb)];},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x6d8)]=function(_0x2caca8){const _0x3b136d=_0x3237d7,_0x5b4f3f=this[_0x3b136d(0x258)](_0x2caca8);if(_0x5b4f3f===_0x3b136d(0xa2b))this[_0x3b136d(0xa46)](_0x2caca8);else _0x5b4f3f===_0x3b136d(0x192)?this['drawItemStyleIcon'](_0x2caca8):Window_Command[_0x3b136d(0x735)]['drawItem']['call'](this,_0x2caca8);},Window_PartyCommand['prototype'][_0x3237d7(0x2cd)]=function(){const _0x84ffad=_0x3237d7;return VisuMZ[_0x84ffad(0xa4)][_0x84ffad(0x98d)][_0x84ffad(0x661)][_0x84ffad(0x756)];},Window_PartyCommand['prototype'][_0x3237d7(0x258)]=function(_0x8db33b){const _0x3176ba=_0x3237d7;if(_0x8db33b<0x0)return _0x3176ba(0x488);const _0x21e8e6=this['commandStyle']();if(_0x21e8e6!==_0x3176ba(0x6b0))return _0x21e8e6;else{if(this[_0x3176ba(0x523)]()>0x0){const _0x3cf841=this['commandName'](_0x8db33b);if(_0x3cf841[_0x3176ba(0x453)](/\\I\[(\d+)\]/i)){const _0xddf3bc=this[_0x3176ba(0x965)](_0x8db33b),_0x14c9b0=this[_0x3176ba(0xb29)](_0x3cf841)[_0x3176ba(0xa28)];return _0x14c9b0<=_0xddf3bc['width']?_0x3176ba(0xa2b):_0x3176ba(0xb0d)!==_0x3176ba(0xb0d)?!![]:_0x3176ba(0x192);}}}return _0x3176ba(0x488);},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0xa46)]=function(_0x1d0096){const _0x1c97d2=_0x3237d7,_0x5a8bd2=this[_0x1c97d2(0x965)](_0x1d0096),_0xde4040=this[_0x1c97d2(0x8bf)](_0x1d0096),_0x26e642=this[_0x1c97d2(0xb29)](_0xde4040)[_0x1c97d2(0xa28)];this[_0x1c97d2(0x759)](this[_0x1c97d2(0x459)](_0x1d0096));const _0x58d17c=this[_0x1c97d2(0x465)]();if(_0x58d17c===_0x1c97d2(0xad0))this[_0x1c97d2(0x83c)](_0xde4040,_0x5a8bd2['x']+_0x5a8bd2['width']-_0x26e642,_0x5a8bd2['y'],_0x26e642);else{if(_0x58d17c===_0x1c97d2(0x415)){if(_0x1c97d2(0x22f)===_0x1c97d2(0x481))_0xbb29df=_0x110845[_0x1c97d2(0x63d)]/0x2,_0x5060e8=_0x3727f7[_0x1c97d2(0x747)]/0x2;else{const _0x4b0098=_0x5a8bd2['x']+Math[_0x1c97d2(0x521)]((_0x5a8bd2[_0x1c97d2(0xa28)]-_0x26e642)/0x2);this[_0x1c97d2(0x83c)](_0xde4040,_0x4b0098,_0x5a8bd2['y'],_0x26e642);}}else{if(_0x1c97d2(0x9e2)!==_0x1c97d2(0x9e2)){const _0x187485=_0x1c97d2(0xb5e)['format'](_0x11efff[_0x1c97d2(0x97f)]()),_0x4cac7e=this[_0x1c97d2(0x518)](_0x187485,_0x2e8354),_0x3f44b5=_0x34f007[_0x1c97d2(0x9a0)]();_0x3f44b5!==''?_0x4cac7e['bitmap']=_0x4003df[_0x1c97d2(0x108)](_0x3f44b5):_0x4cac7e[_0x1c97d2(0x651)]=_0x4738bc['_emptyBitmap'];const _0x561196=this[_0x1c97d2(0x901)](_0x2fadc5);_0x4cac7e[_0x1c97d2(0xa99)]['x']=0.5,_0x4cac7e[_0x1c97d2(0xa99)]['y']=0x1;let _0x3083e5=_0x250718[_0x1c97d2(0x222)](_0x561196['x']+_0x561196['width']/0x2)+this[_0x1c97d2(0x386)];_0x3083e5+=_0x4629ea[_0x1c97d2(0xad8)]();let _0x243b9b=_0x2c5683[_0x1c97d2(0x222)](this[_0x1c97d2(0x766)]);_0x243b9b+=_0x18500a[_0x1c97d2(0xb2a)](),_0x4cac7e['move'](_0x3083e5,_0x243b9b);const _0x108dfe=_0xab8b5d[_0x1c97d2(0xa4)][_0x1c97d2(0x98d)][_0x1c97d2(0x243)]['PortraitScale'];_0x4cac7e[_0x1c97d2(0x845)]['x']=_0x108dfe,_0x4cac7e[_0x1c97d2(0x845)]['y']=_0x108dfe,_0x4cac7e['show']();}else this[_0x1c97d2(0x83c)](_0xde4040,_0x5a8bd2['x'],_0x5a8bd2['y'],_0x26e642);}}},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0x635)]=function(_0x23213d){const _0x59e8cb=_0x3237d7;this['commandName'](_0x23213d)[_0x59e8cb(0x453)](/\\I\[(\d+)\]/i);const _0x1cf3a9=Number(RegExp['$1'])||0x0,_0x4bb637=this[_0x59e8cb(0x965)](_0x23213d),_0x324404=_0x4bb637['x']+Math[_0x59e8cb(0x521)]((_0x4bb637[_0x59e8cb(0xa28)]-ImageManager[_0x59e8cb(0x17c)])/0x2),_0x12b002=_0x4bb637['y']+(_0x4bb637['height']-ImageManager[_0x59e8cb(0x20b)])/0x2;this['drawIcon'](_0x1cf3a9,_0x324404,_0x12b002);},Window_PartyCommand[_0x3237d7(0x735)]['hide']=function(){},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0xa8b)]=function(){const _0x492b4c=_0x3237d7;Window_Command[_0x492b4c(0x735)]['activate'][_0x492b4c(0x4db)](this);const _0x2c4786=this[_0x492b4c(0x457)]();_0x2c4786===_0x492b4c(0xa93)&&this['showHelpWindow']();},Window_PartyCommand['prototype']['battleLayoutStyle']=function(){const _0x316e1b=_0x3237d7;if(this['_battleLayoutStyle'])return this[_0x316e1b(0x7b6)];return this[_0x316e1b(0x7b6)]=SceneManager[_0x316e1b(0x2a7)]['battleLayoutStyle'](),this[_0x316e1b(0x7b6)];},Window_PartyCommand[_0x3237d7(0x735)][_0x3237d7(0xc7)]=function(){const _0x53107d=_0x3237d7,_0x27f096=VisuMZ[_0x53107d(0xa4)][_0x53107d(0x98d)]['PartyCmd'],_0x370529=this[_0x53107d(0xae4)]();switch(_0x370529){case'fight':this[_0x53107d(0x2fe)][_0x53107d(0x5ee)](_0x27f096['HelpFight']);break;case _0x53107d(0x223):this[_0x53107d(0x2fe)][_0x53107d(0x5ee)](_0x27f096[_0x53107d(0x920)]);break;case'options':this['_helpWindow'][_0x53107d(0x5ee)](_0x27f096[_0x53107d(0xaa0)]);break;case _0x53107d(0x11c):this[_0x53107d(0x2fe)][_0x53107d(0x5ee)](_0x27f096[_0x53107d(0xb6b)]);break;default:this['_helpWindow']['setText']('');break;}},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x7cd)]=Window_ActorCommand['prototype'][_0x3237d7(0xbb)],Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(_0xc34a1){const _0x36d534=_0x3237d7;VisuMZ[_0x36d534(0xa4)][_0x36d534(0x7cd)]['call'](this,_0xc34a1),this[_0x36d534(0xb4f)](_0xc34a1);},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0xb4f)]=function(_0x281f28){const _0x762fa6=_0x3237d7,_0xd5061a=new Rectangle(0x0,0x0,_0x281f28[_0x762fa6(0xa28)],_0x281f28[_0x762fa6(0x766)]);this[_0x762fa6(0x3ca)]=new Window_Base(_0xd5061a),this[_0x762fa6(0x3ca)][_0x762fa6(0x61e)]=0x0,this[_0x762fa6(0x70d)](this['_commandNameWindow']),this[_0x762fa6(0x776)]();},Window_ActorCommand['prototype']['callUpdateHelp']=function(){const _0x2f1879=_0x3237d7;Window_Command[_0x2f1879(0x735)][_0x2f1879(0x941)][_0x2f1879(0x4db)](this);if(this['_commandNameWindow'])this[_0x2f1879(0x776)]();},Window_ActorCommand['prototype'][_0x3237d7(0x776)]=function(){const _0xd17ae9=_0x3237d7,_0x33b92b=this['_commandNameWindow'];_0x33b92b[_0xd17ae9(0x5b6)][_0xd17ae9(0x2d9)]();const _0x492ac6=this[_0xd17ae9(0x258)](this[_0xd17ae9(0xa27)]());if(_0x492ac6===_0xd17ae9(0x192)&&this[_0xd17ae9(0x523)]()>0x0){const _0x2e5771=this[_0xd17ae9(0x965)](this[_0xd17ae9(0xa27)]());let _0x406f3e=this['commandName'](this['index']());_0x406f3e=_0x406f3e['replace'](/\\I\[(\d+)\]/gi,''),_0x33b92b[_0xd17ae9(0x977)](),this[_0xd17ae9(0x274)](_0x406f3e,_0x2e5771),this[_0xd17ae9(0x6a3)](_0x406f3e,_0x2e5771),this[_0xd17ae9(0x7e6)](_0x406f3e,_0x2e5771);}},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x274)]=function(_0x48ef2e,_0x3a9ac8){},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x6a3)]=function(_0x238340,_0x3f4bcd){const _0x1772fa=_0x3237d7,_0x2f04e7=this[_0x1772fa(0x3ca)];_0x2f04e7[_0x1772fa(0x1ed)](_0x238340,0x0,_0x3f4bcd['y'],_0x2f04e7[_0x1772fa(0x541)],_0x1772fa(0x415));},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x7e6)]=function(_0x1f1745,_0x17b006){const _0x258acf=_0x3237d7,_0xd2dccb=this['_commandNameWindow'],_0x3a7af6=$gameSystem[_0x258acf(0x1de)](),_0x41d8c7=_0x17b006['x']+Math[_0x258acf(0x521)](_0x17b006['width']/0x2)+_0x3a7af6;_0xd2dccb['x']=_0xd2dccb[_0x258acf(0xa28)]/-0x2+_0x41d8c7,_0xd2dccb['y']=Math['floor'](_0x17b006[_0x258acf(0x766)]/0x2);},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x8e1)]=function(){const _0x182c33=_0x3237d7;if(!this['_actor'])return;const _0x525d3a=this[_0x182c33(0x1e4)][_0x182c33(0xc9)]();for(const _0x45939c of _0x525d3a){this[_0x182c33(0x8a9)](_0x45939c[_0x182c33(0x566)]()[_0x182c33(0x194)]());}},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x8a9)]=function(_0x248937){const _0x634b7=_0x3237d7;_0x248937===_0x634b7(0x5f6)&&this[_0x634b7(0x49f)]();[_0x634b7(0xa31),_0x634b7(0x4bf)]['includes'](_0x248937)&&this[_0x634b7(0xbd)]();_0x248937===_0x634b7(0xf2)&&('wSxcg'===_0x634b7(0x4ce)?this['subject']()[_0x634b7(0x866)]()&&_0x435683['BattleCore'][_0x634b7(0x4cc)]['call'](this):this[_0x634b7(0xba)]());if(_0x248937===_0x634b7(0x843)){if(_0x634b7(0x1d7)==='IJRDK')this['addItemCommand']();else{if(this[_0x634b7(0x9df)]()[_0x634b7(0x4fe)][_0x634b7(0x453)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x45e21d[_0x634b7(0x735)][_0x634b7(0x85e)][_0x634b7(0x4db)](this);}}_0x248937===_0x634b7(0x52d)&&this[_0x634b7(0x1aa)]();_0x248937==='AUTO\x20BATTLE'&&(_0x634b7(0x262)!==_0x634b7(0x262)?(this['_actorCommandWindow'][_0x634b7(0x956)](this[_0x634b7(0x2fe)]),this[_0x634b7(0x14c)][_0x634b7(0x956)](this[_0x634b7(0x2fe)])):this[_0x634b7(0x7a8)]());if(_0x248937['match'](/STYPE: (\d+)/i)){const _0x34ade1=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x34ade1);}else{if(_0x248937[_0x634b7(0x453)](/STYPE: (.*)/i)){const _0x29c19c=DataManager[_0x634b7(0x4b9)](RegExp['$1']);this[_0x634b7(0x1ad)](_0x29c19c);}}_0x248937===_0x634b7(0x52c)&&this[_0x634b7(0x46b)]();if(_0x248937[_0x634b7(0x453)](/SKILL: (\d+)/i)){const _0x502735=Number(RegExp['$1']);this[_0x634b7(0x455)]($dataSkills[_0x502735]);}else{if(_0x248937[_0x634b7(0x453)](/SKILL: (.*)/i)){const _0x4c3481=DataManager[_0x634b7(0x126)](RegExp['$1']);this[_0x634b7(0x455)]($dataSkills[_0x4c3481]);}}if(_0x248937==='PARTY'&&Imported[_0x634b7(0x431)]){if(_0x634b7(0x672)!==_0x634b7(0x672)){const _0x2584a2=this[_0x634b7(0x820)];_0x1573ac[_0x634b7(0xa4)][_0x634b7(0x7b7)][_0x634b7(0x4db)](this,_0x245875),this[_0x634b7(0x731)](_0x44ae0a);if(_0x2584a2!==_0x2b27ed)this['updateShadowScale']();}else this['addPartyCommand']();}[_0x634b7(0x67b),_0x634b7(0x7f8)][_0x634b7(0x231)](_0x248937)&&Imported[_0x634b7(0xb4b)]&&this[_0x634b7(0x7fb)](),_0x248937===_0x634b7(0x96d)&&Imported[_0x634b7(0xab3)]&&this['addWeaponSwapCommand'](!![]);},Window_ActorCommand['prototype']['addAttackCommand']=function(){const _0x2aa710=_0x3237d7,_0x2b2208=$dataSkills[this[_0x2aa710(0x1e4)][_0x2aa710(0x564)]()];if(!_0x2b2208)return;if(!this[_0x2aa710(0x23d)](_0x2b2208))return;const _0x1fb203=this['commandStyle'](),_0x3e6e9f=DataManager['battleCommandName'](_0x2b2208),_0x3df311=DataManager[_0x2aa710(0x4b4)](_0x2b2208),_0x2aba36=_0x1fb203==='text'?_0x3e6e9f:_0x2aa710(0x861)[_0x2aa710(0x117)](_0x3df311,_0x3e6e9f);this[_0x2aa710(0x557)](_0x2aba36,_0x2aa710(0x34b),this[_0x2aa710(0x1e4)][_0x2aa710(0x1ba)]());},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0xba)]=function(){const _0x1d6319=_0x3237d7,_0x2d29b4=$dataSkills[this[_0x1d6319(0x1e4)]['guardSkillId']()];if(!_0x2d29b4)return;if(!this['canAddSkillCommand'](_0x2d29b4))return;const _0x193497=this['commandStyle'](),_0x5b2a57=DataManager['battleCommandName'](_0x2d29b4),_0x12d8c3=DataManager[_0x1d6319(0x4b4)](_0x2d29b4),_0x4cbded=_0x193497==='text'?_0x5b2a57:_0x1d6319(0x861)[_0x1d6319(0x117)](_0x12d8c3,_0x5b2a57);this[_0x1d6319(0x557)](_0x4cbded,_0x1d6319(0x77d),this[_0x1d6319(0x1e4)]['canGuard']());},Window_ActorCommand[_0x3237d7(0x735)]['addItemCommand']=function(){const _0x4157c1=_0x3237d7,_0xf97cce=this[_0x4157c1(0x2cd)](),_0x4f129a=VisuMZ[_0x4157c1(0xa4)][_0x4157c1(0x98d)]['ActorCmd'][_0x4157c1(0x879)],_0x418a33=_0xf97cce==='text'?TextManager[_0x4157c1(0x7be)]:_0x4157c1(0x861)[_0x4157c1(0x117)](_0x4f129a,TextManager[_0x4157c1(0x7be)]),_0x30717d=this[_0x4157c1(0x7e3)]();this[_0x4157c1(0x557)](_0x418a33,_0x4157c1(0x7be),_0x30717d);},Window_ActorCommand['prototype']['isItemCommandEnabled']=function(){const _0x515352=_0x3237d7;return this['_actor']&&this[_0x515352(0x1e4)][_0x515352(0xacb)]();},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0xbd)]=function(){const _0x925825=_0x3237d7,_0x45d7c6=this[_0x925825(0x1e4)][_0x925825(0x611)]();for(const _0x1bcc8a of _0x45d7c6){this[_0x925825(0x1ad)](_0x1bcc8a);}},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x1ad)]=function(_0x362d14){const _0x3f5754=_0x3237d7;let _0x1b0b81=$dataSystem[_0x3f5754(0x611)][_0x362d14];if(!_0x1b0b81)return;let _0x5842f9=_0x1b0b81;const _0x3d67c4=this['commandStyle']();if(_0x3d67c4===_0x3f5754(0x488)){if(_0x3f5754(0xb36)!==_0x3f5754(0xb36)){if(this[_0x3f5754(0x9f5)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x3f5754(0x43a)]()[_0x3f5754(0x5c1)];}else return!![];}else _0x5842f9=_0x5842f9[_0x3f5754(0x268)](/\x1I\[(\d+)\]/gi,''),_0x5842f9=_0x5842f9[_0x3f5754(0x268)](/\\I\[(\d+)\]/gi,'');}else{if(!_0x1b0b81['match'](/\\I\[(\d+)\]/i)){const _0x1f402c=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x3f5754(0x92f)][_0x3f5754(0x98d)][_0x3f5754(0x637)]:VisuMZ['BattleCore']['Settings']['ActorCmd'],_0x4a6d91=$dataSystem[_0x3f5754(0xd6)]['includes'](_0x362d14),_0xd7b20c=_0x4a6d91?_0x1f402c['IconStypeMagic']:_0x1f402c[_0x3f5754(0x558)];_0x5842f9=_0x3f5754(0x861)['format'](_0xd7b20c,_0x1b0b81);}}this[_0x3f5754(0x557)](_0x5842f9,_0x3f5754(0x8b2),!![],_0x362d14);},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x46b)]=function(){const _0x2ae26c=_0x3237d7,_0x1c10c2=this[_0x2ae26c(0x1e4)][_0x2ae26c(0x611)](),_0x46261f=this[_0x2ae26c(0x1e4)][_0x2ae26c(0x187)]();for(const _0xdddcba of _0x46261f){if(!_0xdddcba)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(_0x2ae26c(0x2ae)===_0x2ae26c(0xb3e)){const _0x51abdc=_0x177095[_0x2ae26c(0x4fe)];if(_0x51abdc[_0x2ae26c(0x453)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x21574c(_0x4ef2ad['$1'])*0.01;else{if(_0x51abdc[_0x2ae26c(0x453)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x2b2625(_0x4370d6['$1'])||0x0;}}else{if(this[_0x2ae26c(0xa9f)](_0xdddcba))continue;if(this[_0x2ae26c(0x902)](_0xdddcba))continue;}}else{if(!_0x1c10c2[_0x2ae26c(0x231)](_0xdddcba['stypeId']))continue;}this['addSingleSkillCommand'](_0xdddcba);}},Window_ActorCommand['prototype'][_0x3237d7(0xa9f)]=function(_0x328441){const _0x116ca5=_0x3237d7,_0x422889=this[_0x116ca5(0x1e4)][_0x116ca5(0x611)](),_0xb55419=_0x422889[_0x116ca5(0x921)](_0x350732=>DataManager[_0x116ca5(0x45a)](_0x328441)[_0x116ca5(0x231)](_0x350732));return _0xb55419[_0x116ca5(0x60c)]<=0x0;},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x902)]=function(_0x182f30){const _0x287ccc=_0x3237d7;if(!Window_SkillList[_0x287ccc(0x735)][_0x287ccc(0x7d9)][_0x287ccc(0x4db)](this,_0x182f30))return!![];if(!Window_SkillList[_0x287ccc(0x735)][_0x287ccc(0x66e)][_0x287ccc(0x4db)](this,_0x182f30))return!![];if(!Window_SkillList['prototype'][_0x287ccc(0x7fa)][_0x287ccc(0x4db)](this,_0x182f30))return!![];return![];},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x455)]=function(_0x593b30){const _0x67f146=_0x3237d7;if(!_0x593b30)return;if(!this[_0x67f146(0x23d)](_0x593b30))return;const _0x2686ad=this['commandStyle'](),_0x4777ad=DataManager['battleCommandName'](_0x593b30),_0x2ae2d6=DataManager['battleCommandIcon'](_0x593b30),_0x3d3e91=_0x2686ad===_0x67f146(0x488)?_0x4777ad:_0x67f146(0x861)[_0x67f146(0x117)](_0x2ae2d6,_0x4777ad),_0x1d24ee=this[_0x67f146(0x1e4)][_0x67f146(0x779)](_0x593b30);this[_0x67f146(0x557)](_0x3d3e91,_0x67f146(0x7e7),_0x1d24ee,_0x593b30['id']);},Window_ActorCommand[_0x3237d7(0x735)]['canAddSkillCommand']=function(_0x26a906){const _0x5d3b1b=_0x3237d7,_0x22b79d=_0x26a906['note'];if(_0x22b79d['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x5d3b1b(0x1e4)][_0x5d3b1b(0x948)](_0x26a906['id']))return![];}if(_0x22b79d[_0x5d3b1b(0x453)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x5d3b1b(0x38b)===_0x5d3b1b(0x38b)){if(!this[_0x5d3b1b(0x1e4)][_0x5d3b1b(0xadd)](_0x26a906['id']))return![];}else _0x1b19b9[_0x5d3b1b(0x3c7)]=!![],this[_0x5d3b1b(0x98e)](_0x3af372);}const _0x452768=VisuMZ['BattleCore'][_0x5d3b1b(0x17e)](_0x26a906,_0x5d3b1b(0x601));if(VisuMZ['BattleCore']['JS'][_0x452768]){if(!VisuMZ[_0x5d3b1b(0xa4)]['JS'][_0x452768]['call'](this,this[_0x5d3b1b(0x1e4)],_0x26a906))return![];}return VisuMZ[_0x5d3b1b(0xa4)]['CheckSkillCommandShowSwitches'](_0x26a906);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x583)]=function(_0x174d23){const _0x53697d=_0x3237d7,_0x3d3f00=_0x174d23['note'];if(_0x3d3f00['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x53697d(0x4b6)!==_0x53697d(0x4b6)){if(this[_0x53697d(0x343)][_0x53697d(0x221)]())return![];return _0x14a62c[_0x53697d(0xa4)][_0x53697d(0x235)][_0x53697d(0x4db)](this,_0x51efd9);}else{const _0x417a1c=JSON[_0x53697d(0x176)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3fb67e of _0x417a1c){if(!$gameSwitches[_0x53697d(0x335)](_0x3fb67e))return![];}return!![];}}if(_0x3d3f00[_0x53697d(0x453)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x275f41=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3b7eb3 of _0x275f41){if(!$gameSwitches[_0x53697d(0x335)](_0x3b7eb3))return![];}return!![];}if(_0x3d3f00[_0x53697d(0x453)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1fe3da=JSON['parse']('['+RegExp['$1'][_0x53697d(0x453)](/\d+/g)+']');for(const _0x56dcdb of _0x1fe3da){if(_0x53697d(0x72f)==='UcRso'){if($gameSwitches[_0x53697d(0x335)](_0x56dcdb))return!![];}else{const _0x3372aa=_0x10fbe6[_0x14bb1d];if(!_0x3372aa)return'';let _0x369f4d='';_0x369f4d+=_0x3372aa['name'];for(const _0x23f819 of _0x3372aa[_0x53697d(0x1fa)]){for(const _0x2f8936 of _0x23f819[_0x53697d(0x5fc)]){[0x6c,0x198][_0x53697d(0x231)](_0x2f8936[_0x53697d(0xb3c)])&&(_0x369f4d+='\x0a',_0x369f4d+=_0x2f8936[_0x53697d(0x149)][0x0]);}}return _0x369f4d;}}return![];}if(_0x3d3f00['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x53697d(0x757)===_0x53697d(0x757)){const _0x55b6f0=JSON['parse']('['+RegExp['$1'][_0x53697d(0x453)](/\d+/g)+']');for(const _0x301664 of _0x55b6f0){if(_0x53697d(0xd0)!==_0x53697d(0xa63)){if(!$gameSwitches[_0x53697d(0x335)](_0x301664))return!![];}else _0xea59ec[_0x53697d(0xa4)][_0x53697d(0xaa1)][_0x53697d(0x4db)](this,_0x4a7328);}return![];}else _0x3f1d37[_0x53697d(0xa4)][_0x53697d(0x3f6)]&&_0x37c256[_0x53697d(0xa4)][_0x53697d(0x3f6)][_0x53697d(0x4db)](this,_0x4435b7),_0x274da8[_0x53697d(0xa4)][_0x53697d(0xcb)](_0x26827a);}if(_0x3d3f00[_0x53697d(0x453)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x113fa6=JSON[_0x53697d(0x176)]('['+RegExp['$1'][_0x53697d(0x453)](/\d+/g)+']');for(const _0x48750f of _0x113fa6){if(_0x53697d(0x641)===_0x53697d(0x35c))return _0x2d44e9[_0x53697d(0xa4)][_0x53697d(0x98d)][_0x53697d(0x626)][_0x53697d(0xa90)][_0x53697d(0x4db)](this,_0x5a756f,_0x3a465c);else{if(!$gameSwitches[_0x53697d(0x335)](_0x48750f))return!![];}}return![];}if(_0x3d3f00[_0x53697d(0x453)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x53697d(0x582)!==_0x53697d(0x796)){const _0x251f16=JSON[_0x53697d(0x176)]('['+RegExp['$1'][_0x53697d(0x453)](/\d+/g)+']');for(const _0x550b83 of _0x251f16){if($gameSwitches[_0x53697d(0x335)](_0x550b83))return![];}return!![];}else return![];}return!![];},Window_ActorCommand['prototype'][_0x3237d7(0x1aa)]=function(){const _0x47c044=_0x3237d7,_0x282e41=this['commandStyle'](),_0x43775c=VisuMZ['BattleCore']['Settings'][_0x47c044(0x661)]['CmdIconEscape'],_0x591b3a=_0x282e41==='text'?TextManager[_0x47c044(0x11c)]:'\x5cI[%1]%2'[_0x47c044(0x117)](_0x43775c,TextManager[_0x47c044(0x11c)]),_0x1f6a61=this[_0x47c044(0x691)]();this[_0x47c044(0x557)](_0x591b3a,_0x47c044(0x11c),_0x1f6a61);},Window_ActorCommand['prototype'][_0x3237d7(0x691)]=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x7a8)]=function(){const _0x338537=_0x3237d7,_0x471035=this['commandStyle'](),_0x4fd096=VisuMZ[_0x338537(0xa4)][_0x338537(0x98d)]['PartyCmd'][_0x338537(0x753)],_0x3ab3e0=_0x471035===_0x338537(0x488)?TextManager['autoBattle']:_0x338537(0x861)[_0x338537(0x117)](_0x4fd096,TextManager[_0x338537(0x223)]),_0x406b82=this[_0x338537(0x509)]();this[_0x338537(0x557)](_0x3ab3e0,'autoBattle',_0x406b82);},Window_ActorCommand[_0x3237d7(0x735)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand['prototype']['itemTextAlign']=function(){const _0x47c9d6=_0x3237d7;return VisuMZ[_0x47c9d6(0xa4)][_0x47c9d6(0x98d)][_0x47c9d6(0x4c5)][_0x47c9d6(0x7cb)];},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x6d8)]=function(_0xa8115){const _0x29abab=_0x3237d7,_0x35df4c=this['commandStyleCheck'](_0xa8115);if(_0x35df4c==='iconText')this[_0x29abab(0xa46)](_0xa8115);else _0x35df4c===_0x29abab(0x192)?'CdxSs'!=='CdxSs'?(_0x256a87[_0x29abab(0xa4)][_0x29abab(0x1a1)][_0x29abab(0x4db)](this,_0x5b27b1,_0x3c7242),this[_0x29abab(0x4a1)]()):this['drawItemStyleIcon'](_0xa8115):Window_Command[_0x29abab(0x735)][_0x29abab(0x6d8)][_0x29abab(0x4db)](this,_0xa8115);this[_0x29abab(0x771)](_0xa8115);},Window_ActorCommand['prototype'][_0x3237d7(0x2cd)]=function(){const _0x48c606=_0x3237d7;return VisuMZ['BattleCore'][_0x48c606(0x98d)][_0x48c606(0x4c5)][_0x48c606(0x756)];},Window_ActorCommand[_0x3237d7(0x735)]['commandStyleCheck']=function(_0x11083d){const _0x5e575b=_0x3237d7;if(_0x11083d<0x0)return _0x5e575b(0x488);const _0x52ab55=this[_0x5e575b(0x2cd)]();if(_0x52ab55!==_0x5e575b(0x6b0))return _0x52ab55;else{if(this[_0x5e575b(0x523)]()>0x0){const _0xce509a=this[_0x5e575b(0x8bf)](_0x11083d);if(_0xce509a[_0x5e575b(0x453)](/\\I\[(\d+)\]/i)){if(_0x5e575b(0x3b8)===_0x5e575b(0xb31))this[_0x5e575b(0x857)]('fnordRemovedStates'),this[_0x5e575b(0x857)](_0x5e575b(0x48c)),this[_0x5e575b(0x857)](_0x5e575b(0x828)),this[_0x5e575b(0x857)](_0x5e575b(0x43b),_0x100b12[_0x5e575b(0x31d)][_0x5e575b(0x117)](_0x4c909c['name']())),this[_0x5e575b(0x857)](_0x5e575b(0x6ca));else{const _0x47b247=this[_0x5e575b(0x965)](_0x11083d),_0x4cf328=this[_0x5e575b(0xb29)](_0xce509a)[_0x5e575b(0xa28)];if(_0x4cf328<=_0x47b247['width']){if(_0x5e575b(0x5a6)===_0x5e575b(0x213))this['applyFreezeMotionFrames'](),_0xac84d0[_0x5e575b(0xa4)]['Sprite_Actor_updateFrame'][_0x5e575b(0x4db)](this);else return _0x5e575b(0xa2b);}else return _0x5e575b(0x192);}}}}return _0x5e575b(0x488);},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0xa46)]=function(_0x8fdddb){const _0x59775a=_0x3237d7,_0x2f7566=this['itemLineRect'](_0x8fdddb),_0x4bbc94=this['commandName'](_0x8fdddb),_0x257e27=this[_0x59775a(0xb29)](_0x4bbc94)[_0x59775a(0xa28)];this[_0x59775a(0x759)](this[_0x59775a(0x459)](_0x8fdddb));const _0x46e996=this[_0x59775a(0x465)]();if(_0x46e996==='right')_0x59775a(0x610)!==_0x59775a(0x532)?this['drawTextEx'](_0x4bbc94,_0x2f7566['x']+_0x2f7566[_0x59775a(0xa28)]-_0x257e27,_0x2f7566['y'],_0x257e27):(_0x4cae65--,_0x53db8d++);else{if(_0x46e996===_0x59775a(0x415)){const _0x35a42c=_0x2f7566['x']+Math[_0x59775a(0x521)]((_0x2f7566['width']-_0x257e27)/0x2);this['drawTextEx'](_0x4bbc94,_0x35a42c,_0x2f7566['y'],_0x257e27);}else this[_0x59775a(0x83c)](_0x4bbc94,_0x2f7566['x'],_0x2f7566['y'],_0x257e27);}},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x635)]=function(_0x1b8959){const _0x4c6e1d=_0x3237d7;this[_0x4c6e1d(0x8bf)](_0x1b8959)['match'](/\\I\[(\d+)\]/i);const _0x485ba1=Number(RegExp['$1'])||0x0,_0x126cc9=this[_0x4c6e1d(0x965)](_0x1b8959),_0x58a96e=_0x126cc9['x']+Math['floor']((_0x126cc9[_0x4c6e1d(0xa28)]-ImageManager[_0x4c6e1d(0x17c)])/0x2),_0x3a22f5=_0x126cc9['y']+(_0x126cc9[_0x4c6e1d(0x766)]-ImageManager[_0x4c6e1d(0x20b)])/0x2;this[_0x4c6e1d(0xb22)](_0x485ba1,_0x58a96e,_0x3a22f5);},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x771)]=function(_0x3a16d0){const _0xd40fc5=_0x3237d7;if(!(VisuMZ[_0xd40fc5(0xa4)][_0xd40fc5(0x98d)][_0xd40fc5(0x4c5)][_0xd40fc5(0xa01)]??!![]))return;const _0x3c92be=this[_0xd40fc5(0x5b9)](_0x3a16d0);if(![_0xd40fc5(0x34b),_0xd40fc5(0x77d),_0xd40fc5(0x7e7)]['includes'](_0x3c92be))return;const _0x105475=this[_0xd40fc5(0x965)](_0x3a16d0);let _0x3a7f6c=null;if(_0x3c92be===_0xd40fc5(0x34b))_0x3a7f6c=$dataSkills[this[_0xd40fc5(0x1e4)]['attackSkillId']()];else _0x3c92be===_0xd40fc5(0x77d)?_0x3a7f6c=$dataSkills[this[_0xd40fc5(0x1e4)][_0xd40fc5(0x100)]()]:_0xd40fc5(0xb01)===_0xd40fc5(0xb01)?_0x3a7f6c=$dataSkills[this[_0xd40fc5(0x5a1)][_0x3a16d0][_0xd40fc5(0x25d)]]:this[_0xd40fc5(0x608)]()?this[_0xd40fc5(0x581)]():_0x5cfdaf[_0xd40fc5(0xa4)][_0xd40fc5(0x76d)]['call'](this);this['drawSkillCost'](this[_0xd40fc5(0x1e4)],_0x3a7f6c,_0x105475['x'],_0x105475['y'],_0x105475[_0xd40fc5(0xa28)]);},Window_ActorCommand['prototype'][_0x3237d7(0x1ff)]=function(_0x4a19e9,_0x587fad,_0x18241b,_0x824dc9,_0x2d4f36){const _0xffd4d6=_0x3237d7;if(!_0x587fad)return;Imported[_0xffd4d6(0x9c3)]?Window_Command[_0xffd4d6(0x735)][_0xffd4d6(0x1ff)][_0xffd4d6(0x4db)](this,_0x4a19e9,_0x587fad,_0x18241b,_0x824dc9,_0x2d4f36):Window_SkillList['prototype']['drawSkillCost']['call'](this,_0x587fad,_0x18241b,_0x824dc9,_0x2d4f36);},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x181)]=function(){},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0xa8b)]=function(){const _0x172243=_0x3237d7;Window_Command[_0x172243(0x735)][_0x172243(0xa8b)][_0x172243(0x4db)](this);const _0x1d4c49=this['battleLayoutStyle']();_0x1d4c49===_0x172243(0xa93)&&this[_0x172243(0x500)]();},Window_ActorCommand[_0x3237d7(0x735)]['battleLayoutStyle']=function(){const _0x20c447=_0x3237d7;if(this[_0x20c447(0x7b6)])return this['_battleLayoutStyle'];return this[_0x20c447(0x7b6)]=SceneManager[_0x20c447(0x2a7)][_0x20c447(0x457)](),this[_0x20c447(0x7b6)];},VisuMZ[_0x3237d7(0xa4)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x3237d7(0x735)]['setup'],Window_ActorCommand['prototype'][_0x3237d7(0x56c)]=function(_0x369127){const _0x865b3e=_0x3237d7,_0x4e377f=this[_0x865b3e(0x457)]();if(_0x369127&&['xp','portrait'][_0x865b3e(0x231)](_0x4e377f))this['resizeWindowXPStyle'](_0x369127);else _0x369127&&[_0x865b3e(0xa93)][_0x865b3e(0x231)](_0x4e377f)&&('vfULP'!=='xEtje'?(this[_0x865b3e(0x8ce)](_0x369127),this[_0x865b3e(0x500)]()):_0xcb8636[_0x2235f5]===0x1&&this['_activeWeaponSlot']!==_0x5986fd&&(_0x285a0f[_0x15a333]=null));VisuMZ[_0x865b3e(0xa4)][_0x865b3e(0x7f4)][_0x865b3e(0x4db)](this,_0x369127);if(_0x369127&&$gameTroop[_0x865b3e(0x7ff)]()['length']>0x0&&_0x369127[_0x865b3e(0x1d5)]()){if(_0x865b3e(0x4aa)!==_0x865b3e(0x784))_0x369127[_0x865b3e(0x1d5)]()[_0x865b3e(0xaa5)]();else{if(!this[_0x865b3e(0xe7)])this[_0x865b3e(0x586)]();return this[_0x865b3e(0xe7)][_0x865b3e(0x60c)]>0x0;}}},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x7d2)]=function(_0x32db5c){const _0x5c4368=_0x3237d7,_0x4919a4=Math[_0x5c4368(0x222)](Graphics[_0x5c4368(0x63d)]/0x3),_0x564772=Math[_0x5c4368(0x222)](Graphics[_0x5c4368(0x63d)]/$gameParty[_0x5c4368(0x4ff)]()['length']),_0x376c75=Math[_0x5c4368(0x9c4)](_0x4919a4,_0x564772),_0x23eacd=this['fittingHeight'](VisuMZ[_0x5c4368(0xa4)][_0x5c4368(0x98d)][_0x5c4368(0x243)]['XPActorCommandLines']),_0x5ef55d=_0x564772*_0x32db5c['index']()+(_0x564772-_0x376c75)/0x2,_0x1c7340=SceneManager[_0x5c4368(0x2a7)][_0x5c4368(0x364)]['y']-_0x23eacd;this[_0x5c4368(0xaf8)](_0x5ef55d,_0x1c7340,_0x376c75,_0x23eacd),this[_0x5c4368(0x29a)](),this[_0x5c4368(0x90b)](0x1);},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x8ce)]=function(_0x1cf2c6){const _0xb5174d=_0x3237d7,_0x31f9a4=SceneManager[_0xb5174d(0x2a7)][_0xb5174d(0x664)]();this['move'](_0x31f9a4['x'],_0x31f9a4['y'],_0x31f9a4['width'],_0x31f9a4['height']),this[_0xb5174d(0x29a)](),this[_0xb5174d(0x90b)](0x0);},Window_ActorCommand[_0x3237d7(0x735)][_0x3237d7(0x1b7)]=function(){const _0x1c915b=_0x3237d7;if(this[_0x1c915b(0x339)]){if(_0x1c915b(0x111)===_0x1c915b(0x111)){const _0x543842=this[_0x1c915b(0x339)][_0x1c915b(0x651)],_0xe02879=this['width']-0x8,_0x3a4c42=this['height'],_0x3ec8f6=this[_0x1c915b(0x386)],_0x5cb65d=ColorManager[_0x1c915b(0x2ff)](),_0x4d4c5c=ColorManager[_0x1c915b(0xc4)]();this[_0x1c915b(0x339)]['x']=0x4,_0x543842[_0x1c915b(0x39f)](_0xe02879,_0x3a4c42),_0x543842[_0x1c915b(0x30d)](0x0,0x0,_0xe02879,_0x3ec8f6,_0x4d4c5c,_0x5cb65d,!![]),_0x543842['fillRect'](0x0,_0x3ec8f6,_0xe02879,_0x3a4c42-_0x3ec8f6*0x2,_0x5cb65d),_0x543842[_0x1c915b(0x30d)](0x0,_0x3a4c42-_0x3ec8f6,_0xe02879,_0x3ec8f6,_0x5cb65d,_0x4d4c5c,!![]),this[_0x1c915b(0x339)][_0x1c915b(0x3f0)](0x0,0x0,_0xe02879,_0x3a4c42);}else _0x187c17['BattleCore'][_0x1c915b(0x442)][_0x1c915b(0x4db)](this),this[_0x1c915b(0x651)]&&(this['bitmap'][_0x1c915b(0x133)]=_0x450564['BattleCore'][_0x1c915b(0x98d)][_0x1c915b(0x4da)][_0x1c915b(0xb7)]);}},Window_ActorCommand[_0x3237d7(0x735)]['updateHelp']=function(){const _0xf258eb=_0x3237d7;if(!this[_0xf258eb(0x1e4)])return;const _0x3e6757=VisuMZ[_0xf258eb(0xa4)][_0xf258eb(0x98d)]['ActorCmd'],_0x1b776e=this[_0xf258eb(0xae4)]();switch(_0x1b776e){case'attack':this[_0xf258eb(0x83f)]($dataSkills[this[_0xf258eb(0x1e4)][_0xf258eb(0x564)]()]);break;case _0xf258eb(0x77d):this[_0xf258eb(0x83f)]($dataSkills[this[_0xf258eb(0x1e4)][_0xf258eb(0x100)]()]);break;case _0xf258eb(0x8b2):const _0x46a3b3=_0x3e6757[_0xf258eb(0x301)],_0x18de0e=_0x46a3b3['format']($dataSystem['skillTypes'][this[_0xf258eb(0x92d)]()]);this[_0xf258eb(0x2fe)][_0xf258eb(0x5ee)](_0x18de0e);break;case _0xf258eb(0x7e7):this[_0xf258eb(0x83f)]($dataSkills[this[_0xf258eb(0x92d)]()]);break;case'item':this[_0xf258eb(0x2fe)][_0xf258eb(0x5ee)](_0x3e6757[_0xf258eb(0x472)]);break;case _0xf258eb(0x11c):this[_0xf258eb(0x2fe)]['setText'](_0x3e6757[_0xf258eb(0xb6b)]);break;case _0xf258eb(0x223):this[_0xf258eb(0x2fe)][_0xf258eb(0x5ee)](_0x3e6757[_0xf258eb(0x920)]);break;default:this[_0xf258eb(0x2fe)][_0xf258eb(0x5ee)]('');break;}},VisuMZ['BattleCore'][_0x3237d7(0x5f7)]=Window_BattleStatus['prototype'][_0x3237d7(0xbb)],Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(_0x973fec){const _0x4ef534=_0x3237d7;VisuMZ[_0x4ef534(0xa4)][_0x4ef534(0x5f7)][_0x4ef534(0x4db)](this,_0x973fec),this[_0x4ef534(0x12b)](),this[_0x4ef534(0xb4c)]();},Window_BattleStatus['prototype'][_0x3237d7(0x457)]=function(){const _0x44bba1=_0x3237d7;if(this[_0x44bba1(0x7b6)])return this[_0x44bba1(0x7b6)];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x44bba1(0x457)](),this[_0x44bba1(0x7b6)];},Window_BattleStatus[_0x3237d7(0x735)]['initBattleCore']=function(){const _0x5c9e13=_0x3237d7;this[_0x5c9e13(0x755)]=this[_0x5c9e13(0x1d0)]();const _0xef9f1e=VisuMZ[_0x5c9e13(0xa4)]['Settings'][_0x5c9e13(0x243)];if(_0xef9f1e[_0x5c9e13(0x430)]){if(_0x5c9e13(0x7b5)==='gUfpQ')this[_0x5c9e13(0x61e)]=0x0;else return _0x34c75b[_0x5c9e13(0x921)](_0x29905b=>_0x29905b[_0x5c9e13(0x101)]()&&_0x29905b!==_0x5bca40);}},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x1d0)]=function(){const _0x1ea4ea=_0x3237d7,_0x45fc94=VisuMZ[_0x1ea4ea(0xa4)]['Settings'][_0x1ea4ea(0x243)];if(_0x45fc94[_0x1ea4ea(0x9b7)]){if(_0x1ea4ea(0x11a)==='fsgLk')_0x2bbfce[_0x1ea4ea(0x387)]=!![];else return!![];}const _0x1dfc11=this[_0x1ea4ea(0x457)]();switch(_0x1dfc11){case _0x1ea4ea(0x5fc):case'border':return!![];break;case _0x1ea4ea(0x51d):case'xp':case _0x1ea4ea(0x195):default:return![];break;}},Window_BattleStatus['prototype']['extraHeight']=function(){const _0x43836f=_0x3237d7;if(this[_0x43836f(0x1d0)]()){if(_0x43836f(0x6d9)!==_0x43836f(0xad5))return 0x0;else _0x3072e8=_0x27719b[_0x43836f(0x521)](_0x28e9f1[_0x43836f(0x79e)]()*(_0x591f70+0x1)),_0x258a48=_0x225182[_0x22a423],_0x50991a[_0x581010]=_0x17dd12[_0x1c7b57],_0x256a09[_0xd7792]=_0xdd5158;}else return _0x43836f(0xa6b)!==_0x43836f(0x259)?0xa:this[_0x43836f(0x8b7)][_0x337612];},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x355)]=function(){const _0x2efe7b=_0x3237d7,_0xd8498e=this[_0x2efe7b(0x457)]();switch(_0xd8498e){case _0x2efe7b(0x5fc):return 0x1;break;case'xp':case _0x2efe7b(0x195):return $gameParty[_0x2efe7b(0x4ff)]()[_0x2efe7b(0x60c)];break;case _0x2efe7b(0x51d):default:return $gameParty[_0x2efe7b(0x46a)]();break;}},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x47f)]=function(){const _0x110edc=_0x3237d7,_0x4d9bb7=this['battleLayoutStyle']();switch(_0x4d9bb7){case _0x110edc(0x5fc):return Window_StatusBase[_0x110edc(0x735)][_0x110edc(0x47f)][_0x110edc(0x4db)](this);break;case _0x110edc(0x51d):case'xp':case _0x110edc(0x195):default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x3237d7(0xa8a)]=function(){const _0x4210bc=_0x3237d7,_0x5c57b6=this[_0x4210bc(0x457)]();switch(_0x5c57b6){case'list':return Window_StatusBase[_0x4210bc(0x735)][_0x4210bc(0xa8a)][_0x4210bc(0x4db)](this);break;case _0x4210bc(0x51d):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x5f3)]=function(){const _0xe42d9d=_0x3237d7;this[_0xe42d9d(0x1d0)]()?Window_StatusBase[_0xe42d9d(0x735)]['updatePadding'][_0xe42d9d(0x4db)](this):this['padding']=0x8;},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x319)]=function(){const _0x3f5985=_0x3237d7,_0x1f5a63=VisuMZ[_0x3f5985(0xa4)][_0x3f5985(0x98d)][_0x3f5985(0x243)];if(_0x1f5a63['StatusWindowSkinFilename']){if(_0x3f5985(0x926)!==_0x3f5985(0xab4))this[_0x3f5985(0x43f)]=ImageManager[_0x3f5985(0xcf)](_0x1f5a63[_0x3f5985(0x9b7)]);else{if(!_0x5b767a['isSideView']())return;const _0x21518f=this[_0x3f5985(0x1d5)]();if(!_0x21518f)return;if(_0x3cc607===_0x21518f[_0x3f5985(0x642)])return;let _0x468ac6=![];if(this[_0x3f5985(0x5ef)]()){if(_0x51731b>_0x21518f['_baseX'])_0x468ac6=!![];if(_0x94c58d<_0x21518f[_0x3f5985(0x642)])_0x468ac6=![];}else{if(this[_0x3f5985(0x8f2)]()){if(_0x521b88>_0x21518f[_0x3f5985(0x642)])_0x468ac6=![];if(_0x2df7e7<_0x21518f[_0x3f5985(0x642)])_0x468ac6=!![];}};this[_0x3f5985(0x92a)](_0x5126e2?!_0x468ac6:_0x468ac6),_0x21518f[_0x3f5985(0x3b2)]();}}else _0x3f5985(0x8b0)!==_0x3f5985(0x8b0)?(this['preparePartyRefresh'](),this[_0x3f5985(0x4bb)]=![],_0x1acdbf[_0x3f5985(0x997)]()):Window_StatusBase['prototype'][_0x3f5985(0x319)][_0x3f5985(0x4db)](this);},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x94c)]=function(_0x3e2bb4){const _0x4e4be0=_0x3237d7,_0x1a4723=VisuMZ[_0x4e4be0(0xa4)][_0x4e4be0(0x98d)]['BattleLayout'];if(_0x1a4723[_0x4e4be0(0x971)])return;Window_StatusBase[_0x4e4be0(0x735)][_0x4e4be0(0x94c)][_0x4e4be0(0x4db)](this,_0x3e2bb4);},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x917)]=function(){const _0x1aa278=_0x3237d7;this[_0x1aa278(0x4bb)]=!![];},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x4dc)]=function(){const _0x5f122a=_0x3237d7;Window_StatusBase[_0x5f122a(0x735)][_0x5f122a(0x4dc)][_0x5f122a(0x4db)](this),this['updateRefresh'](),this[_0x5f122a(0x3a6)]();if(this[_0x5f122a(0x457)]()===_0x5f122a(0xa93))this['updateBorderStyle']();},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x33c)]=function(){const _0x1a17bf=_0x3237d7;if($gameTemp['isBattleRefreshRequested']()){if('AnybV'===_0x1a17bf(0x277)){const _0x8ed06d=this[_0x1a17bf(0x965)](this[_0x1a17bf(0xa27)]());let _0x4e9aac=this['commandName'](this[_0x1a17bf(0xa27)]());_0x4e9aac=_0x4e9aac[_0x1a17bf(0x268)](/\\I\[(\d+)\]/gi,''),_0x2e899c[_0x1a17bf(0x977)](),this['commandNameWindowDrawBackground'](_0x4e9aac,_0x8ed06d),this[_0x1a17bf(0x6a3)](_0x4e9aac,_0x8ed06d),this['commandNameWindowCenter'](_0x4e9aac,_0x8ed06d);}else this[_0x1a17bf(0x6f5)](),this['_requestRefresh']=![],$gameTemp['clearBattleRefreshRequest']();}else this['_requestRefresh']&&(this[_0x1a17bf(0x4bb)]=![],this[_0x1a17bf(0xaa6)](),this[_0x1a17bf(0x53b)]());},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x5be)]=function(){const _0x2f473a=_0x3237d7;Window_StatusBase[_0x2f473a(0x735)][_0x2f473a(0x5be)][_0x2f473a(0x4db)](this);if(!$gameSystem[_0x2f473a(0x59e)]())this[_0x2f473a(0xaa6)]();},Window_BattleStatus['prototype'][_0x3237d7(0x181)]=function(){const _0x1dd674=_0x3237d7;if(this[_0x1dd674(0x607)]===Window_BattleStatus)return;Window_StatusBase['prototype'][_0x1dd674(0x181)][_0x1dd674(0x4db)](this);},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x812)]=function(_0x5d16a8){const _0x1f23bc=_0x3237d7,_0x5b005f=this[_0x1f23bc(0x457)]();switch(_0x5b005f){case'xp':case'portrait':break;case'default':case _0x1f23bc(0x5fc):case _0x1f23bc(0xa93):default:return Window_StatusBase[_0x1f23bc(0x735)][_0x1f23bc(0x812)][_0x1f23bc(0x4db)](this,_0x5d16a8);break;}},VisuMZ['BattleCore'][_0x3237d7(0x287)]=Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x432)],Window_BattleStatus['prototype'][_0x3237d7(0x432)]=function(_0x460292){const _0x553ec9=_0x3237d7,_0x45089f=this['battleLayoutStyle']();switch(_0x45089f){case _0x553ec9(0x5fc):this[_0x553ec9(0xb12)](_0x460292);break;case'xp':this[_0x553ec9(0x4cb)](_0x460292);break;case _0x553ec9(0x195):this[_0x553ec9(0x7ed)](_0x460292);break;case _0x553ec9(0x51d):case'border':default:VisuMZ[_0x553ec9(0xa4)][_0x553ec9(0x287)][_0x553ec9(0x4db)](this,_0x460292);break;}},Window_BattleStatus['prototype'][_0x3237d7(0x5f1)]=function(_0x22d11b){const _0x2c61dd=_0x3237d7,_0x12bb81=this[_0x2c61dd(0x457)]();if(!$gameSystem[_0x2c61dd(0x59e)]())this['centerFrontViewSprite'](_0x22d11b);switch(_0x12bb81){case'list':this['drawItemStatusListStyle'](_0x22d11b);break;case'xp':case _0x2c61dd(0x195):case _0x2c61dd(0x51d):case'border':default:this[_0x2c61dd(0x2b9)](_0x22d11b);break;}},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x96)]=function(){const _0x1031be=_0x3237d7,_0x2727fa=this[_0x1031be(0x457)]();if(['xp'][_0x1031be(0x231)](_0x2727fa)&&!$gameSystem[_0x1031be(0x59e)]()){this[_0x1031be(0x502)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x1031be(0x735)][_0x1031be(0x96)][_0x1031be(0x4db)](this);},Window_BattleStatus[_0x3237d7(0x735)]['centerFrontViewSprite']=function(_0xb2518f){const _0x8868c0=_0x3237d7,_0x1888c6=this['actor'](_0xb2518f)[_0x8868c0(0x1d5)]();if(!_0x1888c6)return;const _0xbafc59=this['battleLayoutStyle'](),_0x115d83=this['itemRect'](_0xb2518f);let _0x680a31=Math[_0x8868c0(0x222)](_0x115d83['x']+_0x115d83['width']/0x2)+this[_0x8868c0(0x386)];['list']['includes'](_0xbafc59)&&(_0x680a31=_0x115d83[_0x8868c0(0xa28)]/$gameParty[_0x8868c0(0x4ff)]()[_0x8868c0(0x60c)],_0x680a31*=_0xb2518f,_0x680a31+=_0x115d83[_0x8868c0(0xa28)]/$gameParty[_0x8868c0(0x4ff)]()[_0x8868c0(0x60c)]/0x2);let _0xa6b107=Math['round'](this[_0x8868c0(0xa41)](_0xb2518f,_0x1888c6,_0x115d83));_0x1888c6[_0x8868c0(0x2d4)](_0x680a31,_0xa6b107),this[_0x8868c0(0x3a5)](_0x1888c6,0x1),_0x1888c6['show'](),this[_0x8868c0(0x7c4)](),this[_0x8868c0(0x53b)]();},Window_BattleStatus[_0x3237d7(0x735)]['frontviewSpriteY']=function(_0x10fa90,_0x3b652c,_0x12e13e){const _0x71574c=_0x3237d7,_0x4f1e85=VisuMZ['BattleCore'][_0x71574c(0x98d)][_0x71574c(0x243)],_0x20cb7d=this[_0x71574c(0x457)]();if(_0x20cb7d==='xp'){if(_0x71574c(0x2d0)===_0x71574c(0x94d))return _0x903dba[_0x71574c(0x26c)]()[_0x71574c(0x6e1)]();else{const _0x43b1aa=_0x4f1e85[_0x71574c(0xb5d)];switch(_0x43b1aa['toLowerCase']()[_0x71574c(0x194)]()){case'bottom':return _0x12e13e[_0x71574c(0x766)]-_0x3b652c[_0x71574c(0x1b0)][_0x71574c(0x766)]/0x4;break;case _0x71574c(0x415):const _0x1f71b9=_0x4f1e85[_0x71574c(0x1b3)];return(_0x12e13e['height']+(_0x3b652c[_0x71574c(0x766)]||_0x1f71b9))/0x2;break;case _0x71574c(0x99f):return 0x0;case'name':default:return this[_0x71574c(0x1f4)](_0x12e13e);break;}}}else{if(_0x20cb7d===_0x71574c(0x195)){}}return _0x3b652c[_0x71574c(0x766)];},Sprite_Name[_0x3237d7(0x735)][_0x3237d7(0x134)]=function(){return 0x24;},Sprite_Name[_0x3237d7(0x735)][_0x3237d7(0x45b)]=function(){const _0x5d3470=_0x3237d7,_0xc0190d=this[_0x5d3470(0x444)](),_0x205b1f=this[_0x5d3470(0x9dc)](),_0x4d52ed=this[_0x5d3470(0x134)]();this[_0x5d3470(0x817)](),this[_0x5d3470(0x651)][_0x5d3470(0x2d9)](),this[_0x5d3470(0x651)]['drawTextTopAligned'](_0xc0190d,0x0,0x0,_0x205b1f,_0x4d52ed,_0x5d3470(0x34d));},Bitmap[_0x3237d7(0x735)]['drawTextTopAligned']=function(_0x10c22a,_0x16d6a1,_0x148bd0,_0x3ef9c1,_0x74f295,_0x34d7bb){const _0x3fc737=_0x3237d7,_0xc9f9fa=this[_0x3fc737(0x289)],_0x771819=_0xc9f9fa['globalAlpha'];_0x3ef9c1=_0x3ef9c1||0xffffffff;let _0x813461=_0x16d6a1,_0xafdc7a=Math[_0x3fc737(0x222)](_0x148bd0+0x18/0x2+this[_0x3fc737(0x6fe)]*0.35);if(_0x34d7bb==='center'){if(_0x3fc737(0x4f7)===_0x3fc737(0x966)){const _0x27b7aa=new _0x1327f5();this[_0x3fc737(0x448)][_0x3fc737(0x70d)](_0x27b7aa),_0x27b7aa[_0x3fc737(0xa3)](_0x2d5a57);}else _0x813461+=_0x3ef9c1/0x2;}if(_0x34d7bb===_0x3fc737(0xad0)){if(_0x3fc737(0x33e)==='YqPKl')_0x813461+=_0x3ef9c1;else{if(!_0x2a378b['BattleCore'][_0x3fc737(0x98d)][_0x3fc737(0x754)][_0x3fc737(0x265)])return;this[_0x3fc737(0x448)]=new _0xd224e3(),this[_0x3fc737(0x448)]['x']=this[_0x3fc737(0x548)]['x'],this[_0x3fc737(0x448)]['y']=this[_0x3fc737(0x548)]['y'];const _0x66f56a=this['children'][_0x3fc737(0x4fa)](this['_windowLayer']);this[_0x3fc737(0x3a5)](this[_0x3fc737(0x448)],_0x66f56a);for(let _0x412d6c=0x0;_0x412d6c<0x8;_0x412d6c++){const _0x24a9f6=new _0x55e161(_0x412d6c);this[_0x3fc737(0x448)][_0x3fc737(0x70d)](_0x24a9f6);}}}_0xc9f9fa['save'](),_0xc9f9fa[_0x3fc737(0xa21)]=this['_makeFontNameText'](),_0xc9f9fa[_0x3fc737(0xae3)]=_0x34d7bb,_0xc9f9fa[_0x3fc737(0x8b6)]='alphabetic',_0xc9f9fa['globalAlpha']=0x1,this['_drawTextOutline'](_0x10c22a,_0x813461,_0xafdc7a,_0x3ef9c1),_0xc9f9fa['globalAlpha']=_0x771819,this[_0x3fc737(0x88f)](_0x10c22a,_0x813461,_0xafdc7a,_0x3ef9c1),_0xc9f9fa['restore'](),this[_0x3fc737(0x321)][_0x3fc737(0x4dc)]();},Window_BattleStatus['prototype']['nameY']=function(_0x260522){const _0x2273e2=_0x3237d7;return this[_0x2273e2(0x9d9)](_0x260522)-this[_0x2273e2(0x8ef)]();},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0xb12)]=function(_0x1e5ddc){const _0x5ba5a4=_0x3237d7;if(!VisuMZ[_0x5ba5a4(0xa4)]['Settings'][_0x5ba5a4(0x243)][_0x5ba5a4(0x388)])return;const _0x1ca7dc=this[_0x5ba5a4(0x5f9)](_0x1e5ddc),_0x323f87=this[_0x5ba5a4(0x901)](_0x1e5ddc);_0x323f87[_0x5ba5a4(0xa28)]=ImageManager[_0x5ba5a4(0xa03)],_0x323f87[_0x5ba5a4(0x766)]-=0x2,this['drawActorFace'](_0x1ca7dc,_0x323f87['x']+0x1,_0x323f87['y']+0x1,_0x323f87[_0x5ba5a4(0xa28)],_0x323f87[_0x5ba5a4(0x766)]);},Window_BattleStatus[_0x3237d7(0x735)]['drawItemStatusListStyle']=function(_0xe9221b){const _0x523419=_0x3237d7,_0x4bc197=VisuMZ[_0x523419(0xa4)][_0x523419(0x98d)][_0x523419(0x243)],_0x7e4b77=$dataSystem[_0x523419(0x27f)]?0x4:0x3,_0x5041d0=_0x7e4b77*0x80+(_0x7e4b77-0x1)*0x8+0x4,_0x442631=this[_0x523419(0x5f9)](_0xe9221b),_0x1e09ef=this[_0x523419(0x901)](_0xe9221b);let _0x1670c7=_0x1e09ef['x']+this[_0x523419(0x386)];_0x4bc197['ShowFacesListStyle']?_0x523419(0xab)===_0x523419(0x499)?(_0x3e1a3f[_0x523419(0xa4)][_0x523419(0x71f)][_0x523419(0x4db)](this),this['updateStateSpriteBattleCore']()):_0x1670c7=_0x1e09ef['x']+ImageManager[_0x523419(0xa03)]+0x8:_0x1670c7+=ImageManager[_0x523419(0x17c)];const _0x366fd6=Math['round'](Math[_0x523419(0x9c4)](_0x1e09ef['x']+_0x1e09ef['width']-_0x5041d0,_0x1670c7)),_0x4eba2f=Math[_0x523419(0x222)](_0x1e09ef['y']+(_0x1e09ef[_0x523419(0x766)]-Sprite_Name[_0x523419(0x735)][_0x523419(0x134)]())/0x2),_0x1b8725=Math[_0x523419(0x222)](_0x366fd6-ImageManager[_0x523419(0x17c)]/0x2-0x4),_0x2ebf5b=Math[_0x523419(0x222)](_0x1e09ef['y']+(_0x1e09ef[_0x523419(0x766)]-ImageManager[_0x523419(0x20b)])/0x2+ImageManager['iconHeight']/0x2);let _0x790112=_0x366fd6+0x88;const _0x394592=_0x4eba2f;this[_0x523419(0x116)](_0x442631,_0x366fd6-0x4+(_0x4bc197[_0x523419(0x2d3)]||0x0),_0x4eba2f+(_0x4bc197[_0x523419(0x75c)]||0x0)),this[_0x523419(0x9e9)](_0x442631,_0x366fd6+(_0x4bc197[_0x523419(0x96f)]||0x0),_0x4eba2f+(_0x4bc197['NameOffsetY']||0x0)),this[_0x523419(0x81a)](_0x442631,_0x1b8725+(_0x4bc197[_0x523419(0xa3c)]||0x0),_0x2ebf5b+(_0x4bc197[_0x523419(0x269)]||0x0)),this[_0x523419(0xa92)](_0x442631,'hp',_0x790112+0x88*0x0+(_0x4bc197[_0x523419(0x244)]||0x0),_0x394592+(_0x4bc197[_0x523419(0x53a)]||0x0)),this[_0x523419(0xa92)](_0x442631,'mp',_0x790112+0x88*0x1+(_0x4bc197[_0x523419(0x616)]||0x0),_0x394592+(_0x4bc197[_0x523419(0x1f3)]||0x0)),$dataSystem[_0x523419(0x27f)]&&(_0x523419(0xb4e)===_0x523419(0x132)?(_0x1bde67=_0x259d11[_0x523419(0x1d5)]()[_0x523419(0x7e8)],_0x452e51=_0x11d29d[_0x523419(0x1d5)]()[_0x523419(0x3f3)]):this[_0x523419(0xa92)](_0x442631,'tp',_0x790112+0x88*0x2+(_0x4bc197['TpGaugeOffsetX']||0x0),_0x394592+(_0x4bc197[_0x523419(0x806)]||0x0)));},Window_BattleStatus['prototype'][_0x3237d7(0x4cb)]=function(_0x1b58e8){const _0x35a20b=_0x3237d7;if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore'][_0x35a20b(0x287)]['call'](this,_0x1b58e8);},Window_BattleStatus['prototype'][_0x3237d7(0x2b9)]=function(_0xcbf309){const _0x509810=_0x3237d7,_0x51c4c1=VisuMZ[_0x509810(0xa4)]['Settings'][_0x509810(0x243)],_0x567206=this[_0x509810(0x5f9)](_0xcbf309),_0x5bc496=this[_0x509810(0x901)](_0xcbf309),_0x4b8eea=Math[_0x509810(0x222)](_0x5bc496['x']+(_0x5bc496[_0x509810(0xa28)]-0x80)/0x2),_0x3628f2=this['nameY'](_0x5bc496);let _0x57bee6=_0x4b8eea-ImageManager[_0x509810(0x17c)]/0x2-0x4,_0x59e6b3=_0x3628f2+ImageManager[_0x509810(0x20b)]/0x2;_0x57bee6-ImageManager['iconWidth']/0x2<_0x5bc496['x']&&(_0x509810(0x2bd)!=='vTXkv'?(_0x57bee6=_0x4b8eea+ImageManager[_0x509810(0x17c)]/0x2-0x4,_0x59e6b3=_0x3628f2-ImageManager['iconHeight']/0x2):(_0x2007d4[_0x509810(0xa4)]['Game_Battler_forceAction']['call'](this,_0x19faaa,_0x44b231),this[_0x509810(0x7ca)][this[_0x509810(0x7ca)][_0x509810(0x60c)]-0x1]['_forceAction']=!![]));const _0x309cc3=_0x4b8eea,_0x213359=this['basicGaugesY'](_0x5bc496);this[_0x509810(0x116)](_0x567206,_0x4b8eea+(_0x51c4c1[_0x509810(0x2d3)]||0x0),_0x3628f2+(_0x51c4c1['TpbGaugeOffsetY']||0x0)),this[_0x509810(0x9e9)](_0x567206,_0x4b8eea+(_0x51c4c1[_0x509810(0x96f)]||0x0),_0x3628f2+(_0x51c4c1[_0x509810(0x381)]||0x0)),this[_0x509810(0x81a)](_0x567206,_0x57bee6+(_0x51c4c1['StateIconOffsetX']||0x0),_0x59e6b3+(_0x51c4c1['StateIconOffsetY']||0x0)),this[_0x509810(0xa92)](_0x567206,'hp',_0x309cc3+(_0x51c4c1[_0x509810(0x244)]||0x0),_0x213359+(_0x51c4c1['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x567206,'mp',_0x309cc3+(_0x51c4c1[_0x509810(0x616)]||0x0),_0x213359+this['gaugeLineHeight']()+(_0x51c4c1[_0x509810(0x1f3)]||0x0)),$dataSystem[_0x509810(0x27f)]&&(_0x509810(0x873)===_0x509810(0x575)?_0x5399ea[_0x509810(0x735)][_0x509810(0x2db)]['call'](this):this[_0x509810(0xa92)](_0x567206,'tp',_0x309cc3+(_0x51c4c1[_0x509810(0x7a3)]||0x0),_0x213359+this[_0x509810(0x8ef)]()*0x2+(_0x51c4c1[_0x509810(0x806)]||0x0)));},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x829)]=function(_0x1011e9){const _0x1da59b=_0x3237d7;if(!VisuMZ[_0x1da59b(0xa4)][_0x1da59b(0x98d)][_0x1da59b(0x243)][_0x1da59b(0xeb)])return![];if(_0x1011e9[_0x1da59b(0x3af)]())return!![];return Imported[_0x1da59b(0xab1)]&&_0x1011e9[_0x1da59b(0x1ec)]();},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0xad8)]=function(){const _0x49c8fd=_0x3237d7;if(this[_0x49c8fd(0x5f9)]()[_0x49c8fd(0x4fe)][_0x49c8fd(0x453)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()['note'][_0x49c8fd(0x453)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('IuGxm'!==_0x49c8fd(0xab7))return Number(RegExp['$1']);else this['_battlerContainer']['addChild'](_0x47fdb4);}}return 0x0;},Game_Actor[_0x3237d7(0x735)][_0x3237d7(0xb2a)]=function(){const _0x12d2ba=_0x3237d7;if(this[_0x12d2ba(0x5f9)]()[_0x12d2ba(0x4fe)][_0x12d2ba(0x453)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x12d2ba(0x5f9)]()[_0x12d2ba(0x4fe)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x3237d7(0x735)]['drawItemImagePortraitStyle']=function(_0x506cb8){const _0x2fe6e0=_0x3237d7,_0x49fabe=this[_0x2fe6e0(0x5f9)](_0x506cb8);if(this[_0x2fe6e0(0x829)](_0x49fabe)){if(_0x2fe6e0(0x78f)!=='vRAXz'){const _0x2e383f=_0x2fe6e0(0xb5e)['format'](_0x49fabe['actorId']()),_0x55c993=this['createInnerPortrait'](_0x2e383f,Sprite),_0xbb3f6=_0x49fabe['getBattlePortraitFilename']();if(_0xbb3f6!=='')_0x55c993[_0x2fe6e0(0x651)]=ImageManager[_0x2fe6e0(0x108)](_0xbb3f6);else{if('tmcrv'==='tmcrv')_0x55c993[_0x2fe6e0(0x651)]=ImageManager['_emptyBitmap'];else return _0x3e082d[_0x2fe6e0(0x2a7)][_0x2fe6e0(0x988)]&&_0x415538['_scene']['_enemyWindow'][_0x2fe6e0(0x8e6)]&&_0x337566[_0x2fe6e0(0x2a7)]['_enemyWindow'][_0x2fe6e0(0x88c)][_0x2fe6e0(0x231)](this[_0x2fe6e0(0x820)]);}const _0x3749b9=this[_0x2fe6e0(0x901)](_0x506cb8);_0x55c993[_0x2fe6e0(0xa99)]['x']=0.5,_0x55c993[_0x2fe6e0(0xa99)]['y']=0x1;let _0x12260a=Math[_0x2fe6e0(0x222)](_0x3749b9['x']+_0x3749b9[_0x2fe6e0(0xa28)]/0x2)+this[_0x2fe6e0(0x386)];_0x12260a+=_0x49fabe[_0x2fe6e0(0xad8)]();let _0x41ab43=Math[_0x2fe6e0(0x222)](this[_0x2fe6e0(0x766)]);_0x41ab43+=_0x49fabe[_0x2fe6e0(0xb2a)](),_0x55c993[_0x2fe6e0(0xaf8)](_0x12260a,_0x41ab43);const _0x4432d5=VisuMZ[_0x2fe6e0(0xa4)][_0x2fe6e0(0x98d)][_0x2fe6e0(0x243)][_0x2fe6e0(0x8f6)];_0x55c993[_0x2fe6e0(0x845)]['x']=_0x4432d5,_0x55c993[_0x2fe6e0(0x845)]['y']=_0x4432d5,_0x55c993[_0x2fe6e0(0x5be)]();}else _0x12289f[_0x2fe6e0(0x735)][_0x2fe6e0(0x977)][_0x2fe6e0(0x4db)](this),this['contents'][_0x2fe6e0(0x6fe)]=_0x31f88e[_0x2fe6e0(0xa4)][_0x2fe6e0(0x98d)][_0x2fe6e0(0x754)]['NameFontSize'];}else{if(_0x2fe6e0(0x148)!==_0x2fe6e0(0x148))this[_0x2fe6e0(0xa46)](_0x577727);else{const _0x5e8a08=this['faceRect'](_0x506cb8);this[_0x2fe6e0(0x8dc)](_0x49fabe,_0x5e8a08['x'],_0x5e8a08['y'],_0x5e8a08[_0x2fe6e0(0xa28)],_0x5e8a08[_0x2fe6e0(0x766)]);}}},Window_BattleStatus['prototype'][_0x3237d7(0x518)]=function(_0x9de7c7,_0x2afbb6){const _0xb57ff8=_0x3237d7,_0xfd2fbc=this[_0xb57ff8(0x207)];if(_0xfd2fbc[_0x9de7c7])return _0xfd2fbc[_0x9de7c7];else{const _0x54fdf6=new _0x2afbb6();return _0xfd2fbc[_0x9de7c7]=_0x54fdf6,this[_0xb57ff8(0xae1)](_0x54fdf6),this[_0xb57ff8(0xae1)](this['_cursorArea']),_0x54fdf6;}},Window_BattleStatus['prototype']['_createClientArea']=function(){const _0x189fb6=_0x3237d7;this[_0x189fb6(0x88d)](),this[_0x189fb6(0x724)](),Window_StatusBase['prototype'][_0x189fb6(0x86e)][_0x189fb6(0x4db)](this),this[_0x189fb6(0x288)]();},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x88d)]=function(){const _0x1b3acc=_0x3237d7;this[_0x1b3acc(0xa02)]=new Sprite(),this[_0x1b3acc(0xa02)][_0x1b3acc(0x6d1)]=[new PIXI[(_0x1b3acc(0x6d1))][(_0x1b3acc(0x473))]()],this[_0x1b3acc(0xa02)][_0x1b3acc(0xaa2)]=new Rectangle(),this['_cursorArea'][_0x1b3acc(0xaf8)](this[_0x1b3acc(0xa26)],this[_0x1b3acc(0xa26)]),this['addChild'](this[_0x1b3acc(0xa02)]);},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x724)]=function(){const _0x1dfafc=_0x3237d7;this[_0x1dfafc(0xa4a)]=new Sprite(),this[_0x1dfafc(0x70d)](this[_0x1dfafc(0xa4a)]);},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x7c4)]=function(){const _0x197a21=_0x3237d7;this[_0x197a21(0xa4a)]&&this[_0x197a21(0x70d)](this[_0x197a21(0xa4a)]);},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x288)]=function(){const _0x111067=_0x3237d7;this[_0x111067(0x7c0)]=new Sprite(),this[_0x111067(0x70d)](this['_damageContainer']);},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x7e0)]=function(){const _0x6b4134=_0x3237d7;this[_0x6b4134(0x118)]=new Sprite();for(let _0x5cd503=0x0;_0x5cd503<0x9;_0x5cd503++){this['_cursorSprite'][_0x6b4134(0x70d)](new Sprite());}this[_0x6b4134(0xa02)]['addChild'](this[_0x6b4134(0x118)]);},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x403)]=function(){const _0x56e6c5=_0x3237d7;Window_StatusBase[_0x56e6c5(0x735)][_0x56e6c5(0x403)][_0x56e6c5(0x4db)](this),this[_0x56e6c5(0x66b)]();},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x66b)]=function(){const _0x1adfd1=_0x3237d7,_0x5bcfc1=this['_padding'];this[_0x1adfd1(0xa02)][_0x1adfd1(0xaf8)](_0x5bcfc1,_0x5bcfc1),this[_0x1adfd1(0xa02)]['x']=_0x5bcfc1-this[_0x1adfd1(0x5d1)]['x'],this[_0x1adfd1(0xa02)]['y']=_0x5bcfc1-this[_0x1adfd1(0x5d1)]['y'],this[_0x1adfd1(0x541)]>0x0&&this[_0x1adfd1(0x906)]>0x0?this[_0x1adfd1(0xa02)][_0x1adfd1(0x6ad)]=this[_0x1adfd1(0x9b)]():this[_0x1adfd1(0xa02)][_0x1adfd1(0x6ad)]=![];},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x524)]=function(){const _0x1ade8a=_0x3237d7;Window_StatusBase[_0x1ade8a(0x735)][_0x1ade8a(0x524)][_0x1ade8a(0x4db)](this),this[_0x1ade8a(0x93)]();},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x93)]=function(){const _0x482a73=_0x3237d7,_0x6c45de=this[_0x482a73(0xa02)][_0x482a73(0x37a)][_0x482a73(0x7ae)](new Point(0x0,0x0)),_0x284062=this[_0x482a73(0xa02)][_0x482a73(0xaa2)];_0x284062['x']=_0x6c45de['x']+this[_0x482a73(0x5d1)]['x'],_0x284062['y']=_0x6c45de['y']+this[_0x482a73(0x5d1)]['y'],_0x284062[_0x482a73(0xa28)]=this[_0x482a73(0x541)],_0x284062[_0x482a73(0x766)]=this[_0x482a73(0x906)];},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x209)]=function(_0x9949b3){const _0x4055b4=_0x3237d7;if(this[_0x4055b4(0x457)]()!==_0x4055b4(0x195))return;this[_0x4055b4(0x7ed)](_0x9949b3[_0x4055b4(0xa27)]());},Window_BattleStatus[_0x3237d7(0x735)]['addDamageSprite']=function(_0x3c8d1c,_0x1b6c6a){const _0x2a6dea=_0x3237d7;if(!this['_damageContainer'])return;if(!_0x3c8d1c)return;if(!_0x1b6c6a)return;const _0x52d86a=this[_0x2a6dea(0x901)](_0x1b6c6a[_0x2a6dea(0xa27)]());_0x52d86a['x']+=_0x52d86a[_0x2a6dea(0xa28)]/0x2+this[_0x2a6dea(0x386)],_0x3c8d1c['x']=_0x52d86a['x'],_0x3c8d1c['y']=_0x52d86a['y'],this[_0x2a6dea(0x7c0)]['addChild'](_0x3c8d1c);},Window_BattleStatus['prototype'][_0x3237d7(0x1c1)]=function(_0x197486){const _0xa8577f=_0x3237d7;if(!this['_damageContainer'])return;if(!_0x197486)return;this[_0xa8577f(0x7c0)]['removeChild'](_0x197486);},Window_BattleStatus[_0x3237d7(0x735)]['updateBorderStyle']=function(){const _0x472a85=_0x3237d7;if(!this[_0x472a85(0x612)]())return;if(!this[_0x472a85(0x694)])this[_0x472a85(0x53e)]();this[_0x472a85(0x3ef)](),this[_0x472a85(0xa91)]();},Window_BattleStatus[_0x3237d7(0x735)]['isBorderStylePortraitShown']=function(){const _0xd91f77=_0x3237d7;if(this[_0xd91f77(0x607)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ[_0xd91f77(0xa4)][_0xd91f77(0x98d)][_0xd91f77(0x243)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x53e)]=function(){const _0xeff936=_0x3237d7;this['_borderPortraitSprite']=new Sprite();const _0x277e1e=SceneManager[_0xeff936(0x2a7)],_0x656749=_0x277e1e[_0xeff936(0x972)][_0xeff936(0x4fa)](_0x277e1e[_0xeff936(0x548)]);_0x277e1e[_0xeff936(0x3a5)](this[_0xeff936(0x694)],_0x656749),this[_0xeff936(0x694)][_0xeff936(0xa99)]['x']=0.5,this[_0xeff936(0x694)]['anchor']['y']=0x1;const _0x364515=VisuMZ[_0xeff936(0xa4)]['Settings'][_0xeff936(0x243)][_0xeff936(0xa0)];this[_0xeff936(0x694)][_0xeff936(0x845)]['x']=_0x364515,this['_borderPortraitSprite'][_0xeff936(0x845)]['y']=_0x364515,this['_borderPortraitSprite']['y']=this['y']+this[_0xeff936(0x766)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x3ef)]=function(){const _0xbd2a5f=_0x3237d7;this['_borderPortraitSprite'][_0xbd2a5f(0x6ad)]=BattleManager[_0xbd2a5f(0xb53)]();const _0x1c6e67=BattleManager['actor']();if(_0x1c6e67===this[_0xbd2a5f(0x694)]['actor'])return;this[_0xbd2a5f(0x694)][_0xbd2a5f(0x5f9)]=_0x1c6e67||this['_borderPortraitSprite'][_0xbd2a5f(0x5f9)];if(!_0x1c6e67)return;else{if(_0x1c6e67['getBattlePortraitFilename']()===''){if(_0xbd2a5f(0x3d0)!==_0xbd2a5f(0xe0)){this[_0xbd2a5f(0x694)][_0xbd2a5f(0x651)]=ImageManager[_0xbd2a5f(0x66f)];return;}else this[_0xbd2a5f(0x147)]=_0xbd2a5f(0x897);}else{const _0x1aa706=ImageManager[_0xbd2a5f(0x108)](_0x1c6e67[_0xbd2a5f(0x9a0)]());_0x1aa706[_0xbd2a5f(0x8fc)](this[_0xbd2a5f(0x204)][_0xbd2a5f(0x114)](this,_0x1aa706));}}},Window_BattleStatus['prototype'][_0x3237d7(0x204)]=function(_0x5a313f){const _0x29b9ba=_0x3237d7;this['_borderPortraitDuration']=0x14,this[_0x29b9ba(0x694)]['bitmap']=_0x5a313f;SceneManager[_0x29b9ba(0x2a7)][_0x29b9ba(0x5e6)]()?(this[_0x29b9ba(0x694)]['x']=0x0,this[_0x29b9ba(0x4de)]=Math['ceil'](_0x5a313f[_0x29b9ba(0xa28)]/0x2)):_0x29b9ba(0x3ba)==='haoOI'?_0x4f00c3=_0x9f57f5:(this[_0x29b9ba(0x694)]['x']=this[_0x29b9ba(0xa28)],this['_borderPortraitTargetX']=this['width']*0x3/0x4);this['_borderPortraitSprite'][_0x29b9ba(0x61e)]=0x0,this[_0x29b9ba(0x694)]['y']=this['y']+this['height'];const _0x2a238=BattleManager['actor']();_0x2a238&&('CnMHI'!==_0x29b9ba(0x20f)?_0x32c008['result']()['physical']?this[_0x29b9ba(0x857)](_0x29b9ba(0x170),_0x1b6310):this[_0x29b9ba(0x857)](_0x29b9ba(0xb0c),_0x518f0d):(this['_borderPortraitTargetX']+=_0x2a238[_0x29b9ba(0xad8)](),this['_borderPortraitSprite']['y']+=_0x2a238['getBattlePortraitOffsetY']()));},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0xa91)]=function(){const _0x154f76=_0x3237d7;if(this[_0x154f76(0x371)]>0x0){const _0x59582a=this[_0x154f76(0x371)],_0x5555dc=this[_0x154f76(0x694)];_0x5555dc['x']=(_0x5555dc['x']*(_0x59582a-0x1)+this[_0x154f76(0x4de)])/_0x59582a,_0x5555dc[_0x154f76(0x61e)]=(_0x5555dc[_0x154f76(0x61e)]*(_0x59582a-0x1)+0xff)/_0x59582a,this[_0x154f76(0x371)]--;}},Window_BattleStatus['prototype'][_0x3237d7(0x3a6)]=function(){const _0x4aada5=_0x3237d7;return;this[_0x4aada5(0xa4a)]&&(this[_0x4aada5(0xa4a)]['x']=this['x'],this[_0x4aada5(0xa4a)]['y']=this['y']);if(this[_0x4aada5(0x7c0)]){if(_0x4aada5(0x91c)===_0x4aada5(0x91c))this['_damageContainer']['x']=this['x'],this[_0x4aada5(0x7c0)]['y']=this['y'];else return![];}},Window_BattleStatus[_0x3237d7(0x735)]['createAttachmentSprites']=function(){const _0x3e6204=_0x3237d7,_0x2fc90c=VisuMZ[_0x3e6204(0xa4)][_0x3e6204(0x98d)][_0x3e6204(0x243)];if(_0x2fc90c['StatusWindowAttachmentBack']){const _0xd609e1=new Sprite();_0xd609e1[_0x3e6204(0x651)]=ImageManager['loadSystem'](_0x2fc90c[_0x3e6204(0x5c2)]),_0xd609e1['x']=_0x2fc90c[_0x3e6204(0x15d)]||0x0,_0xd609e1['y']=_0x2fc90c[_0x3e6204(0x179)]||0x0,this['addChildToBack'](_0xd609e1),this[_0x3e6204(0xaeb)]=_0xd609e1;}if(_0x2fc90c[_0x3e6204(0x940)]){const _0x51b5e3=new Sprite();_0x51b5e3['bitmap']=ImageManager[_0x3e6204(0xcf)](_0x2fc90c[_0x3e6204(0x940)]),_0x51b5e3['x']=_0x2fc90c[_0x3e6204(0x161)]||0x0,_0x51b5e3['y']=_0x2fc90c['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x3e6204(0x70d)](_0x51b5e3),this['_frontAttachmentSprite']=_0x51b5e3;}},Window_BattleStatus[_0x3237d7(0x735)][_0x3237d7(0x53b)]=function(){const _0x25d809=_0x3237d7;this[_0x25d809(0x4ea)]&&this[_0x25d809(0x70d)](this[_0x25d809(0x4ea)]),this[_0x25d809(0xaeb)]&&this[_0x25d809(0xae1)](this[_0x25d809(0xaeb)]);},Window_BattleActor['prototype'][_0x3237d7(0x363)]=function(){const _0x847d91=_0x3237d7;return Window_BattleStatus[_0x847d91(0x735)][_0x847d91(0x363)][_0x847d91(0x4db)](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x3237d7(0x735)]['isActionSelectionValid']=function(){const _0x7e0ffb=_0x3237d7,_0x18ad97=BattleManager[_0x7e0ffb(0x99e)](),_0x34c9bc=this['actor'](this[_0x7e0ffb(0xa27)]());if(!_0x18ad97)return!![];if(!_0x18ad97[_0x7e0ffb(0x7be)]())return!![];const _0xd4957f=_0x18ad97['item']()[_0x7e0ffb(0x4fe)];if(_0xd4957f[_0x7e0ffb(0x453)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x34c9bc===BattleManager[_0x7e0ffb(0x5f9)]())return![];}return!![];},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x704)]=Window_BattleEnemy[_0x3237d7(0x735)][_0x3237d7(0xbb)],Window_BattleEnemy['prototype'][_0x3237d7(0xbb)]=function(_0x4f6203){const _0x2c76e5=_0x3237d7;this[_0x2c76e5(0x53c)]=null,VisuMZ[_0x2c76e5(0xa4)]['Window_BattleEnemy_initialize'][_0x2c76e5(0x4db)](this,_0x4f6203);},Window_BattleEnemy[_0x3237d7(0x735)]['maxCols']=function(){const _0x5e0ab8=_0x3237d7;return this[_0x5e0ab8(0x523)]();},VisuMZ[_0x3237d7(0xa4)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x3237d7(0x735)][_0x3237d7(0x5be)],Window_BattleEnemy[_0x3237d7(0x735)][_0x3237d7(0x5be)]=function(){const _0x233b97=_0x3237d7;VisuMZ[_0x233b97(0xa4)][_0x233b97(0x94)][_0x233b97(0x4db)](this),this['y']=Graphics[_0x233b97(0x766)]*0xa;},Window_BattleEnemy[_0x3237d7(0x735)]['validTargets']=function(){const _0x331c7e=_0x3237d7;return $gameTroop[_0x331c7e(0x7ff)]()[_0x331c7e(0xa76)](0x0);},Window_BattleEnemy[_0x3237d7(0x735)][_0x3237d7(0xaa6)]=function(){const _0x5c483f=_0x3237d7;this[_0x5c483f(0x88c)]=this[_0x5c483f(0x6a7)](),this[_0x5c483f(0x891)](),Window_Selectable[_0x5c483f(0x735)]['refresh'][_0x5c483f(0x4db)](this);},Window_BattleEnemy['prototype'][_0x3237d7(0x891)]=function(){const _0x58275b=_0x3237d7;this['_enemies'][_0x58275b(0x726)]((_0x5ea7e0,_0x83eb9f)=>{const _0x1d995c=_0x58275b;if('CNjNR'===_0x1d995c(0xa7a)){if(_0x20b4cc){const _0x7af33f=_0x5e59c0['indexOf'](_0x16a3d4);return _0x7af33f>=0x0?[_0x10f8b7[_0x7af33f-0x1]||_0x3a3f92]:[_0x3d2e13];}}else return _0x5ea7e0['battler']()[_0x1d995c(0x642)]===_0x83eb9f[_0x1d995c(0x1d5)]()[_0x1d995c(0x642)]?_0x5ea7e0[_0x1d995c(0x1d5)]()[_0x1d995c(0x9ed)]-_0x83eb9f[_0x1d995c(0x1d5)]()['_baseY']:_0x5ea7e0[_0x1d995c(0x1d5)]()[_0x1d995c(0x642)]-_0x83eb9f[_0x1d995c(0x1d5)]()[_0x1d995c(0x642)];}),SceneManager[_0x58275b(0x33b)]()&&this['_enemies'][_0x58275b(0x143)]();},Window_BattleEnemy[_0x3237d7(0x735)][_0x3237d7(0xb2c)]=function(){const _0x3c701b=_0x3237d7,_0x521edb=VisuMZ['BattleCore'][_0x3c701b(0x98d)][_0x3c701b(0x754)];if(_0x521edb[_0x3c701b(0x234)]){if(_0x3c701b(0x1bb)===_0x3c701b(0xd7)){const _0x17e211=this[_0x3c701b(0x3ca)];_0x17e211[_0x3c701b(0x1ed)](_0x53444e,0x0,_0x4d6742['y'],_0x17e211[_0x3c701b(0x541)],_0x3c701b(0x415));}else this[_0x3c701b(0x980)]();}else _0x3c701b(0x542)===_0x3c701b(0x542)?this['autoSelectPriority']():_0x2771b2[_0x3c701b(0xa4)][_0x3c701b(0x4cc)]['call'](this);},Window_BattleEnemy[_0x3237d7(0x735)][_0x3237d7(0x980)]=function(){const _0x5507a=_0x3237d7;if(this[_0x5507a(0x53c)]&&this[_0x5507a(0x88c)][_0x5507a(0x231)](this[_0x5507a(0x53c)])){const _0x1fc1d8=this[_0x5507a(0x88c)][_0x5507a(0x4fa)](this[_0x5507a(0x53c)]);this[_0x5507a(0x27a)](_0x1fc1d8);}else this[_0x5507a(0x2a3)]();},Window_BattleEnemy['prototype'][_0x3237d7(0x2a3)]=function(){const _0x3ce632=_0x3237d7,_0x18be39=VisuMZ[_0x3ce632(0xa4)][_0x3ce632(0x98d)][_0x3ce632(0x754)];let _0x20b9d0=![];$gameSystem[_0x3ce632(0x59e)]()?_0x20b9d0=_0x18be39[_0x3ce632(0x9a8)]:_0x20b9d0=_0x18be39[_0x3ce632(0xa51)],this['forceSelect'](_0x20b9d0?this[_0x3ce632(0x523)]()-0x1:0x0);},Window_BattleEnemy[_0x3237d7(0x735)][_0x3237d7(0x5b2)]=function(){const _0x24546f=_0x3237d7;Window_Selectable[_0x24546f(0x735)]['callOkHandler'][_0x24546f(0x4db)](this),this[_0x24546f(0x53c)]=this[_0x24546f(0x9df)]();},Window_BattleItem['prototype'][_0x3237d7(0x231)]=function(_0x49f8e1){const _0x53714d=_0x3237d7;if(!_0x49f8e1)return![];return _0x49f8e1[_0x53714d(0x1c9)]===0x0||_0x49f8e1[_0x53714d(0x1c9)]===0x1;};function Window_AutoBattleCancel(){const _0x33fb36=_0x3237d7;this[_0x33fb36(0xbb)](...arguments);}Window_AutoBattleCancel[_0x3237d7(0x735)]=Object['create'](Window_Base[_0x3237d7(0x735)]),Window_AutoBattleCancel[_0x3237d7(0x735)][_0x3237d7(0x607)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(_0xd29e14){const _0x4425bf=_0x3237d7;Window_Base['prototype'][_0x4425bf(0xbb)]['call'](this,_0xd29e14),this[_0x4425bf(0x90b)](this['bgType']()),this[_0x4425bf(0xaa6)]();},Window_AutoBattleCancel[_0x3237d7(0x735)]['bgType']=function(){const _0x5bd270=_0x3237d7;return VisuMZ[_0x5bd270(0xa4)]['Settings'][_0x5bd270(0x811)]['AutoBattleBgType'];},Window_AutoBattleCancel[_0x3237d7(0x735)][_0x3237d7(0xaa6)]=function(){const _0x3cd4c1=_0x3237d7;this[_0x3cd4c1(0x5b6)]['clear']();const _0x3fbf89=VisuMZ['BattleCore'][_0x3cd4c1(0x98d)]['AutoBattle']['AutoBattleMsg'],_0x103ef4=_0x3fbf89[_0x3cd4c1(0x117)](this[_0x3cd4c1(0x55a)](),this['cancelButtonText']()),_0x2037e5=this[_0x3cd4c1(0xb29)](_0x103ef4)[_0x3cd4c1(0xa28)],_0x582e4b=Math[_0x3cd4c1(0x521)]((this[_0x3cd4c1(0x541)]-_0x2037e5)/0x2);this[_0x3cd4c1(0x83c)](_0x103ef4,_0x582e4b,0x0,_0x2037e5);},Window_AutoBattleCancel['prototype'][_0x3237d7(0x55a)]=function(){const _0x9892bc=_0x3237d7;return Imported['VisuMZ_0_CoreEngine']?TextManager['getInputButtonString']('ok'):VisuMZ[_0x9892bc(0xa4)][_0x9892bc(0x98d)][_0x9892bc(0x811)]['AutoBattleOK'];},Window_AutoBattleCancel[_0x3237d7(0x735)]['cancelButtonText']=function(){const _0x1bbc9a=_0x3237d7;if(Imported[_0x1bbc9a(0x38d)]){if(_0x1bbc9a(0xac8)!==_0x1bbc9a(0x50a))return TextManager[_0x1bbc9a(0x913)](_0x1bbc9a(0x8f7));else{let _0x5a8684=_0xd5f21c['skillTypes'][_0x108534];if(!_0x5a8684)return;let _0x3810d0=_0x5a8684;const _0x475410=this[_0x1bbc9a(0x2cd)]();if(_0x475410===_0x1bbc9a(0x488))_0x3810d0=_0x3810d0[_0x1bbc9a(0x268)](/\x1I\[(\d+)\]/gi,''),_0x3810d0=_0x3810d0['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x5a8684[_0x1bbc9a(0x453)](/\\I\[(\d+)\]/i)){const _0x4e81cb=_0x476fee[_0x1bbc9a(0x9c3)]?_0x121d03[_0x1bbc9a(0x92f)][_0x1bbc9a(0x98d)][_0x1bbc9a(0x637)]:_0x62c699[_0x1bbc9a(0xa4)][_0x1bbc9a(0x98d)][_0x1bbc9a(0x4c5)],_0x1ad7e0=_0x1abf43[_0x1bbc9a(0xd6)]['includes'](_0x51ef74),_0x3048f2=_0x1ad7e0?_0x4e81cb[_0x1bbc9a(0x914)]:_0x4e81cb['IconStypeNorm'];_0x3810d0=_0x1bbc9a(0x861)[_0x1bbc9a(0x117)](_0x3048f2,_0x5a8684);}}this[_0x1bbc9a(0x557)](_0x3810d0,_0x1bbc9a(0x8b2),!![],_0x3cf823);}}else return VisuMZ['BattleCore'][_0x1bbc9a(0x98d)][_0x1bbc9a(0x811)][_0x1bbc9a(0x7aa)];},Window_AutoBattleCancel['prototype'][_0x3237d7(0x4dc)]=function(){const _0x1524d6=_0x3237d7;Window_Base[_0x1524d6(0x735)][_0x1524d6(0x4dc)][_0x1524d6(0x4db)](this),this[_0x1524d6(0x151)](),this[_0x1524d6(0x79c)]();},Window_AutoBattleCancel['prototype'][_0x3237d7(0x151)]=function(){const _0x31d08c=_0x3237d7;this[_0x31d08c(0x6ad)]=BattleManager[_0x31d08c(0x62a)];},Window_AutoBattleCancel['prototype'][_0x3237d7(0x79c)]=function(){const _0x10c7b6=_0x3237d7;if(!BattleManager[_0x10c7b6(0x62a)])return;(Input[_0x10c7b6(0x27b)]('ok')||Input[_0x10c7b6(0x27b)](_0x10c7b6(0x8f7))||TouchInput[_0x10c7b6(0xafe)]()||TouchInput[_0x10c7b6(0x49c)]())&&(_0x10c7b6(0x5da)!==_0x10c7b6(0x5da)?(_0x48832b['BattleCore']['Scene_Battle_onActorOk']['call'](this),this[_0x10c7b6(0x667)]()):(SoundManager[_0x10c7b6(0x41b)](),BattleManager[_0x10c7b6(0x62a)]=![],Input[_0x10c7b6(0x2d9)](),TouchInput[_0x10c7b6(0x2d9)]()));};function Window_EnemyName(){const _0x1c2af4=_0x3237d7;this[_0x1c2af4(0xbb)](...arguments);}Window_EnemyName[_0x3237d7(0x735)]=Object['create'](Window_StatusBase[_0x3237d7(0x735)]),Window_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x607)]=Window_EnemyName,Window_EnemyName[_0x3237d7(0x735)][_0x3237d7(0xbb)]=function(_0x3451cc){const _0x4949d3=_0x3237d7;this[_0x4949d3(0x55f)]=_0x3451cc,this[_0x4949d3(0xa15)]='';const _0x4a9054=new Rectangle(0x0,0x0,Graphics[_0x4949d3(0x63d)],this[_0x4949d3(0x46e)]()*0x4);Window_StatusBase[_0x4949d3(0x735)]['initialize'][_0x4949d3(0x4db)](this,_0x4a9054),this[_0x4949d3(0x90b)](0x2),this[_0x4949d3(0x1e1)]=0x0;},Window_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x5f3)]=function(){this['padding']=0x0;},Window_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x9df)]=function(){const _0x3ea986=_0x3237d7;return $gameTroop[_0x3ea986(0x199)]()[this[_0x3ea986(0x55f)]];},Window_EnemyName[_0x3237d7(0x735)]['update']=function(){const _0x51b356=_0x3237d7;Window_StatusBase[_0x51b356(0x735)][_0x51b356(0x4dc)][_0x51b356(0x4db)](this),this[_0x51b356(0x9df)]()&&this[_0x51b356(0x9df)]()[_0x51b356(0x444)]()!==this[_0x51b356(0xa15)]&&(this[_0x51b356(0xa15)]=this[_0x51b356(0x9df)]()['name'](),this[_0x51b356(0xaa6)]()),this[_0x51b356(0xa9)](),this[_0x51b356(0x62e)]();},Window_EnemyName[_0x3237d7(0x735)]['updateOpacity']=function(){const _0x184d3a=_0x3237d7;if(!this[_0x184d3a(0x9df)]()){if(this[_0x184d3a(0x1e1)]>0x0)this[_0x184d3a(0x1e1)]-=0x10;}else{if(this[_0x184d3a(0x9df)]()['isDead']()){if(this[_0x184d3a(0x1e1)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager[_0x184d3a(0x2a7)]['_enemyWindow']&&SceneManager[_0x184d3a(0x2a7)][_0x184d3a(0x988)][_0x184d3a(0x8e6)]&&SceneManager[_0x184d3a(0x2a7)][_0x184d3a(0x988)][_0x184d3a(0x88c)][_0x184d3a(0x231)](this[_0x184d3a(0x9df)]())){if('PBmrl'!=='jlgwa'){if(this['contentsOpacity']<0xff)this[_0x184d3a(0x1e1)]+=0x10;}else return![];}else{if(this['contentsOpacity']>0x0){if(_0x184d3a(0x257)==='gXrrg')this[_0x184d3a(0x1e1)]-=0x10;else return _0x1b370a[_0x184d3a(0xb3d)];}}}}},Window_EnemyName['prototype'][_0x3237d7(0x62e)]=function(){const _0x21ffab=_0x3237d7;if(!this[_0x21ffab(0x9df)]())return;if(SceneManager['isBattleFlipped']())this['x']=Graphics['boxWidth']-this[_0x21ffab(0x9df)]()['battler']()['_baseX'];else{if('lNepS'!==_0x21ffab(0x9cc))return _0x35272d['boxWidth'];else this['x']=this[_0x21ffab(0x9df)]()['battler']()['_baseX'];}this['x']-=Math[_0x21ffab(0x222)](this['width']/0x2),this['y']=this[_0x21ffab(0x9df)]()[_0x21ffab(0x1d5)]()[_0x21ffab(0x9ed)]-Math[_0x21ffab(0x222)](this['lineHeight']()*1.5);const _0x1b62c9=VisuMZ[_0x21ffab(0xa4)][_0x21ffab(0x98d)][_0x21ffab(0x754)];this['x']+=_0x1b62c9[_0x21ffab(0x96f)]||0x0,this['y']+=_0x1b62c9['NameOffsetY']||0x0;},Window_EnemyName[_0x3237d7(0x735)][_0x3237d7(0x977)]=function(){const _0x164c16=_0x3237d7;Window_Base[_0x164c16(0x735)][_0x164c16(0x977)][_0x164c16(0x4db)](this),this[_0x164c16(0x5b6)]['fontSize']=VisuMZ[_0x164c16(0xa4)][_0x164c16(0x98d)][_0x164c16(0x754)][_0x164c16(0x823)];},Window_EnemyName['prototype'][_0x3237d7(0xaa6)]=function(){const _0x28fb76=_0x3237d7;Window_StatusBase[_0x28fb76(0x735)][_0x28fb76(0xaa6)][_0x28fb76(0x4db)](this),this[_0x28fb76(0x5b6)][_0x28fb76(0x2d9)]();if(!this[_0x28fb76(0x9df)]())return;this[_0x28fb76(0xb17)]();},Window_EnemyName[_0x3237d7(0x735)][_0x3237d7(0xb17)]=function(){const _0x12fcfc=_0x3237d7;this['_text']=this['enemy']()[_0x12fcfc(0x444)]();const _0x4ef18b=this[_0x12fcfc(0xb29)](this[_0x12fcfc(0xa15)])[_0x12fcfc(0xa28)],_0x50a668=Math['round']((this['innerWidth']-_0x4ef18b)/0x2);this[_0x12fcfc(0x83c)](this[_0x12fcfc(0xa15)],_0x50a668,0x0,_0x4ef18b+0x8);},Window_BattleLog['prototype'][_0x3237d7(0x467)]=function(){return VisuMZ['BattleCore']['Settings']['BattleLog']['MaxLines'];},Window_BattleLog[_0x3237d7(0x735)]['messageSpeed']=function(){const _0x2cae37=_0x3237d7;return VisuMZ['BattleCore'][_0x2cae37(0x98d)][_0x2cae37(0x10b)]['MessageWait'];},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x93e)]=function(){const _0x3af076=_0x3237d7;return VisuMZ[_0x3af076(0xa4)][_0x3af076(0x98d)][_0x3af076(0x10b)][_0x3af076(0x2ed)];},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x871)]=function(){return![];},Window_BattleLog['prototype'][_0x3237d7(0x884)]=function(_0x289d9f,_0x16eccf){const _0x1fe8dc=_0x3237d7;this[_0x1fe8dc(0x6f9)](_0x1fe8dc(0xc3)),BattleManager[_0x1fe8dc(0x40e)](_0x289d9f,_0x16eccf),this['callNextMethod']();},Window_BattleLog['prototype'][_0x3237d7(0xc3)]=function(){const _0xfd299e=_0x3237d7;this[_0xfd299e(0x4a1)]();},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x857)]=function(_0x100273){const _0x167b84=_0x3237d7,_0x5c80a2=Array['prototype'][_0x167b84(0xa76)][_0x167b84(0x4db)](arguments,0x1),_0x3f2da9={'name':_0x100273,'params':_0x5c80a2},_0x4b0b23=this[_0x167b84(0x530)][_0x167b84(0x1e0)](_0x3997ae=>_0x3997ae[_0x167b84(0x444)])['indexOf'](_0x167b84(0xc3));if(_0x4b0b23>=0x0)this[_0x167b84(0x530)][_0x167b84(0x4fd)](_0x4b0b23,0x0,_0x3f2da9);else{if(_0x167b84(0x5af)!==_0x167b84(0x9d1))this[_0x167b84(0x530)]['push'](_0x3f2da9);else return _0x2e59d8[_0x167b84(0xa4)][_0x167b84(0x49d)][_0x167b84(0x4db)](this);}},Window_BattleLog['prototype'][_0x3237d7(0x6f9)]=function(_0x476736){const _0x5b7bab=_0x3237d7,_0x401a66=Array[_0x5b7bab(0x735)][_0x5b7bab(0xa76)][_0x5b7bab(0x4db)](arguments,0x1);this['_methods'][_0x5b7bab(0x6f9)]({'name':_0x476736,'params':_0x401a66});},Window_BattleLog[_0x3237d7(0x735)]['logActionList']=function(){const _0x1450ab=_0x3237d7;if(!$gameTemp[_0x1450ab(0x790)]())return;console['log'](this[_0x1450ab(0x530)][_0x1450ab(0x1e0)](_0x25458b=>_0x25458b[_0x1450ab(0x444)])[_0x1450ab(0x91e)]('\x0a'));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x62f)]=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xaa6)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xaa6)]=function(){const _0x101541=_0x3237d7;this[_0x101541(0x4bb)]=!![];},VisuMZ['BattleCore']['Window_BattleLog_update']=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x4dc)],Window_BattleLog['prototype'][_0x3237d7(0x4dc)]=function(){const _0x316845=_0x3237d7;VisuMZ[_0x316845(0xa4)][_0x316845(0x59c)][_0x316845(0x4db)](this);if(this[_0x316845(0x4bb)])this['processRefresh']();},Window_BattleLog[_0x3237d7(0x735)]['processRefresh']=function(){const _0x16bce6=_0x3237d7;this[_0x16bce6(0x4bb)]=![],VisuMZ['BattleCore'][_0x16bce6(0x62f)][_0x16bce6(0x4db)](this);},Window_BattleLog[_0x3237d7(0x735)]['drawLineText']=function(_0x24b74a){const _0x4bc2f2=_0x3237d7;let _0x5df892=VisuMZ['BattleCore'][_0x4bc2f2(0x98d)][_0x4bc2f2(0x10b)][_0x4bc2f2(0x27d)][_0x4bc2f2(0x165)]()[_0x4bc2f2(0x194)](),_0x84d7c1=this[_0x4bc2f2(0x2a8)][_0x24b74a];if(_0x84d7c1[_0x4bc2f2(0x453)](/<LEFT>/i)){if(_0x4bc2f2(0x9bc)!=='SsdLP'){if(!_0x1c89a4[_0x4bc2f2(0xa4)]['Settings'][_0x4bc2f2(0x3c0)][_0x4bc2f2(0x28a)])return;const _0x2d8d69=_0x14864b[_0x4bc2f2(0x59b)],_0x1ed874=_0x4bc2f2(0x59b);this[_0x4bc2f2(0x557)](_0x2d8d69,_0x1ed874);}else _0x5df892=_0x4bc2f2(0x34d);}else{if(_0x84d7c1[_0x4bc2f2(0x453)](/<CENTER>/i))_0x4bc2f2(0x6e5)==='hbbMr'?_0x5df892=_0x4bc2f2(0x415):_0x5d2a74+=_0xaea1a2(_0x362004['$1']);else _0x84d7c1[_0x4bc2f2(0x453)](/<RIGHT>/i)&&(_0x5df892=_0x4bc2f2(0xad0));}_0x84d7c1=_0x84d7c1[_0x4bc2f2(0x268)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x84d7c1=_0x84d7c1[_0x4bc2f2(0x268)](/\\I\[0\]/gi,'');const _0x1aff1f=this[_0x4bc2f2(0x1a5)](_0x24b74a);this[_0x4bc2f2(0x5b6)][_0x4bc2f2(0x4f1)](_0x1aff1f['x'],_0x1aff1f['y'],_0x1aff1f[_0x4bc2f2(0xa28)],_0x1aff1f[_0x4bc2f2(0x766)]);const _0x8beb67=this[_0x4bc2f2(0xb29)](_0x84d7c1)[_0x4bc2f2(0xa28)];let _0xc68bb4=_0x1aff1f['x'];if(_0x5df892===_0x4bc2f2(0x415))_0x4bc2f2(0x3e4)!==_0x4bc2f2(0xa0f)?_0xc68bb4+=(_0x1aff1f['width']-_0x8beb67)/0x2:(this['regenerateAllBattleCore'](),this['processBattleCoreJS']('PostRegenerateJS'));else _0x5df892===_0x4bc2f2(0xad0)&&(_0xc68bb4+=_0x1aff1f[_0x4bc2f2(0xa28)]-_0x8beb67);this[_0x4bc2f2(0x83c)](_0x84d7c1,_0xc68bb4,_0x1aff1f['y'],_0x8beb67+0x8);},Window_BattleLog[_0x3237d7(0x735)]['addText']=function(_0x1b8bdc){const _0x495586=_0x3237d7;this[_0x495586(0x2a8)][_0x495586(0x857)](_0x1b8bdc),this[_0x495586(0xaa6)](),this['callNextMethod']();},Window_BattleLog[_0x3237d7(0x735)]['updateWaitMode']=function(){const _0x374c7b=_0x3237d7;let _0x484a9a=![];switch(this[_0x374c7b(0x40c)]){case _0x374c7b(0x49b):_0x484a9a=this[_0x374c7b(0x314)]['isEffecting']();break;case _0x374c7b(0x154):_0x484a9a=this[_0x374c7b(0x314)][_0x374c7b(0x561)]();break;case'animation':_0x484a9a=this[_0x374c7b(0x314)][_0x374c7b(0xb4)]();break;case _0x374c7b(0xacc):_0x484a9a=this[_0x374c7b(0x314)]['isAnyoneFloating']();break;case'jump':_0x484a9a=this[_0x374c7b(0x314)]['isAnyoneJumping']();break;case _0x374c7b(0x61e):_0x484a9a=this['_spriteset'][_0x374c7b(0x4d6)]();break;}return!_0x484a9a&&(this[_0x374c7b(0x40c)]=''),_0x484a9a;},Window_BattleLog['prototype']['waitForAnimation']=function(){const _0x2c502f=_0x3237d7;this['setWaitMode'](_0x2c502f(0x8bb));},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x939)]=function(){const _0xe8ce47=_0x3237d7;this[_0xe8ce47(0x20e)]('float');},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xb00)]=function(){const _0x1159aa=_0x3237d7;this[_0x1159aa(0x20e)](_0x1159aa(0x1e2));},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x2ea)]=function(){const _0x7e77d9=_0x3237d7;this['setWaitMode'](_0x7e77d9(0x61e));},Window_BattleLog['prototype']['startTurn']=function(){const _0x5cce32=_0x3237d7,_0x55b4b4=VisuMZ[_0x5cce32(0xa4)]['Settings'][_0x5cce32(0x10b)];if(!_0x55b4b4['StartTurnShow'])return;this[_0x5cce32(0x857)]('addText',_0x55b4b4[_0x5cce32(0x214)][_0x5cce32(0x117)]($gameTroop['turnCount']())),this[_0x5cce32(0x857)](_0x5cce32(0x369),_0x55b4b4[_0x5cce32(0x953)]),this[_0x5cce32(0x857)](_0x5cce32(0x2d9));},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x5a3)]=function(_0x1ea9c,_0x4374cf,_0x1eb3a0){const _0x1241f2=_0x3237d7;if(this['isCustomActionSequence'](_0x4374cf))BattleManager['prepareCustomActionSequence']();else{if(_0x1241f2(0xb59)!==_0x1241f2(0x992))this[_0x1241f2(0xa6)](_0x1ea9c,_0x4374cf,_0x1eb3a0);else return!![];}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x47a)]=function(_0x2f34b9){const _0x51d92d=_0x3237d7;if(!SceneManager[_0x51d92d(0x5cb)]())return![];if(!_0x2f34b9)return![];if(!_0x2f34b9[_0x51d92d(0x7be)]())return![];if(_0x2f34b9[_0x51d92d(0x7be)]()['note'][_0x51d92d(0x453)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x51d92d(0x4f6)](_0x2f34b9[_0x51d92d(0x7be)]()))return!![];return![];},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xa6)]=function(_0x3c00d3,_0x897004,_0x207cc9){const _0x2566d4=_0x3237d7,_0x40c686=_0x897004[_0x2566d4(0x7be)]();this[_0x2566d4(0x468)](_0x3c00d3,_0x897004,_0x207cc9),this[_0x2566d4(0x3ee)](_0x3c00d3,_0x897004,_0x207cc9),this[_0x2566d4(0x7c3)](_0x3c00d3,_0x897004,_0x207cc9);},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x5ad)]=function(_0x1e66c9,_0x57fdf5){const _0x5cf09a=_0x3237d7,_0x5fb124=VisuMZ[_0x5cf09a(0xa4)]['Settings'][_0x5cf09a(0x10b)];if(_0x5fb124[_0x5cf09a(0x41d)]){if(_0x5cf09a(0x3a7)!==_0x5cf09a(0x3a7)){const _0xef7f6f=_0x58aef1[_0xab2866];if(_0xef7f6f)_0x3fc441[_0x5cf09a(0x857)](_0xfe04c8[_0x5cf09a(0xa88)](_0xef7f6f));}else this['push'](_0x5cf09a(0x43b),_0x5cf09a(0x74e)[_0x5cf09a(0x117)](DataManager[_0x5cf09a(0x439)](_0x57fdf5)));}if(DataManager[_0x5cf09a(0x3e6)](_0x57fdf5)){if(_0x5cf09a(0x4e5)!==_0x5cf09a(0x4e5))this['_cursorArea']=new _0x54196d(),this['_cursorArea'][_0x5cf09a(0x6d1)]=[new _0x21fb9e[(_0x5cf09a(0x6d1))][(_0x5cf09a(0x473))]()],this[_0x5cf09a(0xa02)][_0x5cf09a(0xaa2)]=new _0x1f507c(),this[_0x5cf09a(0xa02)][_0x5cf09a(0xaf8)](this[_0x5cf09a(0xa26)],this[_0x5cf09a(0xa26)]),this['addChild'](this[_0x5cf09a(0xa02)]);else{if(_0x5fb124['ActionSkillMsg1'])this[_0x5cf09a(0x64d)](_0x57fdf5['message1'],_0x1e66c9,_0x57fdf5);if(_0x5fb124[_0x5cf09a(0x46d)])this[_0x5cf09a(0x64d)](_0x57fdf5[_0x5cf09a(0x83b)],_0x1e66c9,_0x57fdf5);}}else{if(_0x5cf09a(0x590)!==_0x5cf09a(0x590)){if(this[_0x5cf09a(0x457)]()==='border')return this[_0x5cf09a(0x2ec)]();else return this['isSkillItemWindowsMiddle']()?this[_0x5cf09a(0x1fd)]():_0x50d20b['BattleCore']['Scene_Battle_skillWindowRect'][_0x5cf09a(0x4db)](this);}else{if(_0x5fb124[_0x5cf09a(0x67d)])this[_0x5cf09a(0x64d)](TextManager['useItem'],_0x1e66c9,_0x57fdf5);}}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x468)]=function(_0x10df0f,_0x18ad32,_0x3d05ae){const _0x170cf7=_0x3237d7,_0x137d19=_0x18ad32[_0x170cf7(0x7be)]();this['displayAction'](_0x10df0f,_0x137d19),this[_0x170cf7(0x857)](_0x170cf7(0x8b4),_0x10df0f,_0x3d05ae,!![]),this[_0x170cf7(0x857)](_0x170cf7(0x8be),_0x10df0f,_0x18ad32),this[_0x170cf7(0x857)](_0x170cf7(0x962)),this[_0x170cf7(0x857)](_0x170cf7(0x6fb),_0x10df0f,_0x18ad32),this['push'](_0x170cf7(0x9c5));},Window_BattleLog['prototype'][_0x3237d7(0x3ee)]=function(_0x501c9a,_0x270c52,_0xd85ef1){const _0x3624a6=_0x3237d7;if(this[_0x3624a6(0x3da)](_0x270c52))this[_0x3624a6(0xa5f)](_0x501c9a,_0x270c52,_0xd85ef1);else{if(this[_0x3624a6(0x9c6)](_0x270c52)){if(_0x3624a6(0xa7)==='JcMXy')this['autoMeleeMultiTargetActionSet'](_0x501c9a,_0x270c52,_0xd85ef1);else return _0x51d4fc['BattleCore'][_0x3624a6(0x98d)][_0x3624a6(0x661)]['CmdStyle'];}else _0x270c52[_0x3624a6(0x4c0)]()?_0x3624a6(0xa4c)===_0x3624a6(0xa5)?_0x46041f[_0x3624a6(0x4c4)](_0x368e1e):this['targetActionSet'](_0x501c9a,_0x270c52,_0xd85ef1):_0x3624a6(0xb1c)!=='fGfkj'?(_0x39283[_0x3624a6(0xa4)]['Window_BattleLog_performMiss']['call'](this,_0x537ca4),this['callNextMethod']()):this[_0x3624a6(0xa6a)](_0x501c9a,_0x270c52,_0xd85ef1);}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x3da)]=function(_0xdf0217){const _0x830933=_0x3237d7;if(!_0xdf0217[_0x830933(0xa73)]())return![];if(!_0xdf0217[_0x830933(0x228)]())return![];if(!_0xdf0217['isForOpponent']())return![];return VisuMZ[_0x830933(0xa4)][_0x830933(0x98d)]['ActionSequence'][_0x830933(0x367)];},Window_BattleLog['prototype'][_0x3237d7(0xa5f)]=function(_0x24fe3b,_0x16bd06,_0x18aaba){const _0x5ba406=_0x3237d7,_0x14f26d=_0x24fe3b[_0x5ba406(0x7e2)]()['type']<0x2,_0x456b23=0x14,_0x2ca7b1=0x30;if(_0x14f26d){if('XJOTg'===_0x5ba406(0x8d1)){const _0x192262=_0x34f76e(_0x30664c['$1']);return _0x362479[_0x5ba406(0x7ff)]()[_0x5ba406(0x921)](_0x5ac881=>_0x5ac881[_0x5ba406(0x6de)]()===_0x192262);}else this[_0x5ba406(0x857)](_0x5ba406(0x6dc),[_0x24fe3b],_0x2ca7b1,_0x456b23),this[_0x5ba406(0x857)](_0x5ba406(0x34c),_0x24fe3b,_0x18aaba,_0x5ba406(0x325),_0x456b23,!![],_0x5ba406(0xc6),!![]),this[_0x5ba406(0x857)](_0x5ba406(0x85a),[_0x24fe3b],_0x5ba406(0x33a)),this['push'](_0x5ba406(0x962));}let _0x29c183=_0x16bd06['isAttack']()?this['getDualWieldTimes'](_0x24fe3b):0x1;for(let _0x6f2409=0x0;_0x6f2409<_0x29c183;_0x6f2409++){_0x16bd06[_0x5ba406(0xa0d)]()&&_0x24fe3b[_0x5ba406(0x5ef)]()&&this['push']('setActiveWeaponSet',_0x24fe3b,_0x6f2409),_0x16bd06['item']()[_0x5ba406(0x6bf)]<0x0?this[_0x5ba406(0x519)](_0x24fe3b,_0x16bd06,_0x18aaba):this[_0x5ba406(0xa6a)](_0x24fe3b,_0x16bd06,_0x18aaba);}_0x16bd06[_0x5ba406(0xa0d)]()&&_0x24fe3b[_0x5ba406(0x5ef)]()&&(_0x5ba406(0x8ba)!==_0x5ba406(0x8ba)?this[_0x5ba406(0x856)](_0x5ba406(0x556)):this[_0x5ba406(0x857)](_0x5ba406(0x786),_0x24fe3b));this[_0x5ba406(0x857)](_0x5ba406(0x8b4),_0x24fe3b,_0x18aaba,![]);if(_0x14f26d){if('EyeBN'===_0x5ba406(0x25b)){const _0x197e12=_0x24fe3b[_0x5ba406(0x1d5)]();this[_0x5ba406(0x857)](_0x5ba406(0x6dc),[_0x24fe3b],_0x2ca7b1,_0x456b23),this['push'](_0x5ba406(0x9ce),_0x24fe3b,_0x197e12[_0x5ba406(0x7e8)],_0x197e12['_homeY'],_0x456b23,![],_0x5ba406(0xc6)),this[_0x5ba406(0x857)]('requestMotion',[_0x24fe3b],_0x5ba406(0x3a4)),this['push'](_0x5ba406(0x962)),this[_0x5ba406(0x857)](_0x5ba406(0x85a),[_0x24fe3b],'walk');}else{const _0x142d2d=_0x304e63[_0x5ba406(0x108)](_0x4660b9[_0x5ba406(0x9a0)]());_0x142d2d[_0x5ba406(0x8fc)](this[_0x5ba406(0x204)][_0x5ba406(0x114)](this,_0x142d2d));}}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x9c6)]=function(_0x5b65c6){const _0x1685f3=_0x3237d7;if(!_0x5b65c6[_0x1685f3(0xa73)]())return![];if(!_0x5b65c6[_0x1685f3(0x11e)]())return![];if(!_0x5b65c6['isForOpponent']())return![];return VisuMZ[_0x1685f3(0xa4)][_0x1685f3(0x98d)][_0x1685f3(0x9f9)][_0x1685f3(0x276)];},Window_BattleLog[_0x3237d7(0x735)]['autoMeleeMultiTargetActionSet']=function(_0x4bc2d8,_0x57ea11,_0x3521b2){const _0x47ed90=_0x3237d7,_0x58311a=_0x4bc2d8[_0x47ed90(0x7e2)]()[_0x47ed90(0x2a5)]<0x2,_0x17edc8=0x14,_0x5ab950=0x30;_0x58311a&&(this[_0x47ed90(0x857)](_0x47ed90(0x6dc),[_0x4bc2d8],_0x5ab950,_0x17edc8),this[_0x47ed90(0x857)](_0x47ed90(0x34c),_0x4bc2d8,_0x3521b2,'front\x20center',_0x17edc8,!![],_0x47ed90(0xc6),!![]),this[_0x47ed90(0x857)](_0x47ed90(0x85a),[_0x4bc2d8],_0x47ed90(0x33a)),this[_0x47ed90(0x857)](_0x47ed90(0x962)));let _0x5c3af4=_0x57ea11['isAttack']()?this[_0x47ed90(0x61f)](_0x4bc2d8):0x1;for(let _0x5f3d2f=0x0;_0x5f3d2f<_0x5c3af4;_0x5f3d2f++){if(_0x47ed90(0x3f2)===_0x47ed90(0x9f4))return _0x3521f6[_0x47ed90(0x309)][_0x47ed90(0x98d)][_0x47ed90(0x769)][_0x47ed90(0x99)];else{if(_0x57ea11[_0x47ed90(0xa0d)]()&&_0x4bc2d8['isActor']()){if('wwnMQ'==='wwnMQ')this[_0x47ed90(0x857)](_0x47ed90(0x22d),_0x4bc2d8,_0x5f3d2f);else return this['isDTB']();}this['wholeActionSet'](_0x4bc2d8,_0x57ea11,_0x3521b2);}}_0x57ea11['isAttack']()&&_0x4bc2d8[_0x47ed90(0x5ef)]()&&(_0x47ed90(0x422)!=='QHOql'?this[_0x47ed90(0x857)]('clearActiveWeaponSet',_0x4bc2d8):this[_0x47ed90(0x43f)]=_0x3882e8[_0x47ed90(0xcf)](_0x1e9f84[_0x47ed90(0x9b7)]));this[_0x47ed90(0x857)](_0x47ed90(0x8b4),_0x4bc2d8,_0x3521b2,![]);if(_0x58311a){if(_0x47ed90(0x1fb)===_0x47ed90(0x230)){if(!_0xd85f32[_0x47ed90(0x5cb)]())return;if(!_0x5995a7[_0x47ed90(0x255)])return;_0xe393fc[_0x47ed90(0x3d3)](_0xc6b3e1,_0x2ce568);const _0x5473b5=_0x3232aa[_0x47ed90(0x968)](),_0x3746c4=_0x74fcf9['WaitForAngle'];if(!_0x5473b5)return;_0x4660a6[_0x47ed90(0x589)](_0x53b17d[_0x47ed90(0x5e4)],_0x2b66f9[_0x47ed90(0x1e5)],_0x2a3398[_0x47ed90(0x758)]);if(_0x3746c4)_0x5473b5[_0x47ed90(0x20e)]('battleAngle');}else{const _0x1c0b03=_0x4bc2d8['battler']();this[_0x47ed90(0x857)](_0x47ed90(0x6dc),[_0x4bc2d8],_0x5ab950,_0x17edc8),this[_0x47ed90(0x857)](_0x47ed90(0x9ce),_0x4bc2d8,_0x1c0b03[_0x47ed90(0x7e8)],_0x1c0b03['_homeY'],_0x17edc8,![],_0x47ed90(0xc6)),this[_0x47ed90(0x857)](_0x47ed90(0x85a),[_0x4bc2d8],_0x47ed90(0x3a4)),this[_0x47ed90(0x857)](_0x47ed90(0x962)),this['push'](_0x47ed90(0x85a),[_0x4bc2d8],_0x47ed90(0x33a));}}},Window_BattleLog[_0x3237d7(0x735)]['targetActionSet']=function(_0x74ea5a,_0x473339,_0x4d562f){const _0x5bff27=_0x3237d7,_0xbc35ec=_0x473339[_0x5bff27(0x7be)]();for(const _0x3ebd89 of _0x4d562f){if(!_0x3ebd89)continue;this[_0x5bff27(0x857)](_0x5bff27(0x5d8),_0x74ea5a,_0x473339),this['push'](_0x5bff27(0x369),Sprite_Battler[_0x5bff27(0xa1)]),this[_0x5bff27(0x857)]('showAnimation',_0x74ea5a,[_0x3ebd89],_0xbc35ec['animationId']),this['push']('waitCount',0x18),this['push']('actionEffect',_0x74ea5a,_0x3ebd89);}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xa6a)]=function(_0x39b677,_0x2e5e55,_0x55a9a){const _0x1bef42=_0x3237d7,_0x16075d=_0x2e5e55[_0x1bef42(0x7be)]();this['push'](_0x1bef42(0x5d8),_0x39b677,_0x2e5e55),this[_0x1bef42(0x857)](_0x1bef42(0x369),Sprite_Battler[_0x1bef42(0xa1)]),this['push'](_0x1bef42(0x45d),_0x39b677,_0x55a9a['clone'](),_0x16075d[_0x1bef42(0x6bf)]),this[_0x1bef42(0x857)](_0x1bef42(0x9c5));for(const _0x35c558 of _0x55a9a){if(!_0x35c558)continue;this[_0x1bef42(0x857)](_0x1bef42(0x884),_0x39b677,_0x35c558);}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x7c3)]=function(_0x2afae2,_0x379d86,_0x44fb3f){const _0x5cfab9=_0x3237d7,_0x2b2b10=_0x379d86[_0x5cfab9(0x7be)]();this[_0x5cfab9(0x857)](_0x5cfab9(0x8b4),_0x2afae2,_0x44fb3f,![]),this['push'](_0x5cfab9(0x9a3)),this[_0x5cfab9(0x857)](_0x5cfab9(0x2a6)),this[_0x5cfab9(0x857)](_0x5cfab9(0x2d9)),this[_0x5cfab9(0x857)](_0x5cfab9(0x938),_0x2afae2),this[_0x5cfab9(0x857)]('waitForMovement');},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x574)]=function(_0x175ec5){},VisuMZ[_0x3237d7(0xa4)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x14d)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x14d)]=function(_0x18c396){const _0x7b4beb=_0x3237d7;if(!VisuMZ['BattleCore'][_0x7b4beb(0x98d)][_0x7b4beb(0x10b)][_0x7b4beb(0x1b9)])return;VisuMZ['BattleCore'][_0x7b4beb(0x697)][_0x7b4beb(0x4db)](this,_0x18c396);},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x660)]=function(_0x178121){const _0x59966b=_0x3237d7;this[_0x59966b(0x857)](_0x59966b(0x1b2),_0x178121);VisuMZ[_0x59966b(0xa4)][_0x59966b(0x98d)][_0x59966b(0x9f9)][_0x59966b(0xa4e)]&&this['push']('showAnimation',_0x178121,[BattleManager[_0x59966b(0xb5c)]],-0x1);if(!VisuMZ[_0x59966b(0xa4)][_0x59966b(0x98d)][_0x59966b(0x10b)][_0x59966b(0x8f1)])return;this[_0x59966b(0x857)]('addText',TextManager[_0x59966b(0x7d8)][_0x59966b(0x117)](_0x178121[_0x59966b(0x444)]()));},Window_BattleLog['prototype'][_0x3237d7(0x5b1)]=function(_0x1f1358){const _0x25d28c=_0x3237d7;this[_0x25d28c(0x857)](_0x25d28c(0x6f3),_0x1f1358);if(!VisuMZ['BattleCore']['Settings'][_0x25d28c(0x10b)][_0x25d28c(0xa3b)])return;this[_0x25d28c(0x857)](_0x25d28c(0x43b),TextManager[_0x25d28c(0x469)][_0x25d28c(0x117)](_0x1f1358[_0x25d28c(0x444)]()));},Window_BattleLog['prototype'][_0x3237d7(0x7de)]=function(_0x3a28f2,_0x178916){const _0x2767bc=_0x3237d7;if(VisuMZ['BattleCore'][_0x2767bc(0x98d)][_0x2767bc(0x9f9)][_0x2767bc(0x13e)]){const _0x5d4992=_0x178916[_0x2767bc(0x7be)]();this[_0x2767bc(0x857)](_0x2767bc(0x45d),_0x3a28f2,[_0x3a28f2],_0x5d4992[_0x2767bc(0x6bf)]);}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x7bb)]=function(_0xc27d,_0x39447d){const _0x4e4c54=_0x3237d7;this['push'](_0x4e4c54(0x96e),_0xc27d,_0x39447d);if(!VisuMZ[_0x4e4c54(0xa4)][_0x4e4c54(0x98d)]['BattleLog'][_0x4e4c54(0x254)])return;const _0x4b81be=_0xc27d[_0x4e4c54(0x444)](),_0x1022db=TextManager[_0x4e4c54(0x3c3)]['format'](_0x4b81be,_0x39447d[_0x4e4c54(0x444)]());this['push'](_0x4e4c54(0x43b),_0x1022db);},VisuMZ['BattleCore'][_0x3237d7(0x739)]=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x166)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x166)]=function(_0x1b7955,_0x1cb2da){const _0x14a340=_0x3237d7;VisuMZ[_0x14a340(0xa4)][_0x14a340(0x739)][_0x14a340(0x4db)](this,_0x1b7955,_0x1cb2da),this[_0x14a340(0x857)](_0x14a340(0x2d9));},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x2c0)]=Window_BattleLog['prototype'][_0x3237d7(0x34f)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x34f)]=function(_0x46ef40){const _0x543b2c=_0x3237d7;if(!VisuMZ['BattleCore'][_0x543b2c(0x98d)][_0x543b2c(0x10b)][_0x543b2c(0x698)])return;VisuMZ[_0x543b2c(0xa4)][_0x543b2c(0x2c0)][_0x543b2c(0x4db)](this,_0x46ef40);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x3ad)]=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x232)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x232)]=function(_0x2bf61d){const _0x527d8e=_0x3237d7;if(!VisuMZ['BattleCore'][_0x527d8e(0x98d)][_0x527d8e(0x10b)][_0x527d8e(0xada)])return;VisuMZ[_0x527d8e(0xa4)][_0x527d8e(0x3ad)]['call'](this,_0x2bf61d);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xaa1)]=Window_BattleLog['prototype'][_0x3237d7(0xa6c)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xa6c)]=function(_0x4fc837){const _0x4afa6d=_0x3237d7;!VisuMZ[_0x4afa6d(0xa4)][_0x4afa6d(0x98d)][_0x4afa6d(0x10b)][_0x4afa6d(0x423)]?this[_0x4afa6d(0x857)](_0x4afa6d(0x26b),_0x4fc837):_0x4afa6d(0x737)===_0x4afa6d(0x737)?VisuMZ['BattleCore'][_0x4afa6d(0xaa1)][_0x4afa6d(0x4db)](this,_0x4fc837):_0x38ba78[_0x4afa6d(0x735)][_0x4afa6d(0x5f3)][_0x4afa6d(0x4db)](this);},VisuMZ['BattleCore']['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x296)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x296)]=function(_0x5975b9){const _0x399bdf=_0x3237d7;if(!VisuMZ['BattleCore'][_0x399bdf(0x98d)]['BattleLog'][_0x399bdf(0x423)])_0x5975b9['result']()[_0x399bdf(0x4f9)]?this[_0x399bdf(0x857)](_0x399bdf(0x170),_0x5975b9):this[_0x399bdf(0x857)](_0x399bdf(0xb0c),_0x5975b9);else{if(_0x399bdf(0x32c)!==_0x399bdf(0x5e0))VisuMZ[_0x399bdf(0xa4)]['Window_BattleLog_displayEvasion'][_0x399bdf(0x4db)](this,_0x5975b9);else{if(!_0x12297a[_0x399bdf(0x335)](_0x192798))return!![];}}},Window_BattleLog[_0x3237d7(0x735)]['displayHpDamage']=function(_0x1ab5a8){const _0x28fcb7=_0x3237d7;if(_0x1ab5a8[_0x28fcb7(0x634)]()['hpAffected']){_0x1ab5a8[_0x28fcb7(0x634)]()[_0x28fcb7(0x260)]>0x0&&!_0x1ab5a8['result']()[_0x28fcb7(0x8f8)]&&this[_0x28fcb7(0x857)](_0x28fcb7(0x71b),_0x1ab5a8);if(_0x1ab5a8[_0x28fcb7(0x634)]()[_0x28fcb7(0x260)]<0x0){if(_0x28fcb7(0x579)===_0x28fcb7(0x579))this[_0x28fcb7(0x857)]('performRecovery',_0x1ab5a8);else{if(this[_0x28fcb7(0x7a9)]!==_0x28fcb7(0x51d))return this[_0x28fcb7(0x113)](_0x4d8488);else return _0x2590a9[_0x28fcb7(0x4bc)](this['item']())==='MANUAL'?_0x17392f[_0x28fcb7(0xa4)][_0x28fcb7(0xa9a)][_0x28fcb7(0x4db)](this,_0x30dd70):this[_0x28fcb7(0x987)](_0x342cbc);}}VisuMZ[_0x28fcb7(0xa4)]['Settings'][_0x28fcb7(0x10b)][_0x28fcb7(0xa84)]&&this[_0x28fcb7(0x857)](_0x28fcb7(0x43b),this[_0x28fcb7(0xaed)](_0x1ab5a8));}},VisuMZ[_0x3237d7(0xa4)]['Window_BattleLog_displayMpDamage']=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x3b4)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x3b4)]=function(_0x15cc69){const _0xac4a54=_0x3237d7;if(!VisuMZ[_0xac4a54(0xa4)][_0xac4a54(0x98d)][_0xac4a54(0x10b)]['ShowMpDmg'])return;VisuMZ[_0xac4a54(0xa4)][_0xac4a54(0x3bc)][_0xac4a54(0x4db)](this,_0x15cc69);},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xa08)]=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x4d9)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x4d9)]=function(_0x43c782){const _0xe4c5f0=_0x3237d7;if(!VisuMZ[_0xe4c5f0(0xa4)][_0xe4c5f0(0x98d)][_0xe4c5f0(0x10b)][_0xe4c5f0(0x8c4)])return;VisuMZ[_0xe4c5f0(0xa4)]['Window_BattleLog_displayTpDamage'][_0xe4c5f0(0x4db)](this,_0x43c782);},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x347)]=function(_0x292c76){const _0x52d722=_0x3237d7;_0x292c76[_0x52d722(0x634)]()[_0x52d722(0x48e)]()&&(this[_0x52d722(0x857)](_0x52d722(0x828)),this[_0x52d722(0x5b0)](_0x292c76),this[_0x52d722(0xa82)](_0x292c76),this[_0x52d722(0x857)](_0x52d722(0x9a3)));},Window_BattleLog['prototype'][_0x3237d7(0x14b)]=function(_0x1fbdf0){const _0x258427=_0x3237d7,_0x4dbe8b=_0x1fbdf0['result'](),_0x3fb525=_0x4dbe8b[_0x258427(0xb67)]();for(const _0x12d2a8 of _0x3fb525){const _0x1b36ea=_0x1fbdf0[_0x258427(0x5ef)]()?_0x12d2a8['message1']:_0x12d2a8['message2'];_0x1b36ea&&VisuMZ[_0x258427(0xa4)][_0x258427(0x98d)][_0x258427(0x10b)]['ShowAddedState']&&(_0x258427(0xb13)!==_0x258427(0xb13)?this['_active']=!![]:(this['push'](_0x258427(0x818)),this[_0x258427(0x857)]('popBaseLine'),this['push'](_0x258427(0x828)),this[_0x258427(0x857)](_0x258427(0x43b),_0x1b36ea['format'](_0x1fbdf0[_0x258427(0x444)]())),this[_0x258427(0x857)](_0x258427(0x6ca)))),_0x12d2a8['id']===_0x1fbdf0[_0x258427(0x97b)]()&&this[_0x258427(0x857)](_0x258427(0x5d7),_0x1fbdf0);}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x818)]=function(){},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x7ec)]=function(_0x29ff0c){const _0x376857=_0x3237d7;if(!VisuMZ['BattleCore']['Settings']['BattleLog'][_0x376857(0x780)])return;const _0x16e5cd=_0x29ff0c[_0x376857(0x634)](),_0x22fdc1=_0x16e5cd[_0x376857(0x2c7)]();for(const _0x5cbbb1 of _0x22fdc1){_0x5cbbb1[_0x376857(0x31d)]&&(this[_0x376857(0x857)](_0x376857(0xdb)),this[_0x376857(0x857)](_0x376857(0x48c)),this[_0x376857(0x857)](_0x376857(0x828)),this[_0x376857(0x857)]('addText',_0x5cbbb1[_0x376857(0x31d)]['format'](_0x29ff0c['name']())),this[_0x376857(0x857)](_0x376857(0x6ca)));}},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xdb)]=function(){},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xa82)]=function(_0x556358){const _0x9ec87f=_0x3237d7,_0x3258e5=VisuMZ['BattleCore']['Settings'][_0x9ec87f(0x10b)],_0x3c1ecf=_0x556358[_0x9ec87f(0x634)]();if(_0x3258e5['ShowAddedBuff'])this[_0x9ec87f(0xb35)](_0x556358,_0x3c1ecf['addedBuffs'],TextManager[_0x9ec87f(0x9f3)]);if(_0x3258e5[_0x9ec87f(0x98b)])this[_0x9ec87f(0xb35)](_0x556358,_0x3c1ecf[_0x9ec87f(0x8e7)],TextManager['debuffAdd']);if(_0x3258e5[_0x9ec87f(0x935)])this['displayBuffs'](_0x556358,_0x3c1ecf['removedBuffs'],TextManager[_0x9ec87f(0x58f)]);},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xb35)]=function(_0xb399f1,_0x32d8c8,_0x66645c){const _0x1f919c=_0x3237d7;for(const _0x301e6d of _0x32d8c8){if(_0x1f919c(0x94b)!==_0x1f919c(0xa6e)){const _0x25d24f=_0x66645c[_0x1f919c(0x117)](_0xb399f1[_0x1f919c(0x444)](),TextManager['param'](_0x301e6d));this[_0x1f919c(0x857)](_0x1f919c(0x48c)),this[_0x1f919c(0x857)]('pushBaseLine'),this[_0x1f919c(0x857)]('addText',_0x25d24f),this['push'](_0x1f919c(0x6ca));}else return _0x4a77fa(_0x1bb532['$1']);}},VisuMZ[_0x3237d7(0xa4)]['Window_BattleLog_clear']=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x2d9)],Window_BattleLog[_0x3237d7(0x735)]['clear']=function(){const _0x56889d=_0x3237d7;VisuMZ[_0x56889d(0xa4)][_0x56889d(0x536)][_0x56889d(0x4db)](this),this['callNextMethod']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x366)]=Window_BattleLog['prototype'][_0x3237d7(0x828)],Window_BattleLog['prototype']['pushBaseLine']=function(){const _0x96b77b=_0x3237d7;VisuMZ[_0x96b77b(0xa4)][_0x96b77b(0x366)][_0x96b77b(0x4db)](this),this['callNextMethod']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x64a)]=Window_BattleLog[_0x3237d7(0x735)]['popBaseLine'],Window_BattleLog[_0x3237d7(0x735)]['popBaseLine']=function(){const _0x5d4c43=_0x3237d7;VisuMZ[_0x5d4c43(0xa4)][_0x5d4c43(0x64a)][_0x5d4c43(0x4db)](this),this[_0x5d4c43(0x516)](),this['callNextMethod']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x471)]=Window_BattleLog[_0x3237d7(0x735)]['popupDamage'],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x7ee)]=function(_0x2dfb9c){const _0x138e18=_0x3237d7;VisuMZ[_0x138e18(0xa4)]['Window_BattleLog_popupDamage'][_0x138e18(0x4db)](this,_0x2dfb9c),this['callNextMethod']();},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x9a3)]=function(){const _0x545297=_0x3237d7;let _0x2b2665=0x0;this[_0x545297(0x6a1)][_0x545297(0x60c)]>0x0&&(_0x2b2665=this[_0x545297(0x6a1)][this['_baseLineStack']['length']-0x1]);if(this[_0x545297(0x2a8)]['length']>_0x2b2665){if('ukanN'!==_0x545297(0x44b))return _0x35eb73[_0x545297(0xa4)][_0x545297(0x98d)][_0x545297(0x661)][_0x545297(0x715)];else this[_0x545297(0x6ca)]();}else this[_0x545297(0x4a1)]();},VisuMZ['BattleCore']['Window_BattleLog_performActionStart']=Window_BattleLog['prototype'][_0x3237d7(0x8be)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x8be)]=function(_0x115560,_0x599c9a){const _0x93c027=_0x3237d7;VisuMZ[_0x93c027(0xa4)][_0x93c027(0x7ef)][_0x93c027(0x4db)](this,_0x115560,_0x599c9a),this['callNextMethod']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x3d9)]=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x5d8)],Window_BattleLog[_0x3237d7(0x735)]['performAction']=function(_0x517755,_0x2afc14){const _0x48ab0f=_0x3237d7;VisuMZ['BattleCore'][_0x48ab0f(0x3d9)][_0x48ab0f(0x4db)](this,_0x517755,_0x2afc14),this['callNextMethod']();},VisuMZ['BattleCore'][_0x3237d7(0x989)]=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x938)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x938)]=function(_0x3a3056){const _0x199b15=_0x3237d7;VisuMZ[_0x199b15(0xa4)][_0x199b15(0x989)][_0x199b15(0x4db)](this,_0x3a3056);for(const _0x35bc6f of BattleManager[_0x199b15(0x64f)]()){if(!_0x35bc6f)continue;if(_0x35bc6f[_0x199b15(0x4a3)]())continue;_0x35bc6f[_0x199b15(0xb38)]();}this[_0x199b15(0x4a1)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0xf5)]=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x71b)],Window_BattleLog['prototype'][_0x3237d7(0x71b)]=function(_0x23bfe9){const _0x2a9e94=_0x3237d7;VisuMZ[_0x2a9e94(0xa4)]['Window_BattleLog_performDamage'][_0x2a9e94(0x4db)](this,_0x23bfe9),this[_0x2a9e94(0x4a1)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x933)]=Window_BattleLog[_0x3237d7(0x735)]['performMiss'],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x26b)]=function(_0x2bea8e){const _0x3de203=_0x3237d7;VisuMZ[_0x3de203(0xa4)][_0x3de203(0x933)][_0x3de203(0x4db)](this,_0x2bea8e),this['callNextMethod']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x3e0)]=Window_BattleLog[_0x3237d7(0x735)]['performRecovery'],Window_BattleLog['prototype']['performRecovery']=function(_0x5b654e){const _0xb8f196=_0x3237d7;VisuMZ['BattleCore']['Window_BattleLog_performRecovery'][_0xb8f196(0x4db)](this,_0x5b654e),this[_0xb8f196(0x4a1)]();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x495)]=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x170)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x170)]=function(_0x5071e5){const _0x158f84=_0x3237d7;VisuMZ[_0x158f84(0xa4)]['Window_BattleLog_performEvasion'][_0x158f84(0x4db)](this,_0x5071e5),this['callNextMethod']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x9d8)]=Window_BattleLog[_0x3237d7(0x735)]['performMagicEvasion'],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0xb0c)]=function(_0x27119b){const _0x26856f=_0x3237d7;VisuMZ[_0x26856f(0xa4)][_0x26856f(0x9d8)][_0x26856f(0x4db)](this,_0x27119b),this[_0x26856f(0x4a1)]();},VisuMZ[_0x3237d7(0xa4)]['Window_BattleLog_performCounter']=Window_BattleLog[_0x3237d7(0x735)]['performCounter'],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x1b2)]=function(_0x3f5438){const _0x2f7530=_0x3237d7;VisuMZ[_0x2f7530(0xa4)][_0x2f7530(0x8f4)][_0x2f7530(0x4db)](this,_0x3f5438),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performReflection']=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x6f3)],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x6f3)]=function(_0x2bbb8b){const _0x2fd2b2=_0x3237d7;VisuMZ['BattleCore'][_0x2fd2b2(0x919)][_0x2fd2b2(0x4db)](this,_0x2bbb8b),this[_0x2fd2b2(0x4a1)]();},VisuMZ[_0x3237d7(0xa4)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x96e)],Window_BattleLog['prototype'][_0x3237d7(0x96e)]=function(_0xa8f514,_0x303bc1){const _0x1bb048=_0x3237d7;VisuMZ[_0x1bb048(0xa4)]['Window_BattleLog_performSubstitute']['call'](this,_0xa8f514,_0x303bc1),this['callNextMethod']();},VisuMZ[_0x3237d7(0xa4)][_0x3237d7(0x1f1)]=Window_BattleLog['prototype']['performCollapse'],Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x5d7)]=function(_0x311ecd){const _0x431bf2=_0x3237d7;VisuMZ[_0x431bf2(0xa4)]['Window_BattleLog_performCollapse'][_0x431bf2(0x4db)](this,_0x311ecd),this['callNextMethod']();},Window_BattleLog['prototype']['performCastAnimation']=function(_0x10468f,_0x39718e){const _0x511f3=_0x3237d7;_0x10468f[_0x511f3(0x6fb)](_0x39718e),this['callNextMethod']();},Window_BattleLog['prototype'][_0x3237d7(0x88a)]=function(_0x18db77,_0x9b581d){const _0x31b8fc=_0x3237d7,_0x4d5945=_0x18db77[_0x31b8fc(0xa5a)]();if(_0x4d5945<=0x0){if('WqNCx'!=='WqNCx'){if(!_0x1a5eb2[_0x31b8fc(0x5cb)]())return;if(!this[_0x31b8fc(0xe7)])this[_0x31b8fc(0x586)]();this[_0x31b8fc(0x9ec)]();const _0x58c78b=this['battler']();if(_0x58c78b)_0x58c78b[_0x31b8fc(0x961)]();}else SoundManager['playEnemyAttack']();}else this['showNormalAnimation'](_0x9b581d,_0x4d5945);},Window_BattleLog[_0x3237d7(0x735)]['applyImmortal']=function(_0x3794c7,_0x4e11e9,_0x35ff45){const _0x3342f=_0x3237d7,_0x96cf2=[_0x3794c7]['concat'](_0x4e11e9);for(const _0x170355 of _0x96cf2){if(_0x3342f(0xa7d)===_0x3342f(0xa7d)){if(!_0x170355)continue;_0x170355['setImmortal'](_0x35ff45);}else{_0x51b69a=_0xde78d7[_0x3342f(0xa4)]['JS'][_0x18a3b0][_0x3342f(0x4db)](this,this[_0x3342f(0x67f)](),_0xd1a4b4,_0x4bf6f7,_0x59eb52);if(_0x19c5b3)_0x4494d1=_0x4f7cbf;}}this[_0x3342f(0x4a1)]();},Window_BattleLog[_0x3237d7(0x735)]['waitCount']=function(_0x13f675){this['_waitCount']=_0x13f675;},Window_BattleLog['prototype'][_0x3237d7(0x85a)]=function(_0x4982e9,_0x5be3e0){const _0x47266f=_0x3237d7;for(const _0x486f99 of _0x4982e9){if('jAYcG'!==_0x47266f(0x7cc))_0x29e065['bitmap']=_0x3a36ff;else{if(!_0x486f99)continue;_0x486f99[_0x47266f(0x85a)](_0x5be3e0);}}this[_0x47266f(0x4a1)]();},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x9ce)]=function(_0xb3ced3,_0x25970f,_0x4fe596,_0x13a5d4,_0x590764,_0x4de6ff){_0xb3ced3['moveBattlerToPoint'](_0x25970f,_0x4fe596,_0x13a5d4,_0x590764,_0x4de6ff,-0x1),this['callNextMethod']();},Window_BattleLog[_0x3237d7(0x735)]['performMoveToTargets']=function(_0x47b461,_0x150f6f,_0x3ae7a6,_0x31122c,_0x4b778b,_0x554047,_0x4463c0){const _0x200a20=_0x3237d7,_0x55fffc=Math[_0x200a20(0x9c4)](..._0x150f6f['map'](_0x43729e=>_0x43729e[_0x200a20(0x1d5)]()[_0x200a20(0x642)]-_0x43729e[_0x200a20(0x1d5)]()['mainSpriteWidth']()/0x2)),_0x2a424e=Math[_0x200a20(0x2e0)](..._0x150f6f['map'](_0x150461=>_0x150461[_0x200a20(0x1d5)]()[_0x200a20(0x642)]+_0x150461[_0x200a20(0x1d5)]()[_0x200a20(0x1ee)]()/0x2)),_0x3a8d6a=Math[_0x200a20(0x9c4)](..._0x150f6f[_0x200a20(0x1e0)](_0x465dfa=>_0x465dfa[_0x200a20(0x1d5)]()[_0x200a20(0x9ed)]-_0x465dfa[_0x200a20(0x1d5)]()[_0x200a20(0x21c)]())),_0x203f2b=Math[_0x200a20(0x2e0)](..._0x150f6f[_0x200a20(0x1e0)](_0x53d139=>_0x53d139[_0x200a20(0x1d5)]()[_0x200a20(0x9ed)])),_0x3c15f7=_0x150f6f[_0x200a20(0x921)](_0x4add81=>_0x4add81[_0x200a20(0x5ef)]())[_0x200a20(0x60c)],_0x59ff58=_0x150f6f[_0x200a20(0x921)](_0x310769=>_0x310769[_0x200a20(0x8f2)]())[_0x200a20(0x60c)];let _0x576806=0x0,_0x3167bc=0x0;if(_0x3ae7a6[_0x200a20(0x453)](/front/i))_0x576806=_0x3c15f7>=_0x59ff58?_0x55fffc:_0x2a424e;else{if(_0x3ae7a6[_0x200a20(0x453)](/middle/i))_0x576806=(_0x55fffc+_0x2a424e)/0x2,_0x4463c0=-0x1;else _0x3ae7a6['match'](/back/i)&&(_0x576806=_0x3c15f7>=_0x59ff58?_0x2a424e:_0x55fffc);}if(_0x3ae7a6[_0x200a20(0x453)](/head/i))_0x3167bc=_0x3a8d6a;else{if(_0x3ae7a6['match'](/center/i))_0x3167bc=(_0x3a8d6a+_0x203f2b)/0x2;else{if(_0x3ae7a6[_0x200a20(0x453)](/base/i)){if(_0x200a20(0x7e5)===_0x200a20(0x7e5))_0x3167bc=_0x203f2b;else{if(this[_0x200a20(0x40a)]())return _0x3289c4;const _0x5a77f3=this[_0x200a20(0x67f)](),_0x3fe020=_0x1775c1;let _0x20f009=[],_0x59f5c9=[];_0x20f009['push'](this['_armorPenetration'][_0x200a20(0x687)],this[_0x200a20(0x90a)]['arRedFlat']),_0x59f5c9[_0x200a20(0x857)](this[_0x200a20(0x90a)]['arPenRate'],this[_0x200a20(0x90a)]['arRedRate']);const _0x2d7a9c=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x19a920=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x458d0c=this[_0x200a20(0xa73)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x4e8690=this[_0x200a20(0xa73)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x20f009=_0x20f009['concat'](_0x3fe020[_0x200a20(0x2d6)]()[_0x200a20(0x1e0)](_0x1d7afd=>_0x1d7afd&&_0x1d7afd[_0x200a20(0x4fe)][_0x200a20(0x453)](_0x2d7a9c)?_0x300af9(_0x5f1a42['$1']):0x0)),_0x59f5c9=_0x59f5c9[_0x200a20(0x169)](_0x3fe020['traitObjects']()[_0x200a20(0x1e0)](_0x24abad=>_0x24abad&&_0x24abad[_0x200a20(0x4fe)][_0x200a20(0x453)](_0x19a920)?_0x56dfe6(_0x433ff5['$1'])/0x64:0x0)),_0x20f009=_0x20f009[_0x200a20(0x169)](_0x5a77f3['traitObjects']()[_0x200a20(0x1e0)](_0x43937e=>_0x43937e&&_0x43937e[_0x200a20(0x4fe)]['match'](_0x458d0c)?_0x3befb7(_0x4d9b22['$1']):0x0)),_0x59f5c9=_0x59f5c9[_0x200a20(0x169)](_0x5a77f3[_0x200a20(0x2d6)]()[_0x200a20(0x1e0)](_0x690c38=>_0x690c38&&_0x690c38['note'][_0x200a20(0x453)](_0x4e8690)?_0xf82d2d(_0x24117f['$1'])/0x64:0x0)),this[_0x200a20(0x7be)]()[_0x200a20(0x4fe)]['match'](_0x458d0c)&&_0x20f009[_0x200a20(0x857)](_0x259931(_0x4a274e['$1'])),this[_0x200a20(0x7be)]()[_0x200a20(0x4fe)][_0x200a20(0x453)](_0x4e8690)&&_0x59f5c9[_0x200a20(0x857)](_0xf4f8a8(_0x52cafe['$1'])),_0xf19c43=_0x20f009['reduce']((_0xd752a0,_0x102683)=>_0xd752a0-_0x102683,_0x496a88),_0x1b8ef1>0x0&&(_0x91e345=_0x59f5c9[_0x200a20(0x53f)]((_0x4b0e98,_0x178206)=>_0x4b0e98*(0x1-_0x178206),_0x544458)),_0x2c5b2d;}}}}_0x47b461['moveBattlerToPoint'](_0x576806,_0x3167bc,_0x31122c,_0x4b778b,_0x554047,_0x4463c0),this['callNextMethod']();},Window_BattleLog[_0x3237d7(0x735)][_0x3237d7(0x6dc)]=function(_0x458031,_0x538f24,_0x43f64c){const _0x1039e9=_0x3237d7;for(const _0x2e0ba3 of _0x458031){if('yoeSa'==='yoeSa'){if(!_0x2e0ba3)continue;_0x2e0ba3[_0x1039e9(0xb20)](_0x538f24,_0x43f64c);}else return _0x56a6eb['filter'](_0x813a26=>_0x813a26[_0x1039e9(0x4a3)]());}this['callNextMethod']();};